{"version":3,"file":"ceo-core.js.map","sources":["ng://@ceo/core/lib/interfaces/istorage.ts","ng://@ceo/core/lib/services/console.service.ts","ng://@ceo/core/lib/services/logging/log.target.ts","ng://@ceo/core/lib/services/logging/console.target.ts","ng://@ceo/core/lib/utils/config.ts","ng://@ceo/core/lib/utils/json-to-query-params.ts","ng://@ceo/core/lib/utils/json-to-query-params-object.ts","ng://@ceo/core/lib/utils/type.ts","ng://@ceo/core/lib/utils/string-utils/camel-case.ts","ng://@ceo/core/lib/utils/string-utils/pascal-case.ts","ng://@ceo/core/lib/utils/string-utils/singularize.ts","ng://@ceo/core/lib/utils/string-utils/classify.ts","ng://@ceo/core/lib/utils/string-utils/kebab-case.ts","ng://@ceo/core/lib/utils/string-utils/plural-list.ts","ng://@ceo/core/lib/utils/string-utils/pluralize.ts","ng://@ceo/core/lib/utils/string-utils/remove-prefix.ts","ng://@ceo/core/lib/utils/string-utils/slugify.ts","ng://@ceo/core/lib/utils/string-utils/snake-case.ts","ng://@ceo/core/lib/utils/string-utils/starts-with.ts","ng://@ceo/core/lib/utils/string-utils/words.ts","ng://@ceo/core/lib/services/logging/log.service.ts","ng://@ceo/core/lib/services/router-extensions.service.ts","ng://@ceo/core/lib/services/window.service.ts","ng://@ceo/core/lib/services/app.service.ts","ng://@ceo/core/lib/services/storage.service.ts","ng://@ceo/core/lib/services/inflection.service.ts","ng://@ceo/core/lib/services/route-reusable-strategy.ts","ng://@ceo/core/lib/testing/mocks/window.mock.ts","ng://@ceo/core/lib/testing/mocks/router-extensions.mock.ts","ng://@ceo/core/lib/testing/providers/core.ts","ng://@ceo/core/lib/testing/providers/http.ts","ng://@ceo/core/lib/testing/providers/router.ts","ng://@ceo/core/lib/core.module.ts"],"sourcesContent":["// standard localStorage interface\nexport interface IStorage {\n  setItem(key: StorageKey, value: any): void;\n  getItem(key: StorageKey): any;\n  removeItem(key: StorageKey): void;\n}\n\n// to limit interaction with localStorage to a certain whitelist, you can list those keys here\nexport enum StorageKey {\n  USERNAME\n}\n","// angular\nimport { Injectable } from '@angular/core';\n\n// module\nimport { IConsole } from '../interfaces';\n\n@Injectable()\nexport class ConsoleService implements IConsole {\n  \n  public log(m: any): void { return; }\n  public debug(m: any): void { return; }\n  public error(m: any): void { return; }\n  public warn(m: any): void { return; }\n  public info(m: any): void { return; }\n\n}\n","export enum LogLevel {\n  Debug = 0,\n  Info = 1,\n  Warning = 2,\n  Error = 4\n}\n\nexport interface LogEvent {\n  message: string | Object;\n  level: LogLevel;\n}\n\nexport abstract class LogTargetOptions {\n  minLogLevel: LogLevel;\n}\n\nexport abstract class LogTarget {\n  abstract log(event: LogEvent): Promise<any>;\n}\n\nexport abstract class LogTargetBase implements LogTarget {\n  constructor(protected options: LogTargetOptions) {\n  }\n\n  log(event: LogEvent): Promise<any> {\n    if (event.level >= this.options.minLogLevel) {\n      return this.writeToLog(event);\n    }\n    return Promise.resolve();\n  }\n\n  protected abstract writeToLog(event: LogEvent): Promise<any>;\n}\n","import { Injectable, Provider } from '@angular/core';\n\nimport { LogTargetBase, LogEvent, LogLevel, LogTargetOptions, LogTarget } from './log.target';\nimport { ConsoleService } from '../console.service';\n\n@Injectable()\nexport class ConsoleTarget extends LogTargetBase {\n  constructor(private console: ConsoleService, options: LogTargetOptions) {\n    super(options);\n  }\n\n  writeToLog(event: LogEvent) {\n    switch (event.level) {\n      case LogLevel.Debug:\n        this.console.log(event.message);\n        break;\n      case LogLevel.Info:\n        this.console.info(event.message);\n        break;\n      case LogLevel.Warning:\n        this.console.warn(event.message);\n        break;\n      case LogLevel.Error:\n        this.console.error(event.message);\n        break;\n    }\n    return Promise.resolve();\n  }\n}\n\nexport function createConsoleTarget(level: LogLevel, consoleService: ConsoleService) {\n  return new ConsoleTarget(consoleService, { minLogLevel: level });\n}\n\nexport function provideConsoleTarget(logLevel: LogLevel): Provider {\n  return {\n    provide: LogTarget, deps: [ConsoleService],\n    multi: true,\n    useFactory: (c: ConsoleService) => new ConsoleTarget(c, { minLogLevel: logLevel })\n  };\n}\n","// Feel free to extend this interface\n// depending on your app specific config.\nexport interface EnvConfig {\n  API?: string;\n  ENV?: string;\n  WORDPRESS_API_URL?: string;\n  SUNRAY_API_URL?: string;\n}\n\nexport interface iPlatforms {\n  WEB: string;\n  MOBILE_NATIVE: string;\n  MOBILE_HYBRID: string;\n  DESKTOP: string;\n}\n\nexport interface iConfig {}\n\nexport class Config implements iConfig {\n  public PageClass: any;\n\n  public static DEBUG = {\n    LEVEL_1: false, // .info only\n    LEVEL_2: false, // .warn only\n    LEVEL_3: false, // .error only\n    LEVEL_4: false  // .log + all the above\n  };\n\n  // supported platforms\n  public static PLATFORMS: iPlatforms = {\n    WEB: 'web',\n    MOBILE_NATIVE: 'mobile_native',\n    MOBILE_HYBRID: 'mobile_hybrid',\n    DESKTOP: 'desktop'\n  };\n\n  // current target (defaults to web)\n  public static PLATFORM_TARGET: string = Config.PLATFORMS.WEB;\n\n  // convenient platform checks\n  public static IS_WEB(): boolean {\n    return Config.PLATFORM_TARGET === Config.PLATFORMS.WEB;\n  }\n\n  public static IS_MOBILE_NATIVE(): boolean {\n    return Config.PLATFORM_TARGET === Config.PLATFORMS.MOBILE_NATIVE;\n  }\n\n  public static IS_MOBILE_HYBRID(): boolean {\n    return Config.PLATFORM_TARGET === Config.PLATFORMS.MOBILE_HYBRID;\n  }\n\n  public static IS_DESKTOP(): boolean {\n    return Config.PLATFORM_TARGET === Config.PLATFORMS.DESKTOP;\n  }\n\n  public static ENVIRONMENT(): EnvConfig {\n    try {\n      return JSON.parse('<%= ENV_CONFIG %>');\n    } catch (exp) {\n      return {};\n    }\n  }\n\n  public static IS_DEBUG_MODE(): boolean {\n    for (let key in Config.DEBUG) {\n      if (Config.DEBUG[key]) {\n        // if any level is on, debug mode is on\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // reset debug defaults\n  public static RESET() {\n    for (let key in Config.DEBUG) {\n      Config.DEBUG[key] = false;\n    }\n  }\n}\n","import * as _ from \"lodash\";\n\nexport function jsonToQueryParams(params): any {\n  let queryParams = \"\";\n\n  for(let param in params) {\n    queryParams += '&filter[' + param + ']=' + params[param];\n  }\n\n  return queryParams;\n}\n","/**\n *\n * taken from:\n * https://github.com/DylanPiercey/q-flat\n *\n * @description\n * Creates a querystring style object from a nested one.\n *\n * @example\n * var result = flatten({ a: { b: 1 }, c: { d: 1 } })\n * result //-> { \"a[b]\": 1, \"c[d]\": 2 }\n *\n * @param obj The object to flatten.\n */\n\nexport function jsonToQueryParamsObject(json): any {\n  const { toString, hasOwnProperty } = Object.prototype\n  const ObjectType = \"[object Object]\"\n  const ArrayType = \"[object Array]\"\n\n  /**\n   * Join path keys using query string `a[b]` style syntax.\n   */\n  let join = (path: string | void, key: string) => {\n    return path != null ? path + \"[\" + key + \"]\" : key\n  }\n\n  let flatten = (obj: any, path?: string, result?: any) => {\n    const type = toString.call(obj)\n\n    if (result === undefined) {\n      if (type === ObjectType) {\n        result = {}\n      } else if (type === ArrayType) {\n        result = []\n      } else {\n        return\n      }\n    }\n\n    if (type === ArrayType) {\n      //result[join(path, '[]')] = obj\n      console.log(\"The path is \" + path)\n      result[path] = obj\n    }\n    else {\n      for (const key in obj) {\n        /* istanbul ignore if */\n        if (!hasOwnProperty.call(obj, key)) {\n          continue\n        }\n\n        const val = obj[key]\n        /*\n        if (val == null) {\n          continue\n        }\n        */\n\n        switch (toString.call(val)) {\n          case ArrayType:\n            let resultKey = join(path, key) + \"[]\"\n            result[resultKey] = val\n            break\n          case ObjectType:\n            flatten(val, join(path, key), result)\n            break\n          default:\n            result[join(path, key)] = val\n            break\n        }\n      }\n    }\n\n\n    return result\n  }\n  \n  return flatten(json)\n}\n","/**\n * This function coerces a string into a string literal type.\n * Using tagged union types in TypeScript 2.0, this enables\n * powerful typechecking of our reducers.\n * \n * Since every action label passes through this function it\n * is a good place to ensure all of our action labels\n * are unique.\n */\n\nlet typeCache: { [label: string]: boolean } = {};\nexport function type<T>(label: T | ''): T {\n  if (typeCache[<string>label]) {\n    throw new Error(`Action type \"${label}\" is not unqiue\"`);\n  }\n\n  typeCache[<string>label] = true;\n\n  return <T>label;\n}\n","import * as _ from \"lodash\"\n\n// camelCase('Foo Bar')\n// => 'fooBar'\n \n//camelCase('--foo-bar--')\n// => 'fooBar'\n \n//camelCase('__FOO_BAR__')\n// => 'fooBar'\n\nexport function camelCase(value: string) {\n  return _.camelCase(value)\n}\n","import * as _ from \"lodash\";\n\nexport function pascalCase(\n  value: string\n): string {\n\n  if (value == 'print-batches') {\n    return \"PrintBatch\";\n  }\n  else {\n    return _.upperFirst(_.camelCase(_.replace(value, /_/g, \"-\")));\n  }\n}\n","// Simple singularization;\n// simply removes the trailing 's'\n// from any string\n\nexport function singularize(\n  value: string\n): string {\n\n  var re = /s$/\n  return value.toString().replace(re, \"\")\n}\n","import { pascalCase }  from './pascal-case';\nimport { singularize } from './singularize';\n\nexport function classify(\n  value: string\n): string {\n  return singularize(pascalCase(value));\n}\n","import * as _ from \"lodash\"\n\n// _.kebabCase('Foo Bar');\n// => 'foo-bar'\n \n// _.kebabCase('fooBar');\n// => 'foo-bar'\n \n// _.kebabCase('__FOO_BAR__');\n// => 'foo-bar'\n\nexport function kebabCase(value: string) {\n  return _.kebabCase(value)\n}\n","export const pluralList = [\n  {\n    name: 'address',\n    value: 'addresses'\n  },\n  {\n    name: 'category',\n    value: 'categories'\n  },\n  {\n    name: 'gallery',\n    value: 'galleries'\n  },\n  {\n    name: 'company',\n    value: 'companies'\n  },\n]\n","import { pluralList } from './plural-list'\n\nexport function pluralize(\n  value: string\n): string {\n  let pluralWord = pluralList.filter(item => item.name === value)\n  if(pluralWord.length > 0){\n    return pluralWord[0].value\n  }\n  return value.toString().concat('s');\n}\n","import * as _ from 'lodash'\n\n// Removes the prefix from the front of the string,\n// if it exists\nexport function removePrefix(\n  value: string,\n  prefix: string = '',\n): string {\n\n  let prefixLength = prefix.length\n\n  if(_.startsWith(value, prefix)) {\n    return value.slice(prefixLength)\n  }\n\n  return value\n}\n","/**\n * convert the string into its slugified counterpart\n * @param value\n */\n\nexport function slugify(\n  value:string\n): string {\n\n  return value.toString().toLowerCase()\n    .replace(/\\s+/g, '-')           // Replace spaces with -\n    .replace(/_/g, '-')           // Replace underscores with -\n    .replace(/[^\\w\\-]+/g, '')       // Remove all non-word chars\n    .replace(/\\-\\-+/g, '-')         // Replace multiple - with single -\n    .replace(/^-+/, '')             // Trim - from start of text\n    .replace(/-+$/, '')            // Trim - from end of text\n}\n","/**\n * convert a string into its snake-cased (aka \"underscored\") counterpart\n * @param value\n */\n\nimport * as _ from \"lodash\"\n\n// _.snakeCase('Foo Bar')\n// => 'foo_bar'\n \n_.snakeCase('fooBar')\n// => 'foo_bar'\n \n_.snakeCase('--FOO-BAR--')\n// => 'foo_bar'\n\nexport function snakeCase(value: string) {\n  return _.snakeCase(value)\n}\n","import * as _ from \"lodash\";\n\nexport function startsWith(\n  value: string,\n  target: string\n): boolean {\n\n  if(!target) {\n    return true;\n  }\n\n  if(!(value && target)) {\n    return true;\n  }\n\n  return _.startsWith(value.toLowerCase(), target.toLowerCase());\n\n}\n","import * as _ from \"lodash\"\n\nimport { slugify } from './slugify'\n\nexport function words(value: string) {\n  return slugify(value)\n    .replace(/-/g, ' ')\n}\n","// angular\nimport { Injectable, Inject, forwardRef } from '@angular/core';\nimport * as _ from 'lodash';\n\n// module\nimport { Config }                        from '../../utils'\nimport { ConsoleService }                from '../console.service'\nimport { LogTarget, LogEvent, LogLevel } from './log.target'\n\n@Injectable()\nexport class LogService {\n\n  constructor( @Inject(LogTarget) private targets: LogTarget[]) {\n  }\n\n  // debug (standard output)\n  public debug(...msg) {\n    if (Config.DEBUG.LEVEL_4) {\n      // console.debug does not work on {N} apps... use `log`\n      return Promise.all(_.map(this.targets, logger => this.logEvent(logger, msg, LogLevel.Debug)));\n    }\n    return Promise.resolve();\n  }\n\n  // error\n  public error(...err) {\n    if (Config.DEBUG.LEVEL_4 || Config.DEBUG.LEVEL_3) {\n      return Promise.all(_.map(this.targets, logger => this.logEvent(logger, err, LogLevel.Error)));\n    }\n    return Promise.resolve();\n  }\n\n  // warn\n  public warn(...err) {\n    if (Config.DEBUG.LEVEL_4 || Config.DEBUG.LEVEL_2) {\n      return Promise.all(_.map(this.targets, logger => this.logEvent(logger, err, LogLevel.Warning)));\n    }\n    return Promise.resolve();\n  }\n\n  // info\n  public info(...err) {\n    if (Config.DEBUG.LEVEL_4 || Config.DEBUG.LEVEL_1) {\n      return Promise.all(_.map(this.targets, logger => this.logEvent(logger, err, LogLevel.Info)));\n    }\n    return Promise.resolve();\n  }\n\n  private logEvent(target: LogTarget, message: string | Object, level: LogLevel) {\n    return target.log({ level: level, message: message });\n  }\n}\n","// angular\nimport { Injectable } from '@angular/core';\nimport { LocationStrategy } from '@angular/common';\nimport { Router, UrlTree, NavigationExtras } from '@angular/router';\n\nexport interface ExtendedNavigationExtras extends NavigationExtras {\n  // Options for nativescript\n  clearHistory?: boolean;\n  animated?: boolean;\n  transition?: { // See -> https://docs.nativescript.org/api-reference/interfaces/_ui_frame_.navigationtransition.html\n    name?: string;\n    instance?: any;\n    duration?: number;\n    curve?: any;\n  };\n  // END - Options for nativescript\n}\n\nexport interface IRouterExtensions {\n  navigate(commands: Array<any>, extras?: ExtendedNavigationExtras): Promise<boolean>;\n  navigateByUrl(url: string | UrlTree, options?: ExtendedNavigationExtras): Promise<boolean>;\n  back(): void;\n}\n\n@Injectable()\nexport class RouterExtensions implements IRouterExtensions {\n\n  constructor(public router: Router, private locationStrategy: LocationStrategy) { }\n\n  public navigate(commands: Array<any>, extras?: ExtendedNavigationExtras): Promise<boolean> {\n    return this.router.navigate(commands, extras);\n  }\n\n  public navigateByUrl(url: string | UrlTree, options?: ExtendedNavigationExtras): Promise<boolean> {\n    return this.router.navigateByUrl(url);\n  }\n\n  public back() {\n    this.locationStrategy.back();\n  }\n}\n","// angular\nimport { Injectable } from '@angular/core';\n\n// module\nimport { IWindow } from '../interfaces'\n\n@Injectable()\nexport class WindowService implements IWindow {\n  \n  public navigator: any = {};\n  public location: any = {};\n  public alert(msg: string): void { return; }\n  public confirm(msg: string): void { return; }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Config }     from '../utils';\n\nimport { LogService } from './logging/log.service';\n\n@Injectable()\nexport class AppService {\n  constructor(public log: LogService) {\n    this.log.debug(`AppService -> Config env: ${Config.ENVIRONMENT().ENV}`);\n  }\n\n  public debug(message) {\n    this.log.debug(message);\n  }\n}\n","import { Injectable } from '@angular/core'\n\nimport { IStorage, StorageKey } from '../interfaces'\n\n@Injectable()\nexport class StorageService implements IStorage {\n\n  setItem(key: StorageKey, value: any): void {\n    localStorage.setItem('' + key, value === null ? null : JSON.stringify(value));\n  }\n\n  getItem(key: StorageKey): any {\n    const value = localStorage.getItem('' + key);\n    return value === null ? null : JSON.parse(value);\n  }\n\n  removeItem(key: StorageKey): void {\n    localStorage.removeItem('' + key);\n  }\n}\n","import * as _ from 'lodash'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  slugify, startsWith,\n  camelCase, removePrefix,\n  words,\n} from '../utils/index'\n\nexport type InflectionType = string | any[]\n\n@Injectable()\nexport class InflectionService {\n\n  inflect(value: string, inflections: InflectionType[]): string {\n    let applyInflection = (value: string, inflection: InflectionType) => {\n      return this.applyInflection(value, inflection)\n    }\n\n    return _.reduce(inflections, applyInflection, value)\n  }\n\n  camelCase(value: string): string {\n    return camelCase(value)\n  }\n\n  capitalize(value: string): string {\n    return _.capitalize(value)\n  }\n\n  classify(value: string): string {\n    let temp = this.pascalCase(value)\n    return this.singularize(temp)\n  }\n\n  kebabCase(value: string): string {\n    return _.kebabCase(value)\n  }\n\n  pascalCase(value: string): string {\n    if (value == 'print-batches') {\n      return \"PrintBatch\";\n    }\n    else {\n      return _.upperFirst(camelCase(_.replace(value, /_/g, \"-\")))\n    }\n  }\n\n  // Simple pluralization;\n  // just appends the letter 's'\n  // to the tne of the string.\n  pluralize(value: string): string {\n    return `${value}s`\n  }\n\n  removePrefix(value: string, prefix: string = ''): string {\n    return removePrefix(value, prefix)\n  }\n\n  // Simple singularization;\n  // simply removes the trailing 's'\n  // from any string\n  singularize(value: string): string {\n    var re = /s$/\n    return value.toString().replace(re, \"\")\n  }\n\n  slugify(value: string): string {\n    return slugify(value)\n  }\n\n  words(value: string): string {\n    return words(value)\n  }\n  \n  // Apply an inflection; if it does not exist, delegate it to underscore\n  private applyInflection(value: string, inflection: InflectionType): string {\n    var inflectionName\n    var inflectionArgs\n    if(_.isString(inflection)) {\n      inflectionName = inflection\n      inflectionArgs = [value]\n    }\n    else {\n      inflectionName = _.head(inflection)\n      inflectionArgs = _.flatten([value, _.drop(inflection)])\n    }\n\n    var executeInflection\n    if(this[inflectionName]) {\n      executeInflection = _.bind(this[inflectionName], this)\n    }\n    else {\n      executeInflection = _[inflectionName]\n    }\n\n    return executeInflection(...inflectionArgs)\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { ActivatedRouteSnapshot, DetachedRouteHandle, RouteReuseStrategy } from '@angular/router'\n\n/**\n * A route strategy allowing for explicit route reuse.\n * Used as a workaround for https://github.com/angular/angular/issues/18374\n * To reuse a given route, add `data: { reuse: true }` to the route definition.\n */\n@Injectable()\nexport class RouteReusableStrategy extends RouteReuseStrategy {\n\n  public shouldDetach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  public store(route: ActivatedRouteSnapshot, detachedTree: DetachedRouteHandle | null): void { }\n\n  public shouldAttach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  public retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null {\n    return null;\n  }\n\n  public shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    return (future.routeConfig === curr.routeConfig) || future.data.reuseRoute\n  }\n}\n","export class WindowMock {\n  public navigator: any = {\n    language: 'en-US',\n    userAgent: 'testing'\n  };\n  public location: any = {};\n  public alert(msg: string): void {\n    return;\n  }\n  public confirm(msg: string): void {\n    return;\n  }\n}\n\nexport class WindowMockFrench extends WindowMock {\n  constructor() {\n    super();\n    this.navigator.language = 'fr-US';\n  }\n}\n\nexport class WindowMockNoLanguage extends WindowMock {\n  constructor() {\n    super();\n    this.navigator.language = undefined;\n  }\n}\n","// angular\nimport { Injectable } from '@angular/core';\nimport { UrlTree } from '@angular/router';\n\n// module\nimport { IRouterExtensions, ExtendedNavigationExtras } from '../../services';\n\n@Injectable()\nexport class RouterExtensionsMock implements IRouterExtensions {\n  navigate(commands: Array<any>, extras?: ExtendedNavigationExtras): Promise<boolean> {\n    return Promise.resolve(true);\n  }\n\n  navigateByUrl(url: string | UrlTree, options?: ExtendedNavigationExtras): Promise<boolean> {\n    return Promise.resolve(true);\n  }\n\n  back(): void {\n    return;\n  }\n}\n","// app\n// Removing dev on analytics module\n//import { analyticsProviders } from '../../../analytics';\n\n// module\nimport { WindowService, StorageService, ConsoleService, LogService, LogTarget, ConsoleTarget, LogLevel, RouterExtensions, AppService } from '../../services';\n\n// mocks\nimport { WindowMock } from '../mocks/window.mock';\nimport { RouterExtensionsMock } from '../mocks/router-extensions.mock';\n\nexport function TEST_CORE_PROVIDERS(options?: any): Array<any> {\n  // options:\n  // window:   = custom window mock (mainly for changing out language)\n\n  let providers = [\n    { provide: ConsoleService, useValue: console },\n    { provide: StorageService, useValue: localStorage },\n    { provide: WindowService, useClass: (options && options.window) || WindowMock },\n    {\n      provide: LogTarget,\n      deps: [ConsoleService],\n      useFactory: (c: ConsoleService) => new ConsoleTarget(c, { minLogLevel: LogLevel.Debug }),\n      multi: true\n    },\n    LogService,\n    //analyticsProviders,\n    { provide: RouterExtensions, useClass: RouterExtensionsMock },\n    AppService\n  ];\n\n  return providers;\n}\n","// angular\nimport { ReflectiveInjector } from '@angular/core';\nimport { BaseRequestOptions, ConnectionBackend } from '@angular/http';\nimport { MockBackend } from '@angular/http/testing';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nlet providers: Array<any> = [\n  BaseRequestOptions,\n  MockBackend,\n];\n\n/*\n* For instances where you need the injector\n* @returns `ReflectiveInjector`\n*/\nexport function GET_HTTP_PROVIDERS_INJECTOR(additionalProviders?: Array<any>): ReflectiveInjector {\n\n  if (additionalProviders) {\n    providers = providers.concat(additionalProviders);\n  }\n\n  return ReflectiveInjector.resolveAndCreate(providers);\n}\n\n/*\n* For testing http services\n* @returns `Array<any>`\n*/\nexport function TEST_HTTP_PROVIDERS(): Array<any> {\n  return providers;\n}\n\n\n\n","// angular\nimport { Location, LocationStrategy, APP_BASE_HREF } from '@angular/common';\nimport { SpyLocation, MockLocationStrategy } from '@angular/common/testing';\n\nexport function TEST_LOCATION_PROVIDERS(): Array<any> {\n\n  return [\n    {provide: Location, useClass: SpyLocation},\n    {provide: LocationStrategy, useClass: MockLocationStrategy},\n    { provide: APP_BASE_HREF, useValue: '/' }\n  ];\n}\n","// angular\nimport { NgModule, ModuleWithProviders, Optional, SkipSelf } from '@angular/core'\n\nimport { RouteReuseStrategy } from '@angular/router';\n\n// module\nimport {\n  ConsoleService,\n  LogService,\n  RouterExtensions,\n  WindowService,\n  AppService,\n  StorageService,\n  InflectionService,\n  RouteReusableStrategy,\n} from './services/index'\n\n\n@NgModule({\n  imports: [],\n  providers: [\n    ConsoleService,\n    LogService,\n    RouterExtensions,\n    WindowService,\n    AppService,\n    StorageService,\n    InflectionService,\n    {\n      provide: RouteReuseStrategy,\n      useClass: RouteReusableStrategy\n    },\n  ]\n})\nexport class CoreModule {\n  static forRoot(configuredProviders: Array<any>): ModuleWithProviders {\n    return {\n      ngModule: CoreModule,\n      providers: configuredProviders\n    };\n  }\n  constructor(@Optional() @SkipSelf() parentModule: CoreModule) {\n    if (parentModule) {\n      throw new Error('CoreModule already loaded; Import in root module only.');\n    }\n  }\n}\n"],"names":["tslib_1.__extends","flatten","camelCase","_.camelCase","_.upperFirst","_.replace","kebabCase","_.kebabCase","_.startsWith","_.snakeCase","snakeCase","startsWith","_.map","_.reduce","_.capitalize","_.isString","_.head","_.flatten","_.drop","_.bind"],"mappings":"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"}
