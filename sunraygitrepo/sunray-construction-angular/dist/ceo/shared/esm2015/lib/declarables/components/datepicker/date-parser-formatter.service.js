/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Current Implementation taken from:
// https://github.com/ng-bootstrap/ng-bootstrap/blob/master/src/datepicker/ngb-date-parser-formatter.ts
import * as _ from 'lodash';
import { Injectable } from '@angular/core';
/**
 * @param {?} value
 * @return {?}
 */
export function padNumber(value) {
    if (_.isNumber(value)) {
        return `0${value}`.slice(-2);
    }
    else {
        return '';
    }
}
export class DateParserFormatter {
    // from input -> internal model
    /**
     * @param {?} value
     * @return {?}
     */
    parse(value) {
        if (value) {
            /** @type {?} */
            const dateParts = value.trim().split('-');
            if (dateParts.length === 1 && _.isNumber(dateParts[0])) {
                return { year: _.toInteger(dateParts[0]), month: null, day: null };
            }
            else if (dateParts.length === 2 && _.isNumber(dateParts[0]) && _.isNumber(dateParts[1])) {
                return { year: _.toInteger(dateParts[0]), month: _.toInteger(dateParts[1]), day: null };
            }
            else if (dateParts.length === 3 && _.isNumber(dateParts[0]) && _.isNumber(dateParts[1]) && _.isNumber(dateParts[2])) {
                return { year: _.toInteger(dateParts[0]), month: _.toInteger(dateParts[1]), day: _.toInteger(dateParts[2]) };
            }
        }
        return null;
    }
    // from internal model -> string
    /**
     * @param {?} date
     * @return {?}
     */
    format(date) {
        if (!date) {
            return '';
        }
        /** @type {?} */
        let separator = '/';
        /** @type {?} */
        let year = _.isNumber(date.year) ? padNumber(date.year) : '';
        /** @type {?} */
        let month = _.isNumber(date.month) ? padNumber(date.month) : '';
        /** @type {?} */
        let day = _.isNumber(date.day) ? padNumber(date.day) : '';
        return _.join([month, day, year], separator);
    }
}
DateParserFormatter.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1wYXJzZXItZm9ybWF0dGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VvL3NoYXJlZC8iLCJzb3VyY2VzIjpbImxpYi9kZWNsYXJhYmxlcy9jb21wb25lbnRzL2RhdGVwaWNrZXIvZGF0ZS1wYXJzZXItZm9ybWF0dGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBR0EsT0FBTyxLQUFNLENBQUMsTUFBTSxRQUFRLENBQUE7QUFFNUIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQTs7Ozs7QUFPMUMsTUFBTSxVQUFVLFNBQVMsQ0FBQyxLQUFhO0lBQ3JDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNyQixPQUFPLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDN0I7U0FBTTtRQUNMLE9BQU8sRUFBRSxDQUFBO0tBQ1Y7QUFDSCxDQUFDO0FBR0QsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7O0lBRTlCLEtBQUssQ0FBQyxLQUFhO1FBQ2pCLElBQUksS0FBSyxFQUFFOztrQkFDSCxTQUFTLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDekMsSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN0RCxPQUFPLEVBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFDLENBQUE7YUFDakU7aUJBQU0sSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3pGLE9BQU8sRUFBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFDLENBQUE7YUFDdEY7aUJBQU0sSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDckgsT0FBTyxFQUFDLElBQUksRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUE7YUFDM0c7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQzs7Ozs7O0lBR0QsTUFBTSxDQUFDLElBQW1CO1FBQ3hCLElBQUcsQ0FBQyxJQUFJLEVBQUU7WUFDUixPQUFPLEVBQUUsQ0FBQTtTQUNWOztZQUVHLFNBQVMsR0FBRyxHQUFHOztZQUNmLElBQUksR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTs7WUFDeEQsS0FBSyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFOztZQUMzRCxHQUFHLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFFekQsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUM5QyxDQUFDOzs7WUE3QkYsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbIi8vIEN1cnJlbnQgSW1wbGVtZW50YXRpb24gdGFrZW4gZnJvbTpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9uZy1ib290c3RyYXAvbmctYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL3NyYy9kYXRlcGlja2VyL25nYi1kYXRlLXBhcnNlci1mb3JtYXR0ZXIudHNcblxuaW1wb3J0ICogYXMgIF8gZnJvbSAnbG9kYXNoJ1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcblxuaW1wb3J0IHtcbiAgTmdiRGF0ZVN0cnVjdCxcbiAgTmdiRGF0ZSxcbn0gZnJvbSAnQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAnXG5cbmV4cG9ydCBmdW5jdGlvbiBwYWROdW1iZXIodmFsdWU6IG51bWJlcik6IHN0cmluZyB7XG4gIGlmIChfLmlzTnVtYmVyKHZhbHVlKSkge1xuICAgIHJldHVybiBgMCR7dmFsdWV9YC5zbGljZSgtMilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJydcbiAgfVxufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGF0ZVBhcnNlckZvcm1hdHRlciB7XG4gIC8vIGZyb20gaW5wdXQgLT4gaW50ZXJuYWwgbW9kZWxcbiAgcGFyc2UodmFsdWU6IHN0cmluZyk6IE5nYkRhdGVTdHJ1Y3Qge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgY29uc3QgZGF0ZVBhcnRzID0gdmFsdWUudHJpbSgpLnNwbGl0KCctJylcbiAgICAgIGlmIChkYXRlUGFydHMubGVuZ3RoID09PSAxICYmIF8uaXNOdW1iZXIoZGF0ZVBhcnRzWzBdKSkge1xuICAgICAgICByZXR1cm4ge3llYXI6IF8udG9JbnRlZ2VyKGRhdGVQYXJ0c1swXSksIG1vbnRoOiBudWxsLCBkYXk6IG51bGx9XG4gICAgICB9IGVsc2UgaWYgKGRhdGVQYXJ0cy5sZW5ndGggPT09IDIgJiYgXy5pc051bWJlcihkYXRlUGFydHNbMF0pICYmIF8uaXNOdW1iZXIoZGF0ZVBhcnRzWzFdKSkge1xuICAgICAgICByZXR1cm4ge3llYXI6IF8udG9JbnRlZ2VyKGRhdGVQYXJ0c1swXSksIG1vbnRoOiBfLnRvSW50ZWdlcihkYXRlUGFydHNbMV0pLCBkYXk6IG51bGx9XG4gICAgICB9IGVsc2UgaWYgKGRhdGVQYXJ0cy5sZW5ndGggPT09IDMgJiYgXy5pc051bWJlcihkYXRlUGFydHNbMF0pICYmIF8uaXNOdW1iZXIoZGF0ZVBhcnRzWzFdKSAmJiBfLmlzTnVtYmVyKGRhdGVQYXJ0c1syXSkpIHtcbiAgICAgICAgcmV0dXJuIHt5ZWFyOiBfLnRvSW50ZWdlcihkYXRlUGFydHNbMF0pLCBtb250aDogXy50b0ludGVnZXIoZGF0ZVBhcnRzWzFdKSwgZGF5OiBfLnRvSW50ZWdlcihkYXRlUGFydHNbMl0pfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLy8gZnJvbSBpbnRlcm5hbCBtb2RlbCAtPiBzdHJpbmdcbiAgZm9ybWF0KGRhdGU6IE5nYkRhdGVTdHJ1Y3QpOiBzdHJpbmcge1xuICAgIGlmKCFkYXRlKSB7XG4gICAgICByZXR1cm4gJydcbiAgICB9XG5cbiAgICBsZXQgc2VwYXJhdG9yID0gJy8nXG4gICAgbGV0IHllYXIgPSBfLmlzTnVtYmVyKGRhdGUueWVhcikgPyBwYWROdW1iZXIoZGF0ZS55ZWFyKSA6ICcnXG4gICAgbGV0IG1vbnRoID0gXy5pc051bWJlcihkYXRlLm1vbnRoKSA/IHBhZE51bWJlcihkYXRlLm1vbnRoKSA6ICcnXG4gICAgbGV0IGRheSA9IF8uaXNOdW1iZXIoZGF0ZS5kYXkpID8gcGFkTnVtYmVyKGRhdGUuZGF5KSA6ICcnXG5cbiAgICByZXR1cm4gXy5qb2luKFttb250aCwgZGF5LCB5ZWFyXSwgc2VwYXJhdG9yKVxuICB9XG59XG4iXX0=