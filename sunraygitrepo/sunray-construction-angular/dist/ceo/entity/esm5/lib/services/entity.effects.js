/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import * as _ from 'lodash';
import { Observable, } from 'rxjs';
import { switchMap, map, mergeMap, filter, } from 'rxjs/operators';
import { Injectable, Inject } from '@angular/core';
// @ngrx imports
import { Store } from '@ngrx/store';
import { Actions, Effect, ofType, } from '@ngrx/effects';
import { typeFor, applicationConfigSelectors, ApplicationConfigActions, } from '@ceo/state';
import { EntityService } from './entity.service';
import { FeatureActions, } from '../state/index';
import { EntityActions, EntityActionsMap, } from '../classes/index';
import { FEATURE_CONFIG, } from '../util/tokens';
import { ResourceIdentifierService } from './resource-identifier.service';
var EntityEffects = /** @class */ (function () {
    function EntityEffects(store, actions$, entityService, featureConfig, resourceIdentifierService) {
        var _this = this;
        this.store = store;
        this.actions$ = actions$;
        this.entityService = entityService;
        this.featureConfig = featureConfig;
        this.resourceIdentifierService = resourceIdentifierService;
        this.featureName = 'Feature';
        this.init$ = this.actions$
            .pipe(ofType(this.featureAction("INIT")), switchMap(function (action) {
            /** @type {?} */
            var registerFeatureAction = new FeatureActions.RegisterFeature(_this.featureConfig);
            /** @type {?} */
            var loadSeedAction = new EntityActions.LoadSeedData(_this.featureName, _this.featureConfig);
            return [registerFeatureAction, loadSeedAction];
        }));
        this.seed$ = this.actions$
            .pipe(ofType(this.featureAction("LOAD_SEED_DATA")), switchMap(function (action) {
            /** @type {?} */
            var feature = action.payload;
            /** @type {?} */
            var seeds = action.payload.seedEntities;
            /** @type {?} */
            var buildLoadAction = function (ri) {
                /** @type {?} */
                var sliceName = _this.getFeatureEntitySlice(feature.name, ri.type);
                return new EntityActions.Load(sliceName, ri);
            };
            return _.map(seeds, buildLoadAction);
        }));
        this.load$ = this.actions$
            .pipe(ofType.apply(void 0, tslib_1.__spread(this.sliceActions("LOAD"))), mergeMap(function (action) {
            /** @type {?} */
            var resourceOpts = _this.buildResourceOpts(action);
            return _this.entityService.get$(resourceOpts);
        }), map(function (payload) {
            return new EntityActions.AsyncSuccess(_this.featureName, payload);
        }));
        this.add$ = this.actions$
            .pipe(ofType.apply(void 0, tslib_1.__spread(this.sliceActions("ADD"))), mergeMap(function (action) {
            /** @type {?} */
            var resourceOpts = _this.buildResourceOpts(action);
            return _this.entityService.create$(resourceOpts);
        }), map(function (payload) {
            return new EntityActions.AsyncSuccess(_this.featureName, payload);
        }));
        this.update$ = this.actions$
            .pipe(ofType.apply(void 0, tslib_1.__spread(this.sliceActions("UPDATE"))), mergeMap(function (action) {
            /** @type {?} */
            var resourceOpts = _this.buildResourceOpts(action);
            return _this.entityService.update$(resourceOpts);
        }), map(function (payload) {
            return new EntityActions.AsyncSuccess(_this.featureName, payload);
        }));
        this.asyncSuccess$ = this.actions$
            .pipe(ofType(this.featureAction("ASYNC_SUCCESS")), map(function (action) {
            return {
                resourceIdentifier: action.payload.resourceIdentifier,
                data: _this.groupedEntities(action.payload),
            };
        }), switchMap(function (payload) {
            return _this.buildAddToStoreActions(payload);
        }));
        this.delete$ = this.actions$
            .pipe(ofType.apply(void 0, tslib_1.__spread(this.sliceActions("DELETE"))), mergeMap(function (action) {
            /** @type {?} */
            var resourceOpts = _this.buildResourceOpts(action);
            return _this.entityService.delete$(resourceOpts);
        }), map(function (payload) {
            return new EntityActions.DeleteSuccess(_this.getEntitySlice(payload.resourceIdentifier.type), payload.resourceIdentifier.payload);
        }));
        this.loadApplicationResource$ = this.actions$
            .pipe(ofType('[ApplicationConfig] LOAD_RESOURCE_BY_ID'), mergeMap(function () {
            return _this.store.select(applicationConfigSelectors.resourceById);
        }), filter(function (payload) { return _this.isValidPayload(payload); }), mergeMap(function (payload) {
            return _this.entityService.get$(payload);
        }), filter(function (payload) { return _this.isValidResource(payload); }), map(function (payload) {
            return new ApplicationConfigActions.SetPrimaryEntity(payload);
        }));
        this.featureName = featureConfig.name;
    }
    /**
     * @return {?}
     */
    EntityEffects.prototype.ngrxOnIdentifyEffects = /**
     * @return {?}
     */
    function () {
        return this.featureName;
    };
    /**
     * @return {?}
     */
    EntityEffects.prototype.ngrxOnInitEffects = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var initFeatureAction = new EntityActions.Init(this.featureName, this.featureConfig);
        return initFeatureAction;
    };
    /*
    ngrxOnRunEffects(resolvedEffects$: Observable<EffectNotification>) {
      return this.actions$.pipe(
        tap(action => {
          console.log("in OnRunEffects, action: ", action.type, ", feature: ", this.featureName)
        }),
        exhaustMap(() => {
          let featureName = this.featureName
          return resolvedEffects$
        })
      )
    }
    */
    // Private methods
    /*
      ngrxOnRunEffects(resolvedEffects$: Observable<EffectNotification>) {
        return this.actions$.pipe(
          tap(action => {
            console.log("in OnRunEffects, action: ", action.type, ", feature: ", this.featureName)
          }),
          exhaustMap(() => {
            let featureName = this.featureName
            return resolvedEffects$
          })
        )
      }
      */
    // Private methods
    /**
     * @private
     * @param {?} payload
     * @return {?}
     */
    EntityEffects.prototype.buildAddToStoreActions = /*
      ngrxOnRunEffects(resolvedEffects$: Observable<EffectNotification>) {
        return this.actions$.pipe(
          tap(action => {
            console.log("in OnRunEffects, action: ", action.type, ", feature: ", this.featureName)
          }),
          exhaustMap(() => {
            let featureName = this.featureName
            return resolvedEffects$
          })
        )
      }
      */
    // Private methods
    /**
     * @private
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        /** @type {?} */
        var actions = [];
        /** @type {?} */
        var addActions = _.map(payload.data, _.bind(this.buildAddEntitiesAction, this));
        actions = actions.concat(addActions);
        if (this.resourceIdentifierService.isScope(payload.resourceIdentifier)) {
            /** @type {?} */
            var scopeAction = this.buildAddScopeEntitiesAction(payload);
            actions = actions.concat([scopeAction]);
        }
        return _.flatten(actions);
    };
    /**
     * @private
     * @param {?} payload
     * @return {?}
     */
    EntityEffects.prototype.buildAddEntitiesAction = /**
     * @private
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return new EntityActions.AddStoreEntities(this.getEntitySlice(payload.sliceName), payload.entities);
    };
    /**
     * @private
     * @param {?} payload
     * @return {?}
     */
    EntityEffects.prototype.buildAddScopeEntitiesAction = /**
     * @private
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        /** @type {?} */
        var ri = payload.resourceIdentifier;
        /** @type {?} */
        var scopeName = this.resourceIdentifierService.scopeName(ri);
        /** @type {?} */
        var sliceName = ri.type;
        /** @type {?} */
        var hasEntityType = function (payload) {
            return payload.sliceName == sliceName;
        };
        /** @type {?} */
        var sliceNamePayload = _.find(payload.data, hasEntityType);
        /** @type {?} */
        var entities = sliceNamePayload.entities;
        /** @type {?} */
        var actionPayload = {
            scope: scopeName,
            entities: entities
        };
        return new EntityActions.SetScopeEntities(this.getEntitySlice(sliceName), actionPayload);
    };
    /**
     * @private
     * @param {?} payload
     * @return {?}
     */
    EntityEffects.prototype.groupedEntities = /**
     * @private
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        /** @type {?} */
        var entities = payload.data;
        /** @type {?} */
        var groupedBySlice = function (entityTypeMap, entity) {
            /** @type {?} */
            var sliceName = entity.constructor.sliceName;
            /** @type {?} */
            var entities = [];
            if (entityTypeMap[sliceName]) {
                entities = entityTypeMap[sliceName].entities;
            }
            entities.push(entity);
            entityTypeMap[sliceName] = {
                sliceName: sliceName,
                entities: entities
            };
            return entityTypeMap;
        };
        return _.values(_.reduce(entities, groupedBySlice, {}));
    };
    /**
     * @private
     * @param {?} payload
     * @return {?}
     */
    EntityEffects.prototype.isValidPayload = /**
     * @private
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        //TODO: @Deepak  - it should ensure the payload is for THIS feature
        return _.has(payload, 'feature') &&
            _.has(payload, 'type') &&
            _.has(payload, 'id');
    };
    /**
     * @private
     * @param {?} payload
     * @return {?}
     */
    EntityEffects.prototype.isValidResource = /**
     * @private
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return payload;
    };
    /**
     * @private
     * @param {?} action
     * @return {?}
     */
    EntityEffects.prototype.buildResourceOpts = /**
     * @private
     * @param {?} action
     * @return {?}
     */
    function (action) {
        /** @type {?} */
        var ri = {
            type: _.last(_.split(action.slice, "."))
        };
        ri = _.merge({}, ri, action.payload);
        return {
            payload: action.payload,
            type: _.last(_.split(action.slice, ".")),
            data: action.payload.data,
            resourceIdentifier: ri,
        };
    };
    /**
     * @private
     * @param {?} actionName
     * @return {?}
     */
    EntityEffects.prototype.featureAction = /**
     * @private
     * @param {?} actionName
     * @return {?}
     */
    function (actionName) {
        /** @type {?} */
        var featureName = this.featureConfig.name;
        return typeFor(featureName, EntityActionsMap[actionName]);
    };
    /**
     * @private
     * @param {?} actionName
     * @return {?}
     */
    EntityEffects.prototype.sliceActions = /**
     * @private
     * @param {?} actionName
     * @return {?}
     */
    function (actionName) {
        /** @type {?} */
        var buildActionType = function (sliceName) {
            return typeFor(sliceName, EntityActionsMap[actionName]);
        };
        /** @type {?} */
        var sliceActions = _.map(this.featureConfig.sliceNames, buildActionType);
        return sliceActions;
    };
    /**
     * @private
     * @param {?} resourceOpts
     * @return {?}
     */
    EntityEffects.prototype.getSliceName = /**
     * @private
     * @param {?} resourceOpts
     * @return {?}
     */
    function (resourceOpts) {
        return _.join([resourceOpts.feature, 'entities', resourceOpts.type], '.');
    };
    /**
     * @private
     * @param {?} sliceName
     * @return {?}
     */
    EntityEffects.prototype.getEntitySlice = /**
     * @private
     * @param {?} sliceName
     * @return {?}
     */
    function (sliceName) {
        return this.getFeatureEntitySlice(this.featureName, sliceName);
    };
    /**
     * @private
     * @param {?} featureName
     * @param {?} sliceName
     * @return {?}
     */
    EntityEffects.prototype.getFeatureEntitySlice = /**
     * @private
     * @param {?} featureName
     * @param {?} sliceName
     * @return {?}
     */
    function (featureName, sliceName) {
        return _.join([featureName, 'entities', sliceName], '.');
    };
    EntityEffects.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    EntityEffects.ctorParameters = function () { return [
        { type: Store },
        { type: Actions },
        { type: EntityService },
        { type: undefined, decorators: [{ type: Inject, args: [FEATURE_CONFIG,] }] },
        { type: ResourceIdentifierService }
    ]; };
    tslib_1.__decorate([
        Effect(),
        tslib_1.__metadata("design:type", Observable)
    ], EntityEffects.prototype, "init$", void 0);
    tslib_1.__decorate([
        Effect(),
        tslib_1.__metadata("design:type", Observable)
    ], EntityEffects.prototype, "seed$", void 0);
    tslib_1.__decorate([
        Effect(),
        tslib_1.__metadata("design:type", Observable)
    ], EntityEffects.prototype, "load$", void 0);
    tslib_1.__decorate([
        Effect(),
        tslib_1.__metadata("design:type", Observable)
    ], EntityEffects.prototype, "add$", void 0);
    tslib_1.__decorate([
        Effect(),
        tslib_1.__metadata("design:type", Observable)
    ], EntityEffects.prototype, "update$", void 0);
    tslib_1.__decorate([
        Effect(),
        tslib_1.__metadata("design:type", Observable)
    ], EntityEffects.prototype, "asyncSuccess$", void 0);
    tslib_1.__decorate([
        Effect(),
        tslib_1.__metadata("design:type", Observable)
    ], EntityEffects.prototype, "delete$", void 0);
    tslib_1.__decorate([
        Effect(),
        tslib_1.__metadata("design:type", Observable)
    ], EntityEffects.prototype, "loadApplicationResource$", void 0);
    return EntityEffects;
}());
export { EntityEffects };
if (false) {
    /** @type {?} */
    EntityEffects.prototype.featureName;
    /** @type {?} */
    EntityEffects.prototype.init$;
    /** @type {?} */
    EntityEffects.prototype.seed$;
    /** @type {?} */
    EntityEffects.prototype.load$;
    /** @type {?} */
    EntityEffects.prototype.add$;
    /** @type {?} */
    EntityEffects.prototype.update$;
    /** @type {?} */
    EntityEffects.prototype.asyncSuccess$;
    /** @type {?} */
    EntityEffects.prototype.delete$;
    /** @type {?} */
    EntityEffects.prototype.loadApplicationResource$;
    /**
     * @type {?}
     * @protected
     */
    EntityEffects.prototype.store;
    /**
     * @type {?}
     * @protected
     */
    EntityEffects.prototype.actions$;
    /**
     * @type {?}
     * @protected
     */
    EntityEffects.prototype.entityService;
    /**
     * @type {?}
     * @protected
     */
    EntityEffects.prototype.featureConfig;
    /**
     * @type {?}
     * @protected
     */
    EntityEffects.prototype.resourceIdentifierService;
}
//# sourceMappingURL=data:application/json;base64,