/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DataService } from './data.service';
import { EntityCloner } from './entity-cloner.service';
import { EntityEffects } from './entity.effects';
import { EntityFactory } from './entity-factory.service';
import { EntityService } from './entity.service';
import { EntityRelationshipProvider } from './entity-relationship-provider.service';
import { EntityTypeProviderService } from './entity-type-provider.service';
import { ResourceIdentifierService } from './resource-identifier.service';
import { RouteEntityTypeProvider } from './route-entity-type-provider.service';
import { DataService as EntityDataService } from './data.service';
import * as attributeBuilders from './attribute-builders/index';
import * as selectors from './selectors/index';
/** @type {?} */
export var services = tslib_1.__spread([
    DataService,
    EntityCloner,
    EntityEffects,
    EntityFactory,
    EntityRelationshipProvider,
    EntityService,
    EntityTypeProviderService,
    ResourceIdentifierService,
    RouteEntityTypeProvider,
    EntityDataService
], attributeBuilders.services, selectors.services);
export { DataService };
export { EntityCloner };
export { EntityDataService };
export { EntityEffects };
export { EntityFactory };
export { EntityService };
export { EntityRelationshipProvider };
export { EntityTypeProviderService };
export { ResourceIdentifierService };
export { RouteEntityTypeProvider };
export { EntityAttributeBuilder, JsonApiEntityAttributeBuilder, } from './attribute-builders/index';
export { EntitySelectorNameService, EntitySelectorService, EntitySelectorProvider, } from './selectors/index';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2FwaS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjZW8vZW50aXR5LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3B1YmxpY19hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQXVCLGdCQUFnQixDQUFBO0FBQzdELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBc0IseUJBQXlCLENBQUE7QUFDdEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFxQixrQkFBa0IsQ0FBQTtBQUMvRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQXFCLDBCQUEwQixDQUFBO0FBQ3ZFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBcUIsa0JBQWtCLENBQUE7QUFDL0QsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQVEsd0NBQXdDLENBQUE7QUFDckYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQVMsZ0NBQWdDLENBQUE7QUFDN0UsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQVMsK0JBQStCLENBQUE7QUFDNUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQVcsc0NBQXNDLENBQUE7QUFDbkYsT0FBTyxFQUFFLFdBQVcsSUFBSSxpQkFBaUIsRUFBRSxNQUFtQixnQkFBZ0IsQ0FBQTtBQUU5RSxPQUFPLEtBQUssaUJBQWlCLE1BQU0sNEJBQTRCLENBQUE7QUFDL0QsT0FBTyxLQUFLLFNBQVMsTUFBYyxtQkFBbUIsQ0FBQTs7QUFFdEQsTUFBTSxLQUFPLFFBQVE7SUFDbkIsV0FBVztJQUNYLFlBQVk7SUFDWixhQUFhO0lBQ2IsYUFBYTtJQUNiLDBCQUEwQjtJQUMxQixhQUFhO0lBQ2IseUJBQXlCO0lBQ3pCLHlCQUF5QjtJQUN6Qix1QkFBdUI7SUFDdkIsaUJBQWlCO0dBQ2QsaUJBQWlCLENBQUMsUUFBUSxFQUMxQixTQUFTLENBQUMsUUFBUSxDQUN0QjtBQUVELE9BQU8sRUFBRSxXQUFXLEVBQUUsQ0FBQTtBQUN0QixPQUFPLEVBQUUsWUFBWSxFQUFFLENBQUE7QUFDdkIsT0FBTyxFQUFFLGlCQUFpQixFQUFFLENBQUE7QUFDNUIsT0FBTyxFQUFFLGFBQWEsRUFBRSxDQUFBO0FBQ3hCLE9BQU8sRUFBRSxhQUFhLEVBQUUsQ0FBQTtBQUN4QixPQUFPLEVBQUUsYUFBYSxFQUFFLENBQUE7QUFDeEIsT0FBTyxFQUFFLDBCQUEwQixFQUFFLENBQUE7QUFDckMsT0FBTyxFQUFFLHlCQUF5QixFQUFFLENBQUE7QUFDcEMsT0FBTyxFQUFFLHlCQUF5QixFQUFFLENBQUE7QUFDcEMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLENBQUE7QUFFbEMsT0FBTyxFQUNMLHNCQUFzQixFQUN0Qiw2QkFBNkIsR0FDOUIsTUFBTSw0QkFBNEIsQ0FBQTtBQUVuQyxPQUFPLEVBQ0wseUJBQXlCLEVBQ3pCLHFCQUFxQixFQUNyQixzQkFBc0IsR0FDdkIsTUFBTSxtQkFBbUIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFTZXJ2aWNlIH0gICAgICAgICAgICAgICAgICBmcm9tICcuL2RhdGEuc2VydmljZSdcbmltcG9ydCB7IEVudGl0eUNsb25lciB9ICAgICAgICAgICAgICAgICBmcm9tICcuL2VudGl0eS1jbG9uZXIuc2VydmljZSdcbmltcG9ydCB7IEVudGl0eUVmZmVjdHMgfSAgICAgICAgICAgICAgICBmcm9tICcuL2VudGl0eS5lZmZlY3RzJ1xuaW1wb3J0IHsgRW50aXR5RmFjdG9yeSB9ICAgICAgICAgICAgICAgIGZyb20gJy4vZW50aXR5LWZhY3Rvcnkuc2VydmljZSdcbmltcG9ydCB7IEVudGl0eVNlcnZpY2UgfSAgICAgICAgICAgICAgICBmcm9tICcuL2VudGl0eS5zZXJ2aWNlJ1xuaW1wb3J0IHsgRW50aXR5UmVsYXRpb25zaGlwUHJvdmlkZXIgfSAgIGZyb20gJy4vZW50aXR5LXJlbGF0aW9uc2hpcC1wcm92aWRlci5zZXJ2aWNlJ1xuaW1wb3J0IHsgRW50aXR5VHlwZVByb3ZpZGVyU2VydmljZSB9ICAgIGZyb20gJy4vZW50aXR5LXR5cGUtcHJvdmlkZXIuc2VydmljZSdcbmltcG9ydCB7IFJlc291cmNlSWRlbnRpZmllclNlcnZpY2UgfSAgICBmcm9tICcuL3Jlc291cmNlLWlkZW50aWZpZXIuc2VydmljZSdcbmltcG9ydCB7IFJvdXRlRW50aXR5VHlwZVByb3ZpZGVyIH0gICAgICBmcm9tICcuL3JvdXRlLWVudGl0eS10eXBlLXByb3ZpZGVyLnNlcnZpY2UnXG5pbXBvcnQgeyBEYXRhU2VydmljZSBhcyBFbnRpdHlEYXRhU2VydmljZSB9ICAgICAgICAgICAgICBmcm9tICcuL2RhdGEuc2VydmljZSdcblxuaW1wb3J0ICogYXMgYXR0cmlidXRlQnVpbGRlcnMgZnJvbSAnLi9hdHRyaWJ1dGUtYnVpbGRlcnMvaW5kZXgnXG5pbXBvcnQgKiBhcyBzZWxlY3RvcnMgICAgICAgICBmcm9tICcuL3NlbGVjdG9ycy9pbmRleCdcblxuZXhwb3J0IGNvbnN0IHNlcnZpY2VzOiBhbnlbXSA9IFtcbiAgRGF0YVNlcnZpY2UsXG4gIEVudGl0eUNsb25lcixcbiAgRW50aXR5RWZmZWN0cyxcbiAgRW50aXR5RmFjdG9yeSxcbiAgRW50aXR5UmVsYXRpb25zaGlwUHJvdmlkZXIsXG4gIEVudGl0eVNlcnZpY2UsXG4gIEVudGl0eVR5cGVQcm92aWRlclNlcnZpY2UsXG4gIFJlc291cmNlSWRlbnRpZmllclNlcnZpY2UsXG4gIFJvdXRlRW50aXR5VHlwZVByb3ZpZGVyLFxuICBFbnRpdHlEYXRhU2VydmljZSxcbiAgLi4uYXR0cmlidXRlQnVpbGRlcnMuc2VydmljZXMsXG4gIC4uLnNlbGVjdG9ycy5zZXJ2aWNlcyxcbl1cblxuZXhwb3J0IHsgRGF0YVNlcnZpY2UgfVxuZXhwb3J0IHsgRW50aXR5Q2xvbmVyIH1cbmV4cG9ydCB7IEVudGl0eURhdGFTZXJ2aWNlIH1cbmV4cG9ydCB7IEVudGl0eUVmZmVjdHMgfVxuZXhwb3J0IHsgRW50aXR5RmFjdG9yeSB9XG5leHBvcnQgeyBFbnRpdHlTZXJ2aWNlIH1cbmV4cG9ydCB7IEVudGl0eVJlbGF0aW9uc2hpcFByb3ZpZGVyIH1cbmV4cG9ydCB7IEVudGl0eVR5cGVQcm92aWRlclNlcnZpY2UgfVxuZXhwb3J0IHsgUmVzb3VyY2VJZGVudGlmaWVyU2VydmljZSB9XG5leHBvcnQgeyBSb3V0ZUVudGl0eVR5cGVQcm92aWRlciB9XG5cbmV4cG9ydCB7XG4gIEVudGl0eUF0dHJpYnV0ZUJ1aWxkZXIsXG4gIEpzb25BcGlFbnRpdHlBdHRyaWJ1dGVCdWlsZGVyLFxufSBmcm9tICcuL2F0dHJpYnV0ZS1idWlsZGVycy9pbmRleCdcblxuZXhwb3J0IHtcbiAgRW50aXR5U2VsZWN0b3JOYW1lU2VydmljZSxcbiAgRW50aXR5U2VsZWN0b3JTZXJ2aWNlLFxuICBFbnRpdHlTZWxlY3RvclByb3ZpZGVyLFxufSBmcm9tICcuL3NlbGVjdG9ycy9pbmRleCdcbiJdfQ==