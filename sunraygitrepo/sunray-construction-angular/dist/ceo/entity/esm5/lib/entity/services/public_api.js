/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DataService } from './data.service';
import { EntityCloner } from './entity-cloner.service';
import { EntityEffects } from './entity.effects';
import { EntityFactory } from './entity-factory.service';
import { EntityService } from './entity.service';
import { EntityRelationshipProvider } from './entity-relationship-provider.service';
import { EntityTypeProviderService } from './entity-type-provider.service';
import { ResourceIdentifierService } from './resource-identifier.service';
import { RouteEntityTypeProvider } from './route-entity-type-provider.service';
import { DataService as EntityDataService } from './data.service';
import * as attributeBuilders from './attribute-builders/index';
import * as selectors from './selectors/index';
/** @type {?} */
export var entityServices = tslib_1.__spread([
    DataService,
    EntityCloner,
    EntityEffects,
    EntityFactory,
    EntityRelationshipProvider,
    EntityService,
    EntityTypeProviderService,
    ResourceIdentifierService,
    RouteEntityTypeProvider,
    EntityDataService
], attributeBuilders.services, selectors.services);
export { DataService };
export { EntityCloner };
export { EntityDataService };
export { EntityEffects };
export { EntityFactory };
export { EntityService };
export { EntityRelationshipProvider };
export { EntityTypeProviderService };
export { ResourceIdentifierService };
export { RouteEntityTypeProvider };
export { EntityAttributeBuilder, JsonApiEntityAttributeBuilder, } from './attribute-builders/index';
export { EntitySelectorNameService, EntitySelectorService, EntitySelectorProvider, } from './selectors/index';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2FwaS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjZW8vZW50aXR5LyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9zZXJ2aWNlcy9wdWJsaWNfYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUF1QixnQkFBZ0IsQ0FBQTtBQUM3RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQXNCLHlCQUF5QixDQUFBO0FBQ3RFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBcUIsa0JBQWtCLENBQUE7QUFDL0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFxQiwwQkFBMEIsQ0FBQTtBQUN2RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQXFCLGtCQUFrQixDQUFBO0FBQy9ELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFRLHdDQUF3QyxDQUFBO0FBQ3JGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFTLGdDQUFnQyxDQUFBO0FBQzdFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFTLCtCQUErQixDQUFBO0FBQzVFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFXLHNDQUFzQyxDQUFBO0FBQ25GLE9BQU8sRUFBRSxXQUFXLElBQUksaUJBQWlCLEVBQUUsTUFBbUIsZ0JBQWdCLENBQUE7QUFFOUUsT0FBTyxLQUFLLGlCQUFpQixNQUFNLDRCQUE0QixDQUFBO0FBQy9ELE9BQU8sS0FBSyxTQUFTLE1BQWMsbUJBQW1CLENBQUE7O0FBRXRELE1BQU0sS0FBTyxjQUFjO0lBQ3pCLFdBQVc7SUFDWCxZQUFZO0lBQ1osYUFBYTtJQUNiLGFBQWE7SUFDYiwwQkFBMEI7SUFDMUIsYUFBYTtJQUNiLHlCQUF5QjtJQUN6Qix5QkFBeUI7SUFDekIsdUJBQXVCO0lBQ3ZCLGlCQUFpQjtHQUNkLGlCQUFpQixDQUFDLFFBQVEsRUFDMUIsU0FBUyxDQUFDLFFBQVEsQ0FDdEI7QUFFRCxPQUFPLEVBQUUsV0FBVyxFQUFFLENBQUE7QUFDdEIsT0FBTyxFQUFFLFlBQVksRUFBRSxDQUFBO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxDQUFBO0FBQzVCLE9BQU8sRUFBRSxhQUFhLEVBQUUsQ0FBQTtBQUN4QixPQUFPLEVBQUUsYUFBYSxFQUFFLENBQUE7QUFDeEIsT0FBTyxFQUFFLGFBQWEsRUFBRSxDQUFBO0FBQ3hCLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxDQUFBO0FBQ3JDLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxDQUFBO0FBQ3BDLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxDQUFBO0FBQ3BDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxDQUFBO0FBRWxDLE9BQU8sRUFDTCxzQkFBc0IsRUFDdEIsNkJBQTZCLEdBQzlCLE1BQU0sNEJBQTRCLENBQUE7QUFFbkMsT0FBTyxFQUNMLHlCQUF5QixFQUN6QixxQkFBcUIsRUFDckIsc0JBQXNCLEdBQ3ZCLE1BQU0sbUJBQW1CLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhU2VydmljZSB9ICAgICAgICAgICAgICAgICAgZnJvbSAnLi9kYXRhLnNlcnZpY2UnXG5pbXBvcnQgeyBFbnRpdHlDbG9uZXIgfSAgICAgICAgICAgICAgICAgZnJvbSAnLi9lbnRpdHktY2xvbmVyLnNlcnZpY2UnXG5pbXBvcnQgeyBFbnRpdHlFZmZlY3RzIH0gICAgICAgICAgICAgICAgZnJvbSAnLi9lbnRpdHkuZWZmZWN0cydcbmltcG9ydCB7IEVudGl0eUZhY3RvcnkgfSAgICAgICAgICAgICAgICBmcm9tICcuL2VudGl0eS1mYWN0b3J5LnNlcnZpY2UnXG5pbXBvcnQgeyBFbnRpdHlTZXJ2aWNlIH0gICAgICAgICAgICAgICAgZnJvbSAnLi9lbnRpdHkuc2VydmljZSdcbmltcG9ydCB7IEVudGl0eVJlbGF0aW9uc2hpcFByb3ZpZGVyIH0gICBmcm9tICcuL2VudGl0eS1yZWxhdGlvbnNoaXAtcHJvdmlkZXIuc2VydmljZSdcbmltcG9ydCB7IEVudGl0eVR5cGVQcm92aWRlclNlcnZpY2UgfSAgICBmcm9tICcuL2VudGl0eS10eXBlLXByb3ZpZGVyLnNlcnZpY2UnXG5pbXBvcnQgeyBSZXNvdXJjZUlkZW50aWZpZXJTZXJ2aWNlIH0gICAgZnJvbSAnLi9yZXNvdXJjZS1pZGVudGlmaWVyLnNlcnZpY2UnXG5pbXBvcnQgeyBSb3V0ZUVudGl0eVR5cGVQcm92aWRlciB9ICAgICAgZnJvbSAnLi9yb3V0ZS1lbnRpdHktdHlwZS1wcm92aWRlci5zZXJ2aWNlJ1xuaW1wb3J0IHsgRGF0YVNlcnZpY2UgYXMgRW50aXR5RGF0YVNlcnZpY2UgfSAgICAgICAgICAgICAgZnJvbSAnLi9kYXRhLnNlcnZpY2UnXG5cbmltcG9ydCAqIGFzIGF0dHJpYnV0ZUJ1aWxkZXJzIGZyb20gJy4vYXR0cmlidXRlLWJ1aWxkZXJzL2luZGV4J1xuaW1wb3J0ICogYXMgc2VsZWN0b3JzICAgICAgICAgZnJvbSAnLi9zZWxlY3RvcnMvaW5kZXgnXG5cbmV4cG9ydCBjb25zdCBlbnRpdHlTZXJ2aWNlczogYW55W10gPSBbXG4gIERhdGFTZXJ2aWNlLFxuICBFbnRpdHlDbG9uZXIsXG4gIEVudGl0eUVmZmVjdHMsXG4gIEVudGl0eUZhY3RvcnksXG4gIEVudGl0eVJlbGF0aW9uc2hpcFByb3ZpZGVyLFxuICBFbnRpdHlTZXJ2aWNlLFxuICBFbnRpdHlUeXBlUHJvdmlkZXJTZXJ2aWNlLFxuICBSZXNvdXJjZUlkZW50aWZpZXJTZXJ2aWNlLFxuICBSb3V0ZUVudGl0eVR5cGVQcm92aWRlcixcbiAgRW50aXR5RGF0YVNlcnZpY2UsXG4gIC4uLmF0dHJpYnV0ZUJ1aWxkZXJzLnNlcnZpY2VzLFxuICAuLi5zZWxlY3RvcnMuc2VydmljZXMsXG5dXG5cbmV4cG9ydCB7IERhdGFTZXJ2aWNlIH1cbmV4cG9ydCB7IEVudGl0eUNsb25lciB9XG5leHBvcnQgeyBFbnRpdHlEYXRhU2VydmljZSB9XG5leHBvcnQgeyBFbnRpdHlFZmZlY3RzIH1cbmV4cG9ydCB7IEVudGl0eUZhY3RvcnkgfVxuZXhwb3J0IHsgRW50aXR5U2VydmljZSB9XG5leHBvcnQgeyBFbnRpdHlSZWxhdGlvbnNoaXBQcm92aWRlciB9XG5leHBvcnQgeyBFbnRpdHlUeXBlUHJvdmlkZXJTZXJ2aWNlIH1cbmV4cG9ydCB7IFJlc291cmNlSWRlbnRpZmllclNlcnZpY2UgfVxuZXhwb3J0IHsgUm91dGVFbnRpdHlUeXBlUHJvdmlkZXIgfVxuXG5leHBvcnQge1xuICBFbnRpdHlBdHRyaWJ1dGVCdWlsZGVyLFxuICBKc29uQXBpRW50aXR5QXR0cmlidXRlQnVpbGRlcixcbn0gZnJvbSAnLi9hdHRyaWJ1dGUtYnVpbGRlcnMvaW5kZXgnXG5cbmV4cG9ydCB7XG4gIEVudGl0eVNlbGVjdG9yTmFtZVNlcnZpY2UsXG4gIEVudGl0eVNlbGVjdG9yU2VydmljZSxcbiAgRW50aXR5U2VsZWN0b3JQcm92aWRlcixcbn0gZnJvbSAnLi9zZWxlY3RvcnMvaW5kZXgnXG4iXX0=