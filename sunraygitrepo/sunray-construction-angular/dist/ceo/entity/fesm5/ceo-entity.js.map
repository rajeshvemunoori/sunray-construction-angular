{"version":3,"file":"ceo-entity.js.map","sources":["ng://@ceo/entity/lib/entity/classes/entity/entity.actions.ts","ng://@ceo/entity/lib/entity/classes/entity/entity.action-classes.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-scope-selectors.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-entity-type-selectors.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/action-type.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/add-many.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/add-one.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/remove-many.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/remove-one.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/set-scope-ids.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/update-many.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/update-one.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/reducer.ts","ng://@ceo/entity/lib/entity/classes/entity/entity.collection.ts","ng://@ceo/entity/lib/entity/classes/entity/entity.adapter.ts","ng://@ceo/entity/lib/entity/classes/entity/entity-adapter.factory.ts","ng://@ceo/entity/lib/entity/classes/entity/entity-type.factory.ts","ng://@ceo/entity/lib/entity/classes/entity/entity.config.ts","ng://@ceo/entity/lib/entity/classes/entity/entity.effects-config.ts","ng://@ceo/entity/lib/entity/classes/entity/entities/json-api.entity.ts","ng://@ceo/entity/lib/entity/classes/entity/entities/resource-association.entity.ts","ng://@ceo/entity/lib/entity/classes/entity/entities/resource-attribute.entity.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-relationship-properties.ts","ng://@ceo/entity/lib/entity/classes/entity/entities/resource-configuration.entity.ts","ng://@ceo/entity/lib/entity/classes/entity/entities/resource-validator.entity.ts","ng://@ceo/entity/lib/entity/classes/feature/feature.config.ts","ng://@ceo/entity/lib/entity/interfaces/entity/entity.ts","ng://@ceo/entity/lib/entity/interfaces/selectors/selector-types.ts","ng://@ceo/entity/lib/entity/services/entity-cloner.service.ts","ng://@ceo/entity/lib/entity/services/selectors/selector-name.service.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-entity-selectors.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-slice-selector.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-entity-type-slice-selector.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-root-selector.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-feature-selector.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-filter-selector.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-find-selector.ts","ng://@ceo/entity/lib/entity/state/feature/selectors.ts","ng://@ceo/entity/lib/entity/services/selectors/selector.service.ts","ng://@ceo/entity/lib/entity/services/selectors/selector-provider.service.ts","ng://@ceo/entity/lib/entity/services/selectors/index.ts","ng://@ceo/entity/lib/entity/services/entity-relationship-provider.service.ts","ng://@ceo/entity/lib/entity/services/entity-type-provider.service.ts","ng://@ceo/entity/lib/entity/services/entity-factory.service.ts","ng://@ceo/entity/lib/entity/services/data.service.ts","ng://@ceo/entity/lib/entity/services/attribute-builders/attribute-builder.service.ts","ng://@ceo/entity/lib/entity/services/attribute-builders/json-api-attribute-builder.service.ts","ng://@ceo/entity/lib/entity/services/attribute-builders/index.ts","ng://@ceo/entity/lib/entity/services/entity.service.ts","ng://@ceo/entity/lib/entity/state/config/actions.ts","ng://@ceo/entity/lib/entity/state/config/effects.ts","ng://@ceo/entity/lib/entity/state/config/initial-state.ts","ng://@ceo/entity/lib/entity/state/config/reducer.ts","ng://@ceo/entity/lib/entity/state/config/selectors.ts","ng://@ceo/entity/lib/entity/state/feature/actions/action-types.ts","ng://@ceo/entity/lib/entity/state/feature/actions/actions.ts","ng://@ceo/entity/lib/entity/services/route-entity-type-provider.service.ts","ng://@ceo/entity/lib/entity/services/resource-identifier.service.ts","ng://@ceo/entity/lib/entity/state/feature/effects.ts","ng://@ceo/entity/lib/entity/state/feature/initial-state.ts","ng://@ceo/entity/lib/entity/state/feature/reducer.ts","ng://@ceo/entity/lib/entity/state/state.ts","ng://@ceo/entity/lib/entity/util/tokens.ts","ng://@ceo/entity/lib/entity/services/entity.effects.ts","ng://@ceo/entity/lib/entity/services/public_api.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-effects.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-configs.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-initial-state.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-service.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-type-provider.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-types.ts","ng://@ceo/entity/lib/entity/util/builders/feature/build-feature-config.ts","ng://@ceo/entity/lib/entity/util/builders/feature/build-initial-state.ts","ng://@ceo/entity/lib/entity/util/builders/feature/build-reducer.ts","ng://@ceo/entity/lib/entity/util/providers.ts","ng://@ceo/entity/lib/entity/entity.module.ts","ng://@ceo/entity/lib/forms/classes/entity-form-manager.ts","ng://@ceo/entity/lib/forms/entities/form.entity.ts","ng://@ceo/entity/lib/forms/entities/form-field.entity.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/dropdown-options-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/resource-list.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/dropdown-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/form-control-data-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/form-control-validator-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/form-group-data-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/form-item-data-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/relationships/data-factory-resolver.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/relationships/data-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/relationships/relationship-provider.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/relationships/relationships-provider.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/form-fields/form-member-factory-params.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/form-factory.service.ts","ng://@ceo/entity/lib/forms/services/entity-form-factory.service.ts","ng://@ceo/entity/lib/forms/services/entity-form-manager-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/services.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/form-fields/services.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/relationships/services.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/services.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/services.ts","ng://@ceo/entity/lib/forms/services/services.ts","ng://@ceo/entity/lib/forms/forms.module.ts"],"sourcesContent":["import { sliceActions } from '@ceo/state'\n\nexport const actions = {\n  ...sliceActions,\n  ADD: 'ADD',\n  ADD_OPTIMISTICALLY: 'ADD_OPTIMISTICALLY',\n  ADD_SUCCESS: 'ADD_SUCCESS',\n  ADD_TEMP: 'ADD_TEMP', // Use for adding to a blank to the store so users can fill in before submitting to server\n  ADD_UPDATE_FAIL: 'ADD_UPDATE_FAIL',\n  UPDATE_SUCCESS: 'UPDATE_SUCCESS',\n  DELETE: 'DELETE',\n  DELETE_FAIL: 'DELETE_FAIL',\n  DELETE_SUCCESS: 'DELETE_SUCCESS',\n  DELETE_TEMP: 'DELETE_TEMP',\n  ASYNC: 'ASYNC',\n  ASYNC_FAIL: 'ASYNC_FAIL',\n  ASYNC_SUCCESS: 'ASYNC_SUCCESS',\n  ASYNC_DATA_READY: 'ASYNC_DATA_READY',\n  PATCH: 'PATCH',\n  PATCH_EACH: 'PATCH_EACH',\n  PATCH_FAIL: 'PATCH_FAIL',\n  PATCH_SUCCESS: 'PATCH_SUCCESS',\n  RESTORE_TEMP: 'RESTORE_TEMP',\n  SELECT: 'SELECT',\n  SELECT_NEXT: 'SELECT_NEXT',\n  UNLOAD: 'UNLOAD',\n  ADD_STORE_ENTITIES: \"ADD_STORE_ENTITIES\",\n  SET_SELECTED: \"SET_SELECTED\",\n  LOAD_SEED_DATA: 'LOAD_SEED_DATA',\n  SET_PRIMARY_ENTITY: 'SET_PRIMARY_ENTITY',\n  SET_SCOPE_ENTITIES: 'SET_SCOPE_ENTITIES',\n};\n","import { Action } from '@ngrx/store'\n\nimport {\n  PayloadAction,\n  SliceAction,\n  typeFor,\n} from '@ceo/state'\n\nimport {\n  iApiResponse,\n  iEntity,\n} from '../../interfaces/index'\n\nimport { actions } from './entity.actions'\n\nexport const TEMP = 'TEMP_ID_VALUE'\n\nexport class EntityAction<T extends iEntity>\n  extends SliceAction implements PayloadAction {\n\n  constructor(public slice: any, public payload: T) {\n    super(slice, payload)\n  }\n}\n\nexport class Init<T extends iEntity>\n  extends SliceAction implements PayloadAction {\n\n  protected actionName: string = actions.INIT\n}\n\n// Action to add a new entity on the server.\nexport class Add<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ADD\n\n  constructor(public slice: any, public payload: any = {}) {\n    super(slice, Object.assign({}, { dirty: true }, payload))\n  }\n\n  // If the payload contains the temp ID value, that means\n  // we want the server to assign and ID value, so drop the ID field\n  payloadForPost() {\n    const newPayload = Object.assign({}, this.payload)\n    if (this.payload.id === TEMP) {\n      delete newPayload.id\n      delete newPayload.dirty\n    }\n\n    return newPayload\n  }\n}\n\n// Action to send array of entities to the store.\nexport class AddStoreEntities<T extends iEntity>\n  extends SliceAction {\n\n  protected actionName: string = actions.ADD_STORE_ENTITIES\n\n  constructor(public slice: string, public payload: T[]) {\n    super(slice, payload)\n  }\n}\n\n// Action to load data from the server\nexport class Load<T extends iEntity>\n  extends SliceAction implements PayloadAction {\n\n  protected actionName: string = actions.LOAD\n\n  constructor(public slice: string, public payload: any = null) {\n    super(slice, payload)\n  }\n}\n\n// Action to capture successful response from the server.\nexport class AsyncSuccess<T extends iEntity>\n  extends SliceAction {\n\n  protected actionName: string = actions.ASYNC_SUCCESS\n\n  constructor(public slice: string, public payload: iApiResponse) {\n    super(slice, payload)\n  }\n}\n\n\nexport class LoadSeedData<T extends iEntity>\n  extends SliceAction implements PayloadAction {\n\n  protected actionName: string = actions.LOAD_SEED_DATA\n\n  constructor(public slice: string, public payload: any = null) {\n    super(slice, payload)\n  }\n}\n\n///////////////////////////////////////\n///////////////////////////////////////\n// Not being used at this time: ///////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n\nexport class Initialized<T extends iEntity>\n  extends SliceAction implements PayloadAction {\n\n  protected actionName: string = actions.INITIALIZED\n}\n\nexport class Patch<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.PATCH\n}\n\n/**\n * Create a temporary entity to go into the store but not to the server or be\n * validated. If the id of the payload is missing or null\n * then use the TEMP value. Otherwise use the payload.id value\n*/\nexport class AddTemp<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ADD_TEMP\n\n  constructor(public slice: any, payload: any = {}) {\n    super(slice, Object.assign({}, payload, (payload.id ? {} : { id: TEMP })))\n  }\n}\n\n/**\n* Use this action to first put in the store and then\n* submit to the server\n*/\nexport class AddOptimistically<T extends iEntity> extends Add<T> {\n  protected actionName: string = actions.ADD_OPTIMISTICALLY\n\n  constructor(public slice: any, payload: any = {}) {\n    super(slice, Object.assign({}, { id: TEMP }, payload))\n  }\n}\n\nexport class AddSuccess<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ADD_SUCCESS\n}\n\nexport class AddUpdateFail<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ADD_UPDATE_FAIL\n\n  constructor(public slice: any, payload: any = {}) {\n    super(slice, Object.assign({}, payload, (payload.id ? {} : { id: TEMP })))\n  }\n}\n\nexport class Delete<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.DELETE\n\n  constructor(public slice: string, public payload: any = null) {\n    super(slice, payload)\n  }\n}\n\nexport class DeleteFail<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.DELETE_FAIL\n}\n\nexport class DeleteSuccess<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.DELETE_SUCCESS\n}\n\nexport class LoadFail<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.LOAD_FAIL\n}\n\nexport class Async<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ASYNC\n}\n\nexport class AsyncFail<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ASYNC_FAIL\n}\n\nexport class AsyncDataReady<T extends iEntity> extends SliceAction {\n  protected actionName: string = actions.ASYNC_DATA_READY\n\n  constructor(public slice: string, public payload: T[]) {\n    super(slice, payload)\n  }\n}\n\n// this makes Effect loadFromRemote$ work\nexport class LoadSuccess<T extends iEntity> extends AsyncSuccess<T> {\n  protected actionName: string = actions.LOAD_SUCCESS\n}\n\nexport class PatchSuccess<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.PATCH_SUCCESS\n}\n\nexport class PatchFail<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.PATCH_FAIL\n}\n\nexport class Update<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.UPDATE\n}\n\nexport class PatchEach<T extends iEntity> extends SliceAction {\n  protected actionName: string = actions.PATCH_EACH\n}\n\nexport class UpdateSuccess<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.UPDATE_SUCCESS\n}\n\nexport class Select<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.SELECT\n}\n\nexport class SelectNext<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.SELECT_NEXT\n\n  constructor(public slice: any) {\n    super(slice, null)\n  }\n}\n\nexport class Unload<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.UNLOAD\n\n  constructor(public slice: any) {\n    super(slice, null)\n  }\n}\n\nexport class SetSelected<T extends iEntity> extends SliceAction {\n  protected actionName: string = actions.SET_SELECTED\n\n  constructor(public slice: string, public payload: any) {\n    super(slice, payload)\n  }\n}\n\nexport class SetPrimaryEntity<T extends iEntity> extends SliceAction {\n  protected actionName: string = actions.SET_PRIMARY_ENTITY \n  constructor(public slice: string, public payload: any) {\n    super(slice, payload)\n  }\n}\n\nexport class SetScopeEntities<T extends iEntity> extends SliceAction {\n  protected actionName: string = actions.SET_SCOPE_ENTITIES\n  constructor(public slice: string, public payload: any) {\n    super(slice, payload)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  createSelector,\n} from '@ngrx/store'\n\nimport {\n  camelCase,\n} from '@ceo/core'\n\n\nimport {\n  iEntity,\n  iEntityAdapter,\n} from '../../../interfaces/index'\n\nexport const buildScopeSelector = (\n  entityAdapter,\n  selectors,\n  scopeName,\n) => {\n\n  var collectionType = entityAdapter.entityCollectionType\n\n  let selectScopeEntities = (scopes, entities) => {\n    let ids = _.get(scopes, [scopeName, 'ids'], [])\n    let scopeEntities =\n      _.compact(ids.map(function (id) { return entities[id] }))\n    let collection = new collectionType(scopeEntities)\n    return collection\n  }\n\n  let selectorName = `select.scope.${camelCase(scopeName)}`\n  selectors[selectorName] = createSelector(\n    selectors.selectScopes,\n    selectors.selectEntities,\n    selectScopeEntities\n  )\n\n  return selectors\n}\n\n// Get all the Selectors internal to an entity type\nexport const buildScopeSelectors = (entityAdapter, selectors) => {\n  let scopeNames = _.keys(entityAdapter.scopes)\n  let buildSelector =\n    _.partial(buildScopeSelector, entityAdapter)\n\n  return _.reduce(scopeNames, buildSelector, selectors)\n}\n","/*\nngrx selectors\n  selectIds\n  selectEntities\n  selectTotal\n\ncustom selectors \n  selectAll\n  selectSelectedEntity\n  selectScopes\n*/\n\nimport * as _ from 'lodash'\n\nimport {\n  iEntityState,\n  iEntity,\n} from '../../../interfaces/index'\n\nimport {\n  buildScopeSelectors\n} from './build-scope-selectors'\n\nexport const buildEntityTypeSelectors = (\n  entityAdapter,\n) => {\n\n  var collectionType = entityAdapter.entityCollectionType\n\n  var selectors = entityAdapter.ngrxEntityAdapter.getSelectors()\n\n  let defaults = ['selectIds', 'selectEntities', 'selectTotal']\n  let decoratedSelectors = _.pick(selectors, defaults)\n  \n  // Wrap the selectAll selector in order to return an\n  // entity collection object\n  decoratedSelectors.selectAll = (state: any) => {\n    let entities = selectors.selectAll(state) \n    let collection = new collectionType(entities)\n    return collection\n  }\n\n  decoratedSelectors.selectSelectedEntity = (\n    state: iEntityState<iEntity>\n  ): iEntity => {\n\n    return state.entities[state.selectedEntityId]\n  }\n\n  decoratedSelectors.selectScopes = (state) => { return state.scopes }\n\n  buildScopeSelectors(entityAdapter, decoratedSelectors)\n\n  return decoratedSelectors\n\n}\n","import * as _ from 'lodash'\n\nimport { typeFor }      from '@ceo/state'\n\n// get theType\nexport function actionType(featureName, sliceName, actionName) {\n  let fullSliceName = _.join([featureName, sliceName], \".\")\n  return typeFor(fullSliceName, actionName)\n}\n","export function addMany(\n  entities: any,\n  adapter: any,\n  state: any\n) {\n  return adapter.addMany(entities, state)\n}\n","import * as _ from 'lodash'\n\n// addOne\nexport function addOne(\n  entity: any,\n  adapter: any,\n  state: any\n) {\n\n  // Remove the entity if already existing\n  let entityId = entity.id\n  let newEntities = _.omit(state.entities, entityId)\n  let newIds = _.without(state.ids, entityId)\n  state = _.extend(state, {ids: newIds, entities: newEntities})\n\n  return adapter.addOne(entity, state)\n}\n","import * as _ from 'lodash'\n\nimport { EntityAction } from '../../entity.action-classes'\n\nexport function removeMany(\n  action: EntityAction<any>,\n  adapter: any,\n  state: any\n) {\n\n  let payloadIds = _.map(\n    _.flatten([action.payload]),\n    'id'\n  )\n  return adapter.removeMany(payloadIds, state)\n}\n","import { EntityAction } from '../../entity.action-classes'\n\n// removeOne\nexport function removeOne(\n  action: EntityAction<any>,\n  adapter: any,\n  state: any\n) {\n  return adapter.removeOne(action.payload.id, state)\n}\n","import * as _ from 'lodash'\n\nimport { EntityAction } from '../../entity.action-classes'\n\nexport function setScopeIds(\n  action: EntityAction<any>,\n  adapter: any,\n  state: any\n) {\n\n  let entities = action.payload.entities\n  let scopeName = action.payload.scope\n\n\n  let ids = _.map(entities, 'id')\n\n  let stateDelta = {\n    scopes: {\n    }\n  }\n  stateDelta.scopes[scopeName] = {\n    ids: ids\n  }\n\n\n  return Object.assign({}, state, stateDelta)\n}\n","import * as _ from 'lodash'\n\nimport { EntityAction } from '../../entity.action-classes'\n\n// updateMany\nexport function updateMany(\n  action: EntityAction<any>,\n  adapter: any,\n  state: any\n) {\n  let payload = _.flatten([action.payload])\n  let payloadIds = _.map(\n    _.flatten([payload]),\n    'id'\n  )\n  return adapter.upsertMany(payload, state)\n}\n","import { EntityAction } from '../../entity.action-classes'\n\n// updateOne\nexport function updateOne(\n  action: EntityAction<any>,\n  adapter: any,\n  state: any\n) {\n  return adapter.updateOne(action.payload, state)\n}\n","import * as _ from 'lodash'\n\nimport { EntityAction }                 from '../entity.action-classes'\nimport { actions as EntityActionsMap }  from '../entity.actions'\n\nimport {\n  actionType,\n} from './action-type'\n\nimport {\n  addMany, addOne, removeMany, removeOne,\n  setScopeIds, updateMany, updateOne,\n} from './functions/index'\n\nexport function entityReducer(\n  action: EntityAction<any>,\n  featureName: string,\n  sliceName: string,\n  adapter: any,\n  state: any,\n) {\n\n  switch (action.type) {\n    // Handle add store entities\n    case actionType(featureName, sliceName, EntityActionsMap.ADD_STORE_ENTITIES):\n\n      let entityData = action.payload\n      \n      if(_.isArray(entityData) && entityData.length == 1) {\n        // Single item\n        entityData = _.head(entityData)\n      }\n\n      if(_.isArray(entityData)) {\n        return addMany(entityData, adapter, state)\n      }\n      else {\n        return addOne(entityData, adapter, state)\n      }\n    // Handle set selected store entity\n    case actionType(featureName, sliceName, EntityActionsMap.SET_PRIMARY_ENTITY):\n      if (state.selectedEntityId == action.payload.entity.id) {\n        return state\n      }\n      else {\n        let stateDelta = {\n          selectedEntityId: action.payload.entity.id\n        }\n        return Object.assign({}, state, stateDelta)\n      }\n    case actionType(featureName, sliceName, EntityActionsMap.SET_SELECTED):\n      if (state.selectedEntityId == action.payload.entity.id) {\n        return state\n      }\n      else {\n        let stateDelta = {\n          selectedEntityId: action.payload.entity.id\n        }\n        return Object.assign({}, state, stateDelta)\n      }\n    // Handle set selected store entity\n    case actionType(featureName, sliceName, EntityActionsMap.UPDATE_SUCCESS):\n      if(Array.isArray(action.payload)) {\n        return updateMany(action, adapter, state)\n      }\n      else {\n        return updateOne(action, adapter, state)\n      }\n    // Handle delete store entities\n    case actionType(featureName, sliceName, EntityActionsMap.DELETE_SUCCESS):\n      if(Array.isArray(action.payload)) {\n        return removeMany(action, adapter, state)\n      }\n      else {\n        return removeOne(action, adapter, state)\n      }\n    // Handle set scope entities\n    case actionType(featureName, sliceName, EntityActionsMap.SET_SCOPE_ENTITIES):\n      return setScopeIds(action, adapter, state)\n    // Return the state\n    default:\n      return state\n    }\n}\n\n","import * as _ from 'lodash'\n\nimport { Observable } from 'rxjs'\n\nimport {\n  EntityIdentifier,\n  iEntity,\n  iEntityCollection,\n} from '../../interfaces'\n\n\nexport class EntityCollection implements iEntityCollection {\n  public length: number\n\n  constructor(\n    public entities: iEntity[] = []\n  ) {\n    this.length = entities.length\n  }\n\n  none() {\n    return this.buildCollection([])\n  }\n\n  sort(attributes: string[] | string): iEntityCollection {\n    attributes = _.flatten([attributes])\n\n    let entities = _.sortBy(this.entities, attributes)\n    return this.buildCollection(entities)\n  }\n\n  filter(...args): iEntityCollection {\n    // @ts-ignore:\n    let entities = this.entities.filter(...args)\n    return this.buildCollection(entities)\n  }\n\n  invokeFilter(methodName: string, attribute): iEntityCollection {\n    let filterByMethod = (entity) => {\n      if(entity[methodName]) {\n        return entity[methodName](attribute)\n      }\n      else {\n        return false\n      }\n    }\n    //let filterPartial = _.partialRight(filterByMethod, ...args)\n    let entities = _.filter(this.entities, filterByMethod)\n    return this.buildCollection(entities)\n  }\n\n  // TODO: deprecate this method\n  filterByInvoke(methodName: string, attribute): iEntityCollection {\n    return this.invokeFilter(methodName, attribute)\n  }\n\n  filterByAttrs(filters: any): iEntityCollection {\n    let runFilter = (entityCollection, filter, attr) => {\n      return entityCollection.filterByAttr(attr, filter)\n    }\n    let value = _.reduce(filters, runFilter, this)\n    return value\n  }\n\n  find(id: EntityIdentifier): iEntity {\n    let findEntity = (entity) => {\n      var defaults = [\"id\"]\n      var idAttributes =\n        _.get(entity.constructor, 'config.primaryKeys', defaults)\n      let hasId = (attr) => {\n        return entity[attr] == id\n      }\n      return ! _.isNil(_.find(idAttributes, hasId))\n    }\n\n    return _.find(this.entities, findEntity)\n  }\n\n  findByAttr(attr: string, value: any): iEntity {\n    function findEntity(entity) {\n      return entity[attr] == value\n    }\n\n    return _.find(this.entities, findEntity)\n  }\n\n  map(mapFn): any[] {\n    return _.map(this.entities, mapFn)\n  }\n\n  slice(...args): iEntityCollection {\n    let entities = this.entities.slice(...args)\n    return this.buildCollection(entities)\n  }\n\n  where(conditions: any): iEntityCollection {\n    var filterByCondition = (entity, value, key) => {\n      // When the entity does not have the attribute at all\n      if(!_.has(entity, key)) {\n        return false\n      }\n\n      let entityValue = entity[key]\n\n      // Case 1: the attribute in the entity is an array\n      if(entityValue instanceof Array) {\n        return _.includes(\n          _.map(entityValue, _.toString),\n          _.toString(value)\n        )\n      }\n\n      // Case 2: the condition is an array\n      if(value instanceof Array) {\n        return _.includes(\n          _.map(value, _.toString),\n          _.toString(entityValue)\n        )\n      }\n\n      return _.toString(entityValue) == _.toString(value)\n    }\n\n    var filterEntity = (entity) => {\n      return _.every(conditions, _.partial(filterByCondition, entity))\n    }\n\n    let entities = _.filter(this.entities, filterEntity)\n    return this.buildCollection(entities)\n  }\n\n  stringSearch(conditions: any): iEntityCollection {\n    let runFilter = (entityCollection, searchTerm, attr) => {\n      return entityCollection.stringSearchByAttr(attr, searchTerm)\n    }\n    return _.reduce(conditions, runFilter, this)\n  }\n\n  search(conditions: any): iEntityCollection {\n    var filterByCondition = (entity, value, key) => {\n      let entityValue = entity.attributes[key]\n\n      if(value instanceof Array) {\n        return _.includes(value, entityValue)\n      }\n      else {\n        return _.includes(entityValue, value)\n      }\n    }\n\n    var filterEntity = (entity) => {\n      return _.every(conditions, _.partial(filterByCondition, entity))\n    }\n\n    let entities = _.filter(this.entities, filterEntity)\n    return this.buildCollection(entities)\n  }\n\n  stringSearchByAttr(attr: string, searchTerm: any): iEntityCollection {\n    let attrFilter = (entity) => {\n      if(! searchTerm) {\n        return true\n      }\n\n      let entityValue = entity[attr]\n      let entityWildcardValue = _.lowerCase(entityValue)\n      let searchTermWildcardValue = _.lowerCase(searchTerm)\n      return _.includes(entityWildcardValue, searchTermWildcardValue)\n    }\n    return this.filter(attrFilter)\n  }\n\n  isEmpty(): boolean {\n    return _.isEmpty(this.entities)\n  }\n\n  isNotEmpty(): boolean {\n    return !this.isEmpty()\n  }\n\n  hasEntities(): boolean {\n    return this.isNotEmpty()\n  }\n\n  private filterByAttr(attr: string, filter: any): any {\n    let attrFilter = (entity) => {\n      let value = entity.attributes[attr]\n      return filter(value)\n    }\n    return this.filter(attrFilter)\n  }\n\n  private buildCollection(entities) {\n    let collectionType: any = this.constructor\n    return new collectionType(entities)\n  }\n\n  // Create an iterator for EntityTypeCollection\n  // Allows us to use the collections in angular directives\n  // (i.e. ngFor, etc)\n  [Symbol.iterator]() {\n    let current = 0\n    let entities = this.entities\n    return  {\n      next: function () {\n        let noEntities = _.isEmpty(entities)\n        let value = noEntities ? null : entities[current++]\n        let done = noEntities ? true : current > entities.length\n        return {\n          value: value,\n          done: done\n        }\n      }\n    }\n  }\n}\n","import * as _ from 'lodash'\n\nimport { createEntityAdapter as ngrxCreateEntityAdapter } from '@ngrx/entity'\n\nimport {\n  iEntityState,\n  iEntity,\n  iEntityAdapter,\n} from '../../interfaces/index'\n\nimport { \n  buildEntityTypeSelectors,\n} from '../../util/builders/selectors/build-entity-type-selectors'\n\nimport { entityReducer }         from './reducer/index'\nimport { EntityCollection }      from './entity.collection'\n\n\nexport class EntityAdapter implements iEntityAdapter {\n  featureName: any\n  entityType: any\n  entityConfig: any\n  entityName: any\n  sliceName: any\n\n  private _initialState: any\n  private _ngrxEntityAdapter: any\n  private _selectors: any\n  private _stateInterface: any\n  private _reducer: any\n  private _entityCollectionType: any\n\n  constructor(entityOpts: any) {\n    this.featureName = entityOpts.featureName\n    this.entityType = entityOpts.entityType\n    this.entityConfig = this.entityType.config\n\n    this.entityName = this.entityType.sliceName\n    this.sliceName = this.entityName\n  }\n\n\n  get entityCollectionType() {\n    return EntityCollection\n  }\n\n  get reducer() {\n    return this.getterWithBuilder('_reducer', 'buildReducer')\n  }\n\n  get selectors() {\n    return this.getterWithBuilder('_selectors', 'buildSelectors')\n  }\n\n  get initialState() {\n    return this.getterWithBuilder('_initialState', 'buildInitialState')\n  }\n\n  get ngrxEntityAdapter() {\n    if(! this._ngrxEntityAdapter) {\n      this._ngrxEntityAdapter = this.buildNgrxEntityAdapter()\n    }\n\n    return this._ngrxEntityAdapter\n  }\n\n  get scopes() {\n    let defaultScopes = {}\n    return _.get(this.entityConfig, 'initialState.scopes', defaultScopes)\n  }\n\n  private buildReducer() {\n    var adapter = this.ngrxEntityAdapter\n    var featureName = this.featureEntitySliceName(this.featureName)\n    var sliceName = this.sliceName\n    var initialState = this.initialState\n    var customReducer = this.entityConfig.reducer\n\n    let baseReducer = (state: iEntityState<iEntity> = initialState, action: any) => {\n\n      if(customReducer) {\n        state = customReducer(state, action)\n      }\n\n      state = entityReducer(\n        action, \n        featureName,\n        sliceName,\n        adapter,\n        state,\n      )\n\n      return state\n    }\n\n    return baseReducer\n  }\n  \n  private featureEntitySliceName(featureName) {\n    return _.join([featureName, 'entities'], '.')\n  }\n\n  private buildSelectors() {\n    return buildEntityTypeSelectors(this)\n  } \n\n  private buildInitialState() {\n    let entityTypeInitialState = {\n      selectedEntityId: null,\n    }\n\n    let initialState = _.merge(\n      entityTypeInitialState,\n      this.entityType.initialState\n    )\n\n    return this.ngrxEntityAdapter.getInitialState(initialState)\n  }\n\n  private buildNgrxEntityAdapter() {\n    return ngrxCreateEntityAdapter<any>() \n  }\n\n  private getterWithBuilder(propName, builder) {\n    if(!this[propName]) {\n      this[propName] = this[builder]()\n    }\n\n    return this[propName]\n  }\n\n}\n","import * as _ from 'lodash'\n\nimport { EntityAdapter }      from './entity.adapter'\n\nexport class EntityAdapterFactory {\n  _adapters: any[]\n\n  constructor(\n    private _featureConfig,\n  ) {}\n\n  get featureConfig(): any {\n    return this._featureConfig\n  }\n\n  get adapters(): any[] {\n    if(!this._adapters) {\n      this._adapters = this.buildAdapters()\n    }\n    return this._adapters\n  }\n\n  private buildAdapters() {\n    return _.map(\n      this.featureConfig.entityTypes,\n      _.bind(this.buildAdapter, this)\n    )\n  }\n\n  private buildAdapter(entityType) {\n    let opts = {\n      featureName: this.featureConfig.name,\n      entityType: entityType,\n    }\n    return new EntityAdapter(opts)\n  }\n}\n","import * as _ from 'lodash'\n\nimport { classify } from '@ceo/core'\n\nimport {\n  iFeatureConfig,\n  iEntityConstructor,\n  iEntityTypeMap,\n  iEntity,\n  iEntityConfig,\n  EntityTypeIdentifier,\n} from '../../interfaces/index'\n\nexport class EntityTypeFactory {\n  baseEntityType: iEntityConstructor\n\n  constructor(\n    baseEntityType: iEntityConstructor\n  ) {\n    this.baseEntityType = baseEntityType\n  }\n\n  build(\n    entityConfig: iEntityConfig,\n  ): iEntityTypeMap {\n\n    let entityTypeName = classify(entityConfig.name)\n    let entityType = this.buildEntityType(entityConfig)\n\n    let map = {}\n    let identifier = <EntityTypeIdentifier>entityTypeName\n    map[identifier] = entityType\n    return <iEntityTypeMap>map\n  }\n\n  private buildEntityType(\n    entityConfig: iEntityConfig,\n  ) {\n\n    var entityType\n    if(entityConfig.entityType) {\n      entityType = entityConfig.entityType\n    }\n    else {\n      entityType = this.baseEntityType\n    }\n\n    class Entity extends entityType {\n      static _sliceName: string = entityConfig.name\n      static config: any = entityConfig\n    }\n\n    return Entity\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  iEntityConfig,\n  EntityConfigUrl,\n  EntityConfigUrlFragment,\n  iEntity,\n  iEntityConstructor,\n  iResourceIdentifier,\n} from '../../interfaces/index'\n\nexport class EntityConfig implements iEntityConfig {\n  private _name: string\n  private _entityType: iEntityConstructor\n\n  public type: string\n  public url?: EntityConfigUrlFragment\n  public primaryKeys?: any[] = ['id']\n  public seed: iResourceIdentifier[] = []\n  public apiConfig: any\n  public reducer: any\n  public initialState: any = {}\n\n  public isSeed?: boolean\n\n  public constructor(init?: Partial<EntityConfig>) {\n    Object.assign(this, init)\n  }\n\n  get name(): string {\n    if(! this._name) {\n      this._name = this.type\n    }\n\n    return this._name\n  }\n\n  set name(value: string) {\n    this._name = value\n  }\n\n  getName(): string {\n    return this.type\n  }\n\n  hasResourceType(resourceIdentifier: any = {}): boolean {\n    return this.type == resourceIdentifier.type\n  }\n\n  ofType(entityData: iEntity): boolean {\n    return this.type == entityData.type\n  }\n\n  isCustom() {\n    return _.has(this, \"primaryKeys\")\n  }\n\n  urlFragment(opts = {}): EntityConfigUrlFragment {\n    if(_.isFunction(this.url)) {\n      return this.url(opts)\n    }\n    else {\n      return this.url ? this.url : this.type\n    }\n  }\n\n  get entityType(): iEntityConstructor {\n    return this._entityType\n  }\n\n  set entityType(entityType: iEntityConstructor) {\n    this._entityType = entityType\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  iEntity,\n  iEntityEffectsConfigArgs,\n  iEntityEffectsConfig,\n  iEntityEffectTypes,\n} from '../../interfaces/index'\n\nexport class EntityEffectsConfig implements iEntityEffectsConfig {\n  private sliceName: string\n  private initialEntity: iEntity\n  private effectTypes: iEntityEffectTypes\n  private defaultEffectTypes: iEntityEffectTypes = {\n    init: false,\n    load: true,\n    add: true,\n    patch: true,\n    asyncSuccess: true\n  }\n\n  constructor(\n    public config: iEntityEffectsConfigArgs\n  ) {\n    this.sliceName = config.sliceName\n    this.initialEntity = config.initialEntity\n    this.effectTypes = _.merge(this.defaultEffectTypes, config.effectTypes)\n  }\n\n  public hasEffectType(effectTypeName: string) {\n    return(\n      _.has(this.effectTypes, effectTypeName)  &&\n        this.effectTypes[effectTypeName]\n    )\n  }\n\n  public getConfig(configItem: string) {\n    return this.config[configItem]\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  slugify,\n  camelCase,\n} from '@ceo/core'\n\nimport {\n  Mixin,\n  AttributeGetterSetter,\n  AttributeUpdater,\n  Memoizer,\n} from '@ceo/shared'\n\n\nimport {\n  iDataService,\n  iDataServiceOpts,\n  iEntity,\n  iEntityAttributes,\n  iEntityConfig,\n  iEntityRelationships,\n  EntityData,\n  EntityIdentifier,\n  EntityRelationshipIdentifier,\n  EntityTypeIdentifier,\n  iResourceIdentifier,\n} from '../../../interfaces/index'\n\n// @dynamic\n@Mixin([AttributeGetterSetter, AttributeUpdater, Memoizer])\nexport class JsonApiEntity implements iEntity,\n  AttributeGetterSetter, AttributeUpdater {\n\n  static _sliceName: string = ''\n  static config: any = {}\n  static defaultAttributes: any = {}\n\n  static get sliceName(): string {\n    if(this._sliceName) {\n      return this._sliceName\n    }\n\n    if(this.config) {\n      return this.config.name\n    }\n\n    return this.constructor.name\n  }\n\n  id: EntityIdentifier\n  type: EntityTypeIdentifier\n  attributes: iEntityAttributes = {}\n  relationships: iEntityRelationships\n  defaultAttributes: any = {}\n\n  private _dataService: iDataService\n\n  public constructor(\n    init?: Partial<iEntity>,\n    dataService?: iDataService,\n  ) {\n    Object.assign(this, init)\n    this._dataService = dataService\n    this.setAttributes()\n  }\n\n  setAttributes() {\n    this.attributes =\n      _.defaults(this.attributes, (<any>this.constructor).defaultAttributes)\n    this.updateAttributes(this.attributes)\n  }\n\n  getAttr(attrName: string) {\n    return this.attributes[attrName]\n  }\n\n  setAttr(attrName: string, value: any) {\n    attrName = slugify(attrName)\n    let prop = {}\n    prop[attrName] = value\n    this.updateAttributes(prop)\n  }\n\n  get dataService(): iDataService {\n    return this._dataService\n  }\n\n  set dataService(service: iDataService) {\n    this._dataService = service\n  }\n\n  get isNew(): boolean {\n    return !_.has(this, 'id')\n  }\n\n  nameStartsWith(name: string) {\n    let nameIndex = this.getAttr('name')\n      .toLowerCase()\n      .indexOf(name.toLowerCase())\n    return nameIndex === 0\n  }\n\n  getSliceName() {\n    return this.type\n  }\n\n  relationship(type) {\n    return this[type]\n  }\n\n  relationshipSize(\n    relationshipName: EntityRelationshipIdentifier,\n  ): number {\n    if(!this.hasRelationship(relationshipName)) {\n      return 0\n    }\n\n    let relationshipData = this.relationships[relationshipName].data\n    if(_.isArray(relationshipData)) {\n      return relationshipData.length\n    }\n\n    return 1\n  }\n\n  relationship$(\n    relationshipName: EntityRelationshipIdentifier,\n    opts: iDataServiceOpts = {},\n  ): Observable<EntityData> {\n    return this.dataService.relationship$(this, relationshipName, opts)\n  }\n\n  save$(\n    opts: iDataServiceOpts = {}\n  ): Observable<iEntity> {\n    let saveAction = this.isNew ? 'create$' : 'update$'\n    return this.dataService[saveAction](this.toResourceIdentifier(), opts)\n  }\n\n  private toResourceIdentifier(): any {\n    let ri = _.clone(_.pick(this, 'feature', 'type')) as any\n    ri.data = this.attributes\n    if(!this.isNew) {\n      ri.id = this.id\n    }\n    return ri\n  }\n\n  private hasRelationship(\n    relationshipName: EntityRelationshipIdentifier,\n  ): boolean {\n    return (\n      this.relationships &&\n      this.relationships[relationshipName] && \n      this.relationships[relationshipName].data\n    )\n  }\n\n\n  // Mixin methods\n  updatedKeys: string[] = []\n  updateAttributes(attributes: any): void {}\n  createAttributeSettersAndGetters(): void {}\n  createSettersAndGetters(props: any): void {}\n  createGetSet(obj, props, key: string, name: string): void {}\n  generateGetSet(props, key, name): any {}\n  setProp(props, key, value): void {}\n  getProp(props, key): any {}\n  memoized(property: string, value: any): any {}\n}\n","import { JsonApiEntity } from './json-api.entity'\n\nexport class ResourceAssociationEntity extends JsonApiEntity {\n  isForAttribute(attrName: string) {\n    return (this as any).name == attrName\n  }\n}\n","import { JsonApiEntity } from './json-api.entity'\n\nexport class ResourceAttributeEntity extends JsonApiEntity {\n  isForAttribute(attrName: string) {\n    return (this as any).name == attrName\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  camelCase,\n} from '@ceo/core'\n\nimport {\n  EntityData,\n} from '../../../interfaces/index'\n\nexport function buildEntityRelationshipProperty(\n  relationshipName,\n): (() => Observable<EntityData>) {\n\n  function relationship(): Observable<EntityData> {\n    return this.dataService.relationship$(this, relationshipName, {})\n  }\n\n  return relationship\n}\n\nexport function defineEntityRelationshipGetSet(\n  entityType,\n  relationshipName,\n): void {\n\n  let propName = `${camelCase(relationshipName)}$`\n  let privatePropName = `_${propName}`\n\n  let getter = buildEntityRelationshipProperty(relationshipName)\n\n  console.log(\"building get set for \" + entityType.name + \" : \" + relationshipName)\n\n  let props = {\n    get: function() {\n      return this.memoized(privatePropName, getter)\n    },\n    set: function(value: any) {}\n  }\n\n  Object.defineProperty(entityType.prototype, propName, props)\n}\n\n\nexport function buildEntityRelationshipProperties(\n  entityType,\n): void {\n\n  let defineGetSet = _.partial(defineEntityRelationshipGetSet, entityType)\n  _.map(entityType.relationshipNames, defineGetSet)\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  slugify,\n} from '@ceo/core'\n\nimport {\n  iEntityCollection,\n  iResourceConfigurationEntity,\n} from '../../../interfaces/index'\n\nimport {\n  buildEntityRelationshipProperties,\n  defineEntityRelationshipGetSet,\n} from '../../../util/builders/entity/build-entity-relationship-properties'\n\nimport { JsonApiEntity } from './json-api.entity'\n\nexport class ResourceConfigurationEntity extends JsonApiEntity\n  implements iResourceConfigurationEntity {\n\n  static defaultAttributes: {} = {\n    isRoutable: true\n  }\n\n  static relationshipNames: string[] = [\n    'resource-associations',\n    'resource-attributes',\n    'resource-validators',\n  ]\n\n  resourceAssociations$: any\n}\n\nlet buildEntityRelationship = (name) => {\n  defineEntityRelationshipGetSet(ResourceConfigurationEntity, name)\n}\n_.map(ResourceConfigurationEntity.relationshipNames, buildEntityRelationship)\n\n/*\nResourceConfigurationEntity.prototype.resourceAssociations$ = function() {\n  return this.dataService.relationship$(this, 'resource-associations', {})\n}\n*/\n","import * as _ from 'lodash'\n\nimport { JsonApiEntity } from './json-api.entity'\n\nexport class ResourceValidatorEntity extends JsonApiEntity {\n  isForAttribute(attrName: string) {\n    return _.includes((this as any).attributeNames, attrName)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  iFeatureConfig,\n  iEntityConstructor,\n  iEntityConstructorParams,\n  iEntityTypeMap,\n  iEntity,\n  iEntityConfig,\n  iResourceIdentifier,\n} from '../../interfaces/index'\n\nimport { EntityTypeFactory } from '../entity/entity-type.factory'\n\nexport class FeatureConfig implements iFeatureConfig {\n  name: string\n  entityConfigs: iEntityConfig[]\n  baseEntityType: iEntityConstructor\n  selectors: any\n\n  private _entityTypes: iEntityTypeMap\n  private _sliceNames: string[]\n  private _seedEntities: iEntityConstructor[]\n\n  public constructor(init?: Partial<iFeatureConfig>) {\n    Object.assign(this, init)\n  }\n\n  get sliceNames(): string[] {\n    if(this._sliceNames) {\n      return this._sliceNames\n    }\n\n    this._sliceNames = this.buildSliceNames()\n    return this._sliceNames\n  }\n\n  get seedEntities() {\n   if(! this._seedEntities) {\n     this._seedEntities = this.buildSeeds()\n   }\n\n   return this._seedEntities\n  }\n\n  get entityTypes(): iEntityTypeMap {\n    if(!this._entityTypes) {\n      this._entityTypes = this.buildEntityTypes()\n    }\n\n    return this._entityTypes\n  }\n\n  entityTypeFromEntityData(\n    entityData: iEntityConstructorParams\n  ): iEntityConstructor {\n    let ofType = (entityType) => {\n      return entityType.config.ofType(entityData)\n    }\n\n    return _.find(this.entityTypes, ofType)\n  }\n\n  entityType(theType: string): iEntityConstructor {\n    let hasType = (entityType) => {\n      return entityType.config.type == theType\n    }\n\n    return _.find(this.entityTypes, hasType)\n  }\n\n  ////////////////////////////\n  // Private methods\n  ////////////////////////////\n\n\n  private get entitySliceNames(): string[] {\n    let getName = (entityType) => {\n      return entityType.sliceName\n    }\n    return _.map(this.entityTypes, getName)\n  }\n\n  private buildSliceNames(): string[] {\n    let prefixedSliceName = (sliceName) => {\n      return _.join([this.name, 'entities', sliceName], '.')\n    }\n\n    return _.map(this.entitySliceNames, prefixedSliceName)\n  }\n\n  private buildSeeds() {\n    return _.flatten(\n      _.map(\n        this.entityTypes,\n        _.bind(this.buildEntityTypeSeeds, this)\n      )\n    )\n  }\n\n  private buildEntityTypeSeeds(entityType) {\n    let buildResourceIdentiifer = (\n      ri: iResourceIdentifier\n    ) => {\n      let map = {\n        feature: this.name,\n        type: entityType.config.type\n      }\n      return _.merge(map, ri)\n    }\n\n    return _.map(entityType.config.seed, buildResourceIdentiifer)\n  }\n\n  private buildEntityTypes() {\n    var factory = new EntityTypeFactory(this.baseEntityType)\n    let build = _.bind(factory.build, factory)\n    let entityTypeMaps = _.map(this.entityConfigs, build)\n    return _.assign.apply(_, entityTypeMaps)\n  }\n}\n","import {\n  Observable,\n} from 'rxjs'\n\nimport * as types from '../types'\n\nimport { FeatureIdentifier } from '../feature/feature-identifier'\n\nimport { EntityIdentifier } from './entity-identifier'\n\nexport type EntityAttributeDataType = any;\n\nexport type EntityRelationshipIdentifier = string\n\nexport type EntityRelationshipType = string\nexport const EntityHasOneRelationshipType = \"HasOne\"\nexport const EntityHasManyRelationshipType = \"HasMany\"\nexport type EntityRelationship = EntityHasOneRelationship | EntityHasManyRelationship\n\nexport type EntityHasOneRelationship = iEntityRelationshipMapping\nexport type EntityHasManyRelationship = iEntityRelationshipMapping[]\n\nexport type EntityTypeIdentifier = string;\n\n\nexport type EntityData = iEntity | iEntityCollection\n\nexport interface iEntityAttributes {\n  [key: string]: EntityAttributeDataType;\n}\n\nexport interface iEntityRelationships {\n  [key: string]: any\n}\n\nexport interface iEntityConstructorParams {\n  id?: EntityIdentifier\n  feature?: FeatureIdentifier\n  type: EntityTypeIdentifier\n  attributes: iEntityAttributes\n  relationships?: iEntityRelationships\n  [key: string]: any\n}\n\nexport interface iEntity extends iEntityConstructorParams {\n  sliceName?: string\n  dataService?: any\n\n  save$(opts?: any): Observable<iEntity>\n}\n\nexport interface Entity extends iEntity {}\n\nexport interface iEntityConstructor {\n  new(...args): iEntity\n\n  _sliceName: string\n\n  config: any\n  defaultAttributes: any\n}\n\nexport interface iEntityCollection {\n  length: number;\n  entities: iEntity[];\n\n  slice(any): iEntityCollection;\n  filter(any): iEntityCollection;\n  find(any): iEntity;\n  findByAttr(attr: any, value: any): iEntity;\n  filterByAttrs(any): iEntityCollection;\n  invokeFilter(methodName: string, ...args): iEntityCollection\n  filterByInvoke(methodName: string, ...args): iEntityCollection\n  where(any): iEntityCollection;\n  stringSearch(any): iEntityCollection;\n  search(any): iEntityCollection;\n  stringSearchByAttr(attr: any, term: any): iEntityCollection;\n  map(any): any[]\n  sort(attributes: string[]): iEntityCollection\n  isEmpty(): boolean\n  isNotEmpty(): boolean\n  hasEntities(): boolean\n}\n\n\nexport interface iEntityRelationshipMapping {\n  id: EntityIdentifier,\n  type: EntityTypeIdentifier;\n  [key: string]: any\n}\n\nexport interface iWrappedEntityRelationship {\n  data: EntityRelationship\n}\n\n\nexport interface iEntityMap {\n  EntityTypeIdentifier: iEntity[],\n}\n\nexport interface iEntityTypeMap {\n  EntityTypeIdentifier: iEntityConstructor\n}\n","export const EntitySelectorTypes: any = {\n  All: 'All' as 'All',\n  Ids: 'Ids' as 'Ids',\n  Entities: 'Entities' as 'Entities',\n  Total: 'Total' as 'Total',\n  SelectedEntity: 'SelectedEntity' as 'SelectedEntity',\n  Config: 'Config' as 'Config',\n  Scope: 'Scope' as 'Scope',\n}\n\nexport interface iEntitySelectorTypes {\n  All: string\n  Ids: string\n  Entities: string\n  Total: string\n  SelectedEntity: string\n  Config: string\n  Scope: string\n}\n\nexport type EntitySelectorTypeKeys = keyof iEntitySelectorTypes\n","import * as _ from 'lodash'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iDataService,\n  iEntity,\n  iEntityConstructorParams,\n} from '../interfaces/index'\n\n@Injectable()\nexport class EntityCloner {\n  clone(\n    entity: iEntity,\n    dataService: iDataService = null,\n  ): iEntity {\n    let entityCtor : any = entity.constructor\n    return new entityCtor(this.constructorParams(entity), dataService)\n  }\n\n  private constructorParams(\n    entity: iEntity,\n  ): iEntityConstructorParams {\n\n    let paramNames = [\n      'id',\n      'feature',\n      'type',\n      'attributes',\n      'relationships',\n    ]\n    return <iEntityConstructorParams>_.pick(entity, paramNames)\n\n  }\n}\n","import * as _ from 'lodash'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  InflectionService,\n}   from '@ceo/core'\n\nimport {\n  iEntitySelectorIdentifier,\n} from '../../interfaces/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SelectorNameService {\n  constructor(\n    private inflectionService: InflectionService,\n  ) {}\n\n  getFeatureSelectorName(featureConfig) {\n    return featureConfig.name\n  }\n\n  getEntitySelectorName(entityAdapter) {\n    return entityAdapter.sliceName\n  }\n\n  getNestedSelectorName(parentName, selectorName) {\n    let parentSegments = this.buildSegments(parentName)\n    let selectorNameSegments = this.buildSegments(selectorName, 'select')\n    let segments = _.flatten([parentSegments, selectorNameSegments])\n\n    return _.join(segments, '.')\n  }\n\n  getResourceSelectorName(si: iEntitySelectorIdentifier) {\n    return this.selectorIdentifierToSelectorName(si)\n  }\n\n  // Alias for getResourceSelectorName\n  getSelectorName(si: iEntitySelectorIdentifier) {\n    return this.getResourceSelectorName(si)\n  }\n\n  private buildSegments(value: string, prefix: string = ''): string[] {\n    let camelCase = _.bind(this.inflectionService.camelCase, this)\n\n    let inflections = \n      [\n        ['removePrefix', prefix],\n        ['replace', / /g, ''],\n        ['trim', '.'],\n        ['split', '.'],\n      ]\n\n    let result = (<any>this.inflectionService).inflect(value, inflections)\n\n    return _.map(result, camelCase)\n  }\n\n  private sanitizedSelectorName(selectorName: string): string[] {\n    let prefix = 'select'\n\n    selectorName = this.inflectionService.removePrefix(selectorName, prefix)\n\n    let camelCase = (value) => {\n      return this.inflectionService.camelCase(value)\n    }\n\n    let segments = _.map(_.split(selectorName, '.'), camelCase)\n    return segments\n  }\n\n  private selectorIdentifierToSelectorName(si: iEntitySelectorIdentifier) {\n    let featureName =\n      this.inflectionService.camelCase(si.feature)\n\n    let featureEntities = 'entities'\n\n    let sliceName =\n      this.inflectionService.camelCase(si.entityType)\n\n    let selectorType =\n      this.inflectionService.camelCase(si.selectorType)\n\n    let segments = [\n      featureName,\n      featureEntities,\n      sliceName,\n      selectorType,\n    ]\n\n    if(_.has(si, 'scope')) {\n      let scopeName =\n        this.inflectionService.camelCase(si.scope)\n\n      segments.push(scopeName)\n    }\n\n    return _.join(segments, '.')\n  }\n}\n","// Get all the Selectors internal to an entity type\n\nimport * as _ from 'lodash'\n\nimport {\n  createSelector,\n} from '@ngrx/store'\n\nexport const buildEntitySelectors = (\n  entityAdapter,\n  entityTypeSelector,\n  selectorNameService,\n) => {\n\n  let buildEntityScopedSelector = (selector, selectorName) => {\n    let entitySelectorName =\n      selectorNameService.getEntitySelectorName(entityAdapter) \n\n    let entityScopedSelectorName =\n      selectorNameService.getNestedSelectorName(entitySelectorName, selectorName)\n\n    let featureLevelSelector = createSelector(entityTypeSelector, selector)\n\n    let selectors = {}\n    selectors[entityScopedSelectorName] = featureLevelSelector\n\n    return selectors\n  }\n\n  return _.reduce(\n    _.map(entityAdapter.selectors, buildEntityScopedSelector),\n    _.merge,\n    {},\n  )\n}\n","import {\n  iEntityState,\n} from '../../../interfaces/index'\n\nexport const buildSliceSelector = (sliceName) => {\n  return (state: iEntityState<any>) => {\n    return state[sliceName]\n  }\n}\n","import {\n  iEntityState,\n} from '../../../interfaces/index'\n\nimport { buildSliceSelector } from './build-slice-selector'\n\n// Get all the Entity Type data for an entity type.\nexport const buildEntityTypeSliceSelector = (entityAdapter) => {\n  return buildSliceSelector(entityAdapter.sliceName)\n}\n","import * as _ from 'lodash'\n\nimport {\n  compose,\n} from '@ngrx/store'\n\nexport const buildRootSelector = (\n  featureSelector,\n  entitySelector\n) => {\n\n  let rootSelectorName = _.join([featureSelector.name, entitySelector.name], '.')\n  let rootSelector = compose(entitySelector.selector, featureSelector.selector)\n\n  return {\n    name: rootSelectorName,\n    selector: rootSelector,\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  createFeatureSelector,\n  compose,\n} from '@ngrx/store'\n\nimport { buildEntitySelectors }    from './build-entity-selectors'\nimport { buildEntityTypeSliceSelector } from './build-entity-type-slice-selector'\nimport { buildRootSelector }       from './build-root-selector'\nimport { buildSliceSelector }      from './build-slice-selector'\n\nexport const buildFeatureSelector = (\n  featureConfig,\n  entityAdapters,\n  selectorService,\n  selectorNameService,\n  buildCustomSelectors,\n) => {\n\n  // Feature Selector\n  var featureSelectorName = selectorNameService.getFeatureSelectorName(featureConfig)\n  let featureSelectorFunction = createFeatureSelector<any>(featureSelectorName)\n  let featureSelector = {\n    name: featureSelectorName,\n    selector: featureSelectorFunction\n  }\n  selectorService.addSelector(featureSelector)\n\n  // Feature Entities Selector\n  var featureEntitiesSelectorName =\n    selectorNameService.getNestedSelectorName(featureSelectorName, 'entities')\n  let entitiesSelectorFunction = buildSliceSelector('entities')\n  let featureEntitiesSelectorFunction =\n    compose(entitiesSelectorFunction, featureSelector.selector)\n  let featureEntitiesSelector = {\n    name: featureEntitiesSelectorName,\n    selector: featureEntitiesSelectorFunction\n  }\n  selectorService.addSelector(featureEntitiesSelector)\n\n\n  // Feature Config Selector\n  var featureConfigSelectorName =\n    selectorNameService.getNestedSelectorName(featureSelectorName, 'config')\n  let configSelectorFunction = buildSliceSelector('config')\n  let featureConfigSelectorFunction =\n    compose(configSelectorFunction, featureSelector.selector)\n  let featureConfigSelector = {\n    name: featureConfigSelectorName,\n    selector: featureConfigSelectorFunction\n  }\n  selectorService.addSelector(featureConfigSelector)\n\n\n  let addEntity = (entityAdapter) => {\n    var adapter = entityAdapter\n\n    var entityTypeSelector = buildEntityTypeSliceSelector(entityAdapter)\n\n    let entitySelectors =\n      buildEntitySelectors(\n        entityAdapter,\n        entityTypeSelector,\n        selectorNameService\n      )\n\n    let buildRootSelectorForEntity = (selector, selectorName) => {\n      let entitySelector = {\n        name: selectorName,\n        selector: selector\n      }\n\n      return buildRootSelector(\n        featureEntitiesSelector,\n        entitySelector\n      )\n    }\n\n    let rootSelectors = _.map(entitySelectors, buildRootSelectorForEntity)\n\n    let addSelectors = (selector) => {\n      selectorService.addSelector(selector)\n    }\n\n    _.map(rootSelectors, addSelectors)\n  }\n\n  _.map(entityAdapters, addEntity)\n\n  buildCustomSelectors(selectorService)\n}\n\n","import * as _ from 'lodash'\n\nimport { Store, createSelector, MemoizedSelector } from '@ngrx/store'\n\nimport {\n  iEntityState,\n  iEntity,\n} from '../../../interfaces/index'\n\n\nexport const buildFilterSelector = (selector, filter) => {\n\n  let filterState = (state: any) => {\n    if(state && state.where) {\n      return state.where(filter)\n    }\n    else {\n      return state\n    }\n  }\n\n  return createSelector(\n    selector,\n    filterState,\n  )\n}\n","import * as _ from 'lodash'\n\nimport { Store, createSelector, MemoizedSelector } from '@ngrx/store'\n\nimport {\n  iEntityState,\n  iEntity,\n  iResourceIdentifier,\n} from '../../../interfaces/index'\n\nexport const buildFindSelector = (\n  selector,\n  ri: iResourceIdentifier,\n  findPropPath: string = 'id'\n) => {\n\n  let find = (state: any) => {\n    return state.find(_.get(ri, findPropPath))\n  }\n\n  return createSelector(\n    selector,\n    find,\n  )\n}\n","import * as _ from 'lodash'\n\nimport { pipe }   from 'rxjs'\nimport { filter } from 'rxjs/operators'\n\nimport { \n  select,\n  createFeatureSelector,\n  createSelector, MemoizedSelector\n} from '@ngrx/store'\n\nimport {\n  iFeatureMap,\n} from '../../interfaces/index'\n\nimport { iFeatureState } from './state'\n\nexport const selectEntityFeature = createFeatureSelector<any> ('entity')\n\nlet selectFeatures = (state: iFeatureState): iFeatureMap => {\n  return state.features\n}\n\nlet selectPrimaryEntityIdentifier = (state: iFeatureState) => {\n  return _.get(state, 'primaryEntity.resourceIdentifier')\n}\n\nlet selectPrimaryEntity = (state: iFeatureState) => {\n  return _.get(state, 'primaryEntity.entity')\n}\n\nlet selectors = {\n  features: selectFeatures,\n  primaryEntity: selectPrimaryEntity,\n  primaryEntityIdentifier: selectPrimaryEntityIdentifier,\n}\n\nlet buildFeatureSelector = (selector, name) => {\n  return createSelector(\n    selectEntityFeature,\n    selector,\n  )\n}\n\n\nexport const entityFeatureSelectors =\n  _.mapValues(selectors, buildFeatureSelector)\n","import * as _ from 'lodash'\n\nimport { Observable }   from 'rxjs'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store } from '@ngrx/store'\n\nimport { InflectionService }             from '@ceo/core'\n\nimport {\n  iSelectorsMap,\n  iEntitySelectorIdentifier,\n} from '../../interfaces/index'\n\nimport { SelectorNameService } from './selector-name.service'\n\n@Injectable()\nexport class SelectorService {\n  selectors: iSelectorsMap = {}\n\n  constructor(\n    private inflectionService: InflectionService,\n    private store: Store<any>,\n    private selectorNameService: SelectorNameService\n  ) {}\n\n  select$(selectorName): Observable<any> {\n    let selector = this.getSelector(selectorName)\n    return this.store.select(selector)\n  }\n\n  select(selectorName) {\n    return this.select$(selectorName)\n  }\n\n  selectorFromSelectorIdentifier(si: iEntitySelectorIdentifier) {\n    let selectorName =\n      this.selectorNameService.getResourceSelectorName(si)\n\n    return this.getSelector(selectorName)\n  } \n\n  getSelector(selectorName) {\n    let path = this.selectorPath(selectorName)\n    return  _.get(this.selectors, path)\n  }\n\n  addSelector(selector) {\n    let path = this.selectorPath(selector.name)\n    this.log(selector, path, false)\n    return _.set(this.selectors, path, selector.selector)\n  }\n\n  private selectorPath(selectorName: string): string {\n    let pathElements = _.split(selectorName, '.')\n    /*\n    if(pathElements.length > 1) {\n      pathElements.splice(1, 0, 'entities')\n    }\n    */\n    pathElements.push('selector')\n    return _.join(pathElements, '.')\n  }\n\n  private log(selector, path, loggingEnabled = false) {\n    if(loggingEnabled) {\n      console.log(\"Registering the selector \" + path)\n    }\n  }\n}\n","import * as _ from 'lodash'\n\nimport { Observable }   from 'rxjs'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store, createSelector } from '@ngrx/store'\n\nimport { InflectionService } from '@ceo/core'\n\nimport {\n  iCustomSelector,\n  iEntitySelectorIdentifier,\n  iEntitySelectorTypes,\n  iFeature,\n  iFeatureMap,\n  iResourceIdentifier,\n  iDataServiceOpts,\n  EntitySelectorTypes,\n} from '../../interfaces/index'\n\nimport {\n  JsonApiEntity,\n} from '../../classes/index'\n\nimport {\n  buildFilterSelector,\n  buildFindSelector,\n} from '../../util/builders/selectors/index'\n\nimport {\n  entityFeatureSelectors,\n} from '../../state/feature/selectors'\n\n\nimport { SelectorService } from './selector.service'\n\n\n@Injectable()\nexport class SelectorProvider {\n  features$: Observable<iFeatureMap>\n  features: iFeatureMap\n\n  private defaultOpts: any = {\n    selectorType: <keyof iEntitySelectorTypes>EntitySelectorTypes.All\n  }\n\n  constructor(\n    private selectorService: SelectorService,\n    private store: Store<any>,\n  ) {\n    this.subscribeToFeatures()\n  }\n\n  provide(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n    opts = _.defaults(opts, this.defaultOpts)\n\n    let selector = this.customSelector(ri, opts) ||\n      this.defaultSelector(ri, opts)\n\n    return selector\n  }\n\n  private customSelector(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n\n    let feature = this.features[ri.feature]\n\n    if(feature) {\n      let selectorIsValid = (selector): boolean => {\n        return selector.isValid(ri)\n      }\n      let selector = _.find(feature.selectors, selectorIsValid)\n\n      if(selector) {\n        return <any>selector.selector(this.selectorService, ri)\n      }\n      else {\n        return null\n      }\n    }\n\n    return null\n  }\n\n  private defaultSelector(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n\n    if(this.isRelationshipResourceRequest(ri)) {\n      ri = {\n        feature: ri.feature,\n        type: ri.relationship.type\n      }\n    }\n\n    let si = this.selectorIdentifier(ri, opts)\n    let selector = this.getBaseSelector(si)\n\n    if(this.isFindRequest(ri)) {\n      selector = this.findSelector(selector, ri)\n    }\n\n    if(this.isFilteredResourceRequest(ri)) {\n      selector = this.filterSelector(selector, ri)\n    }\n\n    return selector\n  }\n\n  private isRelationshipResourceRequest(\n    ri: iResourceIdentifier,\n  ) {\n    return _.has(ri, 'relationship')\n  }\n\n  private selectorIdentifier(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): iEntitySelectorIdentifier {\n\n    let isScoped = this.isScopedResourceIdentifier(ri)\n    var selectorType = isScoped ? 'scope' : opts.selectorType\n    \n    let si = {\n      feature: ri.feature,\n      entityType: ri.type,\n      selectorType: <keyof iEntitySelectorTypes> selectorType\n    }\n\n    if(isScoped) {\n      si = _.merge(si, {scope: ri.filter.scope})\n    }\n\n    return si\n  }\n\n  private getBaseSelector(\n    selectorIdentifier: iEntitySelectorIdentifier,\n  ) {\n    return this.selectorService\n      .selectorFromSelectorIdentifier(selectorIdentifier)\n  }\n\n  private isFindRequest(\n    ri: iResourceIdentifier,\n  ) {\n    return !_.isEmpty(this.findPropPath(ri))\n  }\n\n  private findPropPath(\n    ri: iResourceIdentifier,\n  ) {\n\n    let primaryKeys = this.getPrimaryKeys(ri)\n\n    // Simple case when primary key is 'id'\n    if(_.has(ri, 'id') && _.includes(primaryKeys, 'id')) {\n      return 'id'\n    }\n\n\n    // Alternate scenario: when the primary key is\n    // mixed in with the filter params\n    let filterKeys = _.keys(this.getFilterParams(ri))\n    let primaryKey = _.head(_.intersection(primaryKeys, filterKeys))\n    if(primaryKey) {\n      return `filter.${primaryKey}`\n    }\n    else {\n      return null\n    }\n  }\n\n  private findSelector(\n    selector: any,\n    ri: iResourceIdentifier,\n  ): any {\n    return buildFindSelector(selector, ri, this.findPropPath(ri))\n  }\n\n  private isFilteredResourceRequest(\n    ri: iResourceIdentifier,\n  ) {\n    return _.has(ri, 'filter')\n  }\n\n  private filterSelector(\n    selector: any,\n    ri: iResourceIdentifier,\n  ) {\n\n    let filter = this.getFilterParams(ri)\n    return buildFilterSelector(selector, filter)\n  }\n\n  private isScopedResourceIdentifier(ri: iResourceIdentifier,) {\n    return _.has(ri, 'filter.scope')\n  }\n\n  private subscribeToFeatures() {\n    this.features$ = \n      <Observable<iFeatureMap>>this.store.select(entityFeatureSelectors.features)\n    this.features$\n      .subscribe(features => this.features = features)\n  }\n\n  private getFeature(ri: iResourceIdentifier) {\n    return this.features[ri.feature]\n  }\n\n  private getFilterParams(ri: iResourceIdentifier) {\n    return _.omit(ri.filter, 'scope')\n  }\n\n  private getPrimaryKeys(ri: iResourceIdentifier): string[] {\n    var primaryKeys = ['id']\n    let feature = this.getFeature(ri)\n    let entityType = feature.entityType(ri.type)\n\n    if(entityType) {\n      primaryKeys = entityType.config.primaryKeys || primaryKeys\n    }\n\n    return primaryKeys\n  }\n}\n","import { SelectorNameService as EntitySelectorNameService }  from './selector-name.service'\nimport { SelectorProvider as EntitySelectorProvider }        from './selector-provider.service'\nimport { SelectorService as EntitySelectorService }          from './selector.service'\n\nexport const services: any[] = [\n  EntitySelectorNameService,\n  EntitySelectorProvider,\n  EntitySelectorService,\n]\n\nexport {\n  EntitySelectorNameService,\n  EntitySelectorProvider,\n  EntitySelectorService,\n}\n","//  Loads and constructs relations for an entity, using the entity's\n//  relationship data.\n\nimport * as _ from 'lodash'\n\nimport { Observable, empty, of } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport { camelCase }        from '@ceo/core'\n\nimport {\n  EntityRelationshipIdentifier,\n  EntityData,\n  EntityIdentifier,\n  EntityRelationship,\n  EntityRelationshipType,\n  EntityHasOneRelationship,\n  EntityHasManyRelationship,\n  EntityHasOneRelationshipType,\n  EntityHasManyRelationshipType,\n  EntityTypeIdentifier,\n  iDataService,\n  iDataServiceOpts,\n  iEntityRelationshipProvider,\n  iEntity,\n  iEntityRelationshipMapping,\n  iEntityCollection,\n} from '../interfaces/index'\n\nimport {\n  EntityCollection,\n} from '../classes/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EntityRelationshipProvider\n  implements iEntityRelationshipProvider {\n\n  private defaultDataServiceOpts: iDataServiceOpts = {\n    syncWithApi: false,\n  }\n\n  provide$(\n    dataService: iDataService,\n    entity: iEntity,\n    relationshipIdentifier: EntityRelationshipIdentifier,\n    opts: iDataServiceOpts = {},\n  ): Observable<EntityData> {\n\n    let relationship = this.relationshipData(entity, relationshipIdentifier)\n\n    if(!relationship) {\n      return of(<EntityData>null)\n    }\n\n    let relationshipType = this.relationshipType(relationship)\n\n    if(!relationshipType) {\n      return of(<EntityData>null)\n    }\n\n    return this.loadRelationshipData$(\n      dataService, entity, relationship, relationshipType, opts\n    )\n  }\n\n  private loadRelationshipData$(\n    dataService: iDataService,\n    entity: iEntity,\n    relationship: EntityRelationship,\n    relationshipType: EntityRelationshipType,\n    opts: iDataServiceOpts = {},\n  ): Observable<EntityData> {\n\n    var resourceType = ''\n    var prepareRelationship\n\n    if(relationshipType == EntityHasOneRelationshipType) {\n      resourceType = (<EntityHasOneRelationship> relationship).type\n      prepareRelationship = this.prepareHasOne\n    }\n\n    if(relationshipType == EntityHasManyRelationshipType) {\n      if(_.isEmpty(relationship)) {\n        resourceType = this.defaultRelationResourceType(entity)\n      }\n      else {\n        let firstRelationship = relationship[0]\n        resourceType = (firstRelationship).type || 'entity'\n      }\n\n      prepareRelationship = this.prepareHasMany\n    }\n\n    return this.loadResourceTypeData$(dataService, entity, resourceType, opts).pipe(\n      map(entities => prepareRelationship(relationship, entities))\n    )\n  }\n\n  private prepareHasMany(\n    relationship: EntityRelationship,\n    entities: iEntityCollection\n  ): iEntityCollection {\n\n    let ids = _.map(relationship, 'id')\n    return entities.where({id: ids})\n  }\n\n  private prepareHasOne(\n    relationship: EntityRelationship,\n    entities: iEntityCollection\n  ): iEntity {\n    return entities.find((<EntityHasOneRelationship> relationship).id)\n  }\n\n  private loadResourceTypeData$(\n    dataService: iDataService,\n    entity: iEntity,\n    resourceType: EntityTypeIdentifier,\n    opts: iDataServiceOpts = {},\n  ): Observable<iEntityCollection> {\n\n    let resourceOpts = {\n      feature: entity.feature,\n      type: resourceType,\n    }\n    return dataService.get$(resourceOpts, this.buildDataServiceOpts(opts))\n  }\n\n  private buildDataServiceOpts(\n    opts: iDataServiceOpts = {},\n  ) {\n    return _.defaults(opts, this.defaultDataServiceOpts)\n  }\n\n  private relationshipData(\n    entity: iEntity,\n    relationshipIdentifier: EntityRelationshipIdentifier\n  ): EntityRelationship {\n    if(entity && entity.relationships){\n      let wrappedData = entity.relationships[relationshipIdentifier]\n      if(wrappedData) {\n        return wrappedData.data\n      }\n      else {\n        return null\n      }\n    }\n    return null\n  }\n\n  private relationshipType(\n    relationship: EntityRelationship\n  ): EntityRelationshipType  | null {\n    if(_.has(relationship, 'id')) {\n      return EntityHasOneRelationshipType\n    }\n    if(relationship instanceof Array) {\n      return EntityHasManyRelationshipType\n    }\n    return null\n  }\n\n  private defaultRelationResourceType(entity: iEntity) {\n    switch(entity.feature) { \n      case 'app': {\n        return 'sunray-entities'\n      }\n      case 'cms': {\n        return 'wordpress-entities'\n      }\n      default: { \n        return 'sunray-entities'\n      }\n    }\n  }\n} \n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  pipe,\n} from 'rxjs'\n\nimport { map } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store }           from '@ngrx/store'\n\nimport {\n  FeatureIdentifier,\n  iEntityConfig,\n  iEntityTypeMap,\n  iEntity,\n  iEntityConstructor,\n  iEntityConstructorParams,\n  iFeatureConfig,\n  iFeatureMap,\n} from '../interfaces/index'\n\nimport {\n  entityFeatureSelectors,\n} from '../state/feature/selectors'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EntityTypeProviderService {\n  private _features$: Observable<iFeatureMap>\n\n  constructor(\n    protected store: Store<any>,\n  ) {}\n\n  provide$(\n    entityData: iEntityConstructorParams,\n  ): Observable<iEntityConstructor> {\n\n    return this.getFeature$(entityData.feature).pipe(\n      map(feature => this.getEntityType(feature, entityData)),\n    )\n  }\n\n  private getEntityType(\n    feature: iFeatureConfig,\n    entityData: iEntityConstructorParams\n  ): iEntityConstructor {\n\n    return this.getCustomEntityType(feature, entityData) ||\n      feature.baseEntityType\n  }\n\n  private getCustomEntityType(\n    feature: iFeatureConfig,\n    entityData: iEntityConstructorParams\n  ): iEntityConstructor {\n\n    return feature.entityTypeFromEntityData(entityData)\n  }\n\n  private getFeature$(\n    featureName: FeatureIdentifier\n  ): Observable<iFeatureConfig> {\n    return this.features$.pipe(\n      map(features => features[featureName] ),\n    )\n  }\n\n\n  // new stuff\n  private get features$(): Observable<iFeatureMap> {\n    if(!this._features$) {\n      this._features$ = this.buildFeatures$()\n    }\n\n    return this._features$\n  }\n\n  private buildFeatures$(): Observable<iFeatureMap> {\n    let features = this.store.select(entityFeatureSelectors.features)\n    return <Observable<iFeatureMap>>features\n  }\n}\n","// Builds Entity instances from raw (usually server-side) data.\n\nimport * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  map,\n} from 'rxjs/operators'\n\nimport { Injectable, Inject } from '@angular/core'\n\nimport {\n  FeatureIdentifier,\n  iEntity,\n  iResourceIdentifier,\n  iEntityConstructorParams,\n  iEntityConstructor,\n} from '../interfaces/index'\n\nimport { EntityTypeProviderService }  from './entity-type-provider.service'\nimport { EntityRelationshipProvider } from './entity-relationship-provider.service'\n\n\n@Injectable()\nexport class EntityFactory {\n  constructor(\n    private entityTypeProvider: EntityTypeProviderService,\n    private relationshipProvider: EntityRelationshipProvider,\n  ) {}\n\n  build$(\n    entityData: iEntityConstructorParams,\n  ): Observable<iEntity> {\n    return this.getEntityType$(entityData).pipe(\n      map(entityType => new entityType(entityData)),\n    )\n  }\n\n  private getEntityType$(\n    entityData: iEntityConstructorParams,\n  ): Observable<iEntityConstructor> {\n    return this.entityTypeProvider.provide$(entityData)\n  }\n}\n","import * as _ from 'lodash'\n\nimport { Observable, of } from 'rxjs'\n\nimport {\n  map,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store, createSelector } from '@ngrx/store'\n\nimport {\n  EntityActions,\n  JsonApiEntity,\n  EntityCollection,\n} from '../classes/index'\n\nimport {\n  EntityRelationshipIdentifier,\n  EntityData,\n  iEntity,\n  iResourceIdentifier,\n  iDataService,\n  iDataServiceOpts,\n  iEntityConstructorParams,\n  iEntitySelectorIdentifier,\n  EntitySelectorTypes,\n  iEntitySelectorTypes,\n} from '../interfaces/index'\n\nimport { EntityCloner }               from './entity-cloner.service'\nimport { EntitySelectorProvider }     from './selectors/index'\nimport { EntityRelationshipProvider } from './entity-relationship-provider.service'\nimport { EntityFactory              } from './entity-factory.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService implements iDataService {\n  private defaultOpts: iDataServiceOpts = {\n    syncWithApi: true,\n    selectorOpts: {\n      selectorType: <keyof iEntitySelectorTypes>EntitySelectorTypes.All\n    }\n  }\n\n  constructor(\n    private store: Store<any>,\n    private selectorProvider: EntitySelectorProvider,\n    private entityRelationshipProvider: EntityRelationshipProvider,\n    private entityCloner: EntityCloner,\n    private entityFactory: EntityFactory,\n  ) { }\n\n  build$(\n    entityData: iEntityConstructorParams,\n  ): Observable<iEntity> {\n    return this.entityFactory.build$(entityData).pipe(\n      map(entity => this.decoratedData(entity) as iEntity)\n    )\n  }\n\n  create$(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n\n    let actionType = EntityActions.Add\n    return this.executeRequest$(ri, opts, actionType)\n  }\n\n  delete$(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n    let actionType = EntityActions.Delete\n    return this.executeRequest$(ri, opts, actionType)\n  }\n\n  get$(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n    let actionType = EntityActions.Load\n    return this.executeRequest$(ri, opts, actionType)\n  }\n\n  update$(ri: any, opts: iDataServiceOpts = {}) {\n    let actionType = EntityActions.Update\n    return this.executeRequest$(ri, opts, actionType)\n  }\n\n  relationship$(\n    entity: iEntity,\n    relationshipIdentifier: EntityRelationshipIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<EntityData> {\n    return this.entityRelationshipProvider.provide$(\n      this,\n      entity,\n      relationshipIdentifier,\n      opts,\n    )\n  }\n\n  // TODO: deprecate this method\n  get(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n    return this.get$(ri, opts)\n  }\n\n  private executeRequest$(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {},\n    actionType: any\n  ): Observable<any> {\n\n    opts = _.defaults(opts, this.defaultOpts)\n\n    if(this.shouldDispatch(ri, opts)) {\n      let sliceName = this.getSliceName(ri)\n      let action = new actionType(sliceName, ri)\n      this.store.dispatch(action)\n    }\n\n    let selector = this.getSelector(ri, opts)\n\n    if(selector) {\n      return this.storeData$(selector, opts).pipe(\n        map(data => this.decoratedData(data)),\n      )\n    }\n    else {\n      return this.noData$()\n    }\n  }\n\n  private storeData$(\n    selector: any,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n\n    return this.store.select(selector)\n  }\n\n  private decoratedData(\n    data: EntityData\n  ): EntityData {\n\n    var buildDecoratedEntity = (entity: iEntity) => {\n      return this.entityCloner.clone(entity, this)\n    }\n\n    if(data) {\n      if(EntityCollection.prototype.isPrototypeOf(data)) {\n        let clonedEntities = data.map(buildDecoratedEntity)\n        let clonedCollection = new EntityCollection(clonedEntities)\n        return <EntityData>clonedCollection\n      }\n      if(JsonApiEntity.prototype.isPrototypeOf(data)) {\n        let clone = buildDecoratedEntity(<iEntity>data)\n        return <EntityData>clone\n      }\n    }\n\n    return data\n  }\n\n  private getSelector(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n\n    return this.selectorProvider.provide(ri, opts.selectorOpts)\n  }\n\n  private shouldDispatch(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): boolean {\n    return opts.syncWithApi\n  }\n\n  private getSliceName(\n    ri: iResourceIdentifier,\n  ) {\n    return _.join([ri.feature, 'entities', ri.type], '.')\n  }\n\n  private noData$(): Observable<any> {\n    return of([])\n  }\n}\n","import * as _ from 'lodash'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iEntityAttributeBuilder,\n  iEntityConstructorParams,\n} from '../../interfaces/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AttributeBuilder implements iEntityAttributeBuilder {\n  build(params: any): iEntityConstructorParams {\n    return {\n      feature: params.feature,\n      type: params.type,\n      id: params.id,\n      attributes: _.omit(params, ['id', 'feature'])\n    }\n  }\n}\n","import * as _ from 'lodash'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iEntityConstructorParams,\n  iEntityAttributeBuilder,\n} from '../../interfaces/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JsonApiAttributeBuilder implements iEntityAttributeBuilder {\n  build(params: any): iEntityConstructorParams {\n    let propNames = ['feature', 'type', 'id', 'attributes', 'relationships']\n    return <iEntityConstructorParams>_.pick(params, propNames)\n  }\n}\n","import { AttributeBuilder as EntityAttributeBuilder }               from './attribute-builder.service'\nimport { JsonApiAttributeBuilder as JsonApiEntityAttributeBuilder } from './json-api-attribute-builder.service'\n\nexport const services: any[] = [\n  EntityAttributeBuilder,\n  JsonApiEntityAttributeBuilder,\n]\n\nexport {\n  EntityAttributeBuilder,\n  JsonApiEntityAttributeBuilder,\n}\n","import * as _         from 'lodash'\n\nimport {\n  Observable,\n  of as observableOf,\n  pipe,\n  combineLatest,\n} from 'rxjs'\n\nimport { map, mergeMap } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  ApiService,\n} from '@ceo/shared'\n\n\nimport {\n  FeatureIdentifier,\n  iApiResponse,\n  iEntity,\n  iEntityConstructorParams,\n  iEntityService,\n  iResourceIdentifier,\n} from '../interfaces/index'\n\nimport { EntityFactory } from './entity-factory.service'\nimport { EntityAttributeBuilder } from './attribute-builders/index'\n\n@Injectable()\nexport class EntityService implements iEntityService {\n  constructor(\n    public entityFactory: EntityFactory,\n    public apiService: ApiService,\n    public attributeBuilder: EntityAttributeBuilder,\n  ) {}\n\n  create$(...args) {\n    return this.apiEntityRequest$('create$', ...args)\n  }\n\n  post$(...args) {\n    return this.apiEntityRequest$('post$', ...args)\n  }\n\n  delete$(...args) {\n    return this.apiEntityRequest$('delete$', ...args)\n  }\n\n  get$(...args) {\n    return this.apiEntityRequest$('get$', ...args)\n  }\n\n  update$(...args) {\n    return this.apiEntityRequest$('update$', ...args)\n  }\n\n  private apiEntityRequest$(action: string, ...args) {\n    return this.entityData$((<any>this.apiService)[action](...args))\n  }\n\n  private entityData$(apiData$: Observable<iApiResponse>) {\n    return apiData$.pipe(\n      mergeMap(apiResponse => this.buildEntityData$(apiResponse)),\n    )\n  }\n\n  private buildEntityData$(\n    apiResponse: iApiResponse\n  ): Observable<any> {\n    return this.buildEntities$(apiResponse).pipe(\n      map(entities => {\n        return {\n          data: entities,\n          resourceIdentifier: apiResponse.resourceIdentifier,\n        }\n      })\n    )\n  }\n\n  private buildEntities$(apiResponse: iApiResponse): Observable<any[]> {\n    var resourceIdentifier = apiResponse.resourceIdentifier\n    var apiData = apiResponse.data\n    var featureName = resourceIdentifier.feature\n\n    let buildEntity$ = _.bind(_.partial(this.buildEntity$, featureName), this)\n    let observables = _.map(apiData, buildEntity$)\n    return combineLatest(observables)\n  }\n\n  private buildEntity$(\n    featureName: FeatureIdentifier,\n    entityData: iEntityConstructorParams,\n  ): Observable<iEntity> {\n    let featureData = {\n      feature: featureName\n    }\n    _.defaults(entityData, featureData)\n    let data = this.attributeBuilder.build(entityData)\n    return this.entityFactory.build$(data)\n  }\n}\n","import { Action } from '@ngrx/store'\n\nimport { PayloadAction } from '@ceo/state'\n\nexport enum EntityConfigActionTypes {\n  SET_PRIMARY_ENTITY = 'SET_PRIMARY_ENTITY',\n}\n\nexport class SetPrimaryEntity extends PayloadAction {\n  readonly type = EntityConfigActionTypes.SET_PRIMARY_ENTITY\n  constructor(public slice: string, public payload: any) {\n    super(slice)\n  }\n}\n\nexport type EntityConfigActionsUnion =\n  SetPrimaryEntity\n","import { Observable, of, defer } from 'rxjs'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store, Action }    from '@ngrx/store'\nimport { Actions, Effect, ofType } from '@ngrx/effects'\n\n\n@Injectable()\nexport class EntityConfigEffects {\n  constructor(\n    private store: Store<any>,\n    private actions$: Actions<any>,\n  ) {}\n\n\n  @Effect()\n  init$: Observable<Action> =\n    defer(() => {})\n}\n","import {\n  iEntityConfigState,\n  iPrimaryEntityState,\n} from './state'\n\nexport var configInitialState: iPrimaryEntityState = {\n  primaryEntity: {\n    feature: \"\",\n    type: \"\",\n    id: \"\",\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  EntityConfigActionTypes,\n  EntityConfigActionsUnion,\n} from './actions'\n\nimport {\n  iEntityConfigState\n} from './state'\n\nexport function entityConfigReducer(\n  state: iEntityConfigState,\n  action: EntityConfigActionsUnion\n): iEntityConfigState {\n  var deltaState = {}\n\n  switch (action.type) {\n    case EntityConfigActionTypes.SET_PRIMARY_ENTITY:\n      deltaState = {\n       primaryEntity: _.omit(action.payload, 'feature'),\n      }\n      return _.assign({}, state, deltaState)\n    default:\n      return state\n  }\n}\n","import * as _ from 'lodash'\n\nimport { \n  createFeatureSelector, createSelector,\n  MemoizedSelector\n} from '@ngrx/store'\n\nimport { iEntityConfigState } from './state'\n\nexport const selectAppFeature  = createFeatureSelector<any>('app')\n\n/*\nlet selectPrimaryEntity = (state: iEntityConfigState) => {\n  return state.entity.primaryEntity\n}\nexport const selectEntityPrimaryEntity = createSelector(\n  selectAppFeature,\n  selectPrimaryEntity,\n  (appFeature: any, primaryEntity: any) => {\n    if(_.isEmpty(primaryEntity)) { \n      return null\n    }\n    else {\n      let type = primaryEntity.type\n      let id = primaryEntity.id\n      return appFeature.entities[type].entities[id]\n    }\n  }\n)\n\nexport const entityConfigSelectors = {\n  primaryEntity: selectEntityPrimaryEntity,\n}\n*/\n","export enum ActionTypes {\n  ADD_FEATURE = '[EntityFeature] ADD_FEATURE',\n  LOAD_PRIMARY_ENTITY = '[EntityFeature] LOAD_PRIMARY_ENTITY',\n  REGISTER_FEATURE = '[EntityFeature] REGISTER_FEATURE',\n  SELECT_PRIMARY_ENTITY = '[EntityFeature] SELECT_PRIMARY_ENTITY',\n  SET_PRIMARY_ENTITY = '[EntityFeature] SET_PRIMARY_ENTITY',\n  SET_PRIMARY_ENTITY_IDENTIFIER = '[EntityFeature] SET_PRIMARY_ENTITY_IDENTIFIER',\n}\n","import { Action } from '@ngrx/store'\n\nimport {\n  PayloadAction,\n} from '@ceo/state'\n\nimport { ActionTypes } from './action-types'\n\nexport class AddFeature extends PayloadAction {\n  readonly type = ActionTypes.ADD_FEATURE\n}\n\nexport class LoadPrimaryEntity extends PayloadAction {\n  readonly type = ActionTypes.LOAD_PRIMARY_ENTITY\n}\n\nexport class RegisterFeature extends PayloadAction {\n  readonly type = ActionTypes.REGISTER_FEATURE\n}\n\nexport class SelectPrimaryEntity implements Action {\n  readonly type = ActionTypes.SELECT_PRIMARY_ENTITY\n}\n\nexport class SetPrimaryEntity extends PayloadAction {\n  readonly type = ActionTypes.SET_PRIMARY_ENTITY\n}\n\nexport class SetPrimaryEntityIdentifier extends PayloadAction {\n  readonly type = ActionTypes.SET_PRIMARY_ENTITY_IDENTIFIER\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  of as observableOf,\n  combineLatest,\n} from 'rxjs'\n\nimport {\n  mergeMap,\n  map,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store } from '@ngrx/store'\n\nimport {\n  InflectionService,\n} from '@ceo/core'\n\nimport {\n  iRouterStateUrl,\n} from '@ceo/state'\n\nimport {\n  UrlSlug,\n} from '@ceo/shared'\n\nimport {\n  JsonApiEntity,\n  EntityCollection,\n} from '../classes/index'\n\nimport {\n  entityFeatureSelectors,\n} from '../state/feature/selectors'\n\n\nimport {\n  iEntityCollection,\n  iFeature,\n  iFeatureMap,\n  iResourceIdentifier,\n} from '../interfaces/index'\n\nimport { DataService } from './data.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RouteEntityTypeProvider {\n  private _features$: Observable<iFeatureMap>\n\n  constructor(\n    protected store: Store<any>,\n    protected dataService: DataService,\n    protected inflectionService: InflectionService,\n  ) {}\n\n  handleRouterNavigation$(\n    routerState: iRouterStateUrl\n  ): Observable<iResourceIdentifier> {\n\n    return this.features$.pipe(\n      mergeMap(features => this.featureRoutableEntities$(features)),\n      map(collection => {\n        return this.resourceIdentifierFromRouterState(collection, routerState)\n      }),\n    )\n  }\n\n  private resourceIdentifierFromRouterState(\n    collection: any,\n    routerState: iRouterStateUrl\n  ): iResourceIdentifier {\n\n    let entityTypeSlug = this.entityTypeSlugFromRouterState(routerState)\n    if(entityTypeSlug) {\n\n      let entity = collection.findByAttr('urlSlug', entityTypeSlug)\n      if(entity) {\n\n        let routerStateOpts =\n          this.resourceIdentifierOptsFromRouterState(entity, routerState)\n\n        return _.merge({}, entity.resourceIdentifier, routerStateOpts)\n      }\n      else {\n        return null\n      }\n    }\n    else {\n      return null\n    }\n  }\n\n  private resourceIdentifierOptsFromRouterState(entity, routerState) {\n    let params = routerState.params\n    let ri = <iResourceIdentifier>{}\n\n    let isPrimaryKey = (value, prop) => {\n      return _.includes(entity.primaryKeys, prop)\n    }\n\n    let idKey = _.pickBy(params, isPrimaryKey) \n    if(idKey) {\n      ri.id = _.head(_.values(idKey))\n    }\n\n    let filter = _.omit(params, _.keys(idKey))\n    if(!_.isEmpty(filter)) {\n      ri.filter = filter\n    }\n\n    return ri\n  }\n\n  private entityTypeSlugFromRouterState(\n    routerState: iRouterStateUrl\n  ): UrlSlug {\n    let segments = _.map(routerState.segments, 'path')\n\n    if(_.head(segments) == 'app') {\n      segments = _.drop(segments)\n    }\n\n    let params = _.values(routerState.params)\n\n\n    let segmentsWithoutParam = (segments, param) => {\n      if(_.last(segments) == param) {\n        return _.dropRight(segments)\n      }\n      else {\n        return segments\n      }\n\n    }\n    let finalSegments = _.reduce(params, segmentsWithoutParam, segments)\n\n    return finalSegments[0]\n  }\n\n  private featureRoutableEntities$(features) {\n    let getRoutableEntities = _.bind(this.getRoutableEntities, this)\n    let routableEntities = _.map(features, getRoutableEntities)\n\n    return combineLatest(routableEntities).pipe(\n      map(routableEntityCollections => {\n        let entities = _.flatten(_.map(routableEntityCollections, 'entities'))\n        return new EntityCollection(entities)\n      }),\n    )\n  }\n\n  private getRoutableEntities(feature, featureName) {\n    return this.resourceConfigurations$(feature).pipe(\n      map(collection => this.routableResourceConfigurations(collection)),\n      map(collection => this.buildResourceIdentifiers(feature, collection)),\n    )\n  }\n\n  private routableResourceConfigurations(\n    collection: iEntityCollection\n  ): iEntityCollection {\n    return collection.where({isRoutable: true})\n  }\n\n  private resourceConfigurations$(feature) {\n    let ri = {\n      feature: feature.name,\n      type: 'resource-configurations',\n    }\n    let dataOpts = {\n      syncWithApi: false,\n    }\n\n    return this.dataService.get$(ri, dataOpts)\n  }\n\n  private buildResourceIdentifiers(feature, collection) {\n    let buildResourceIdentifier = (entity) => {\n      let ri = {\n        feature: feature.name,\n        type: entity.resourceType,\n      }\n\n      let attributes = {\n        resourceIdentifier: ri,\n        urlSlug: entity.displaySlug,\n        primaryKeys: entity.primaryKeys\n      }\n\n      let data = {\n        id: entity.id,\n        type: 'resource-identifiers',\n        attributes: attributes,\n      }\n      return new JsonApiEntity(data)\n    }\n    let entities = _.map(collection.entities, buildResourceIdentifier)\n    return new EntityCollection(entities)\n  }\n\n  private get features$(): Observable<iFeatureMap> {\n    if(!this._features$) {\n      this._features$ = this.getFeatures$()\n    }\n\n    return this._features$\n  }\n\n  private getFeatures$(): Observable<iFeatureMap> {\n    return <Observable<iFeatureMap>>this.store.select(entityFeatureSelectors.features)\n  }\n\n\n}\n","import * as _ from 'lodash'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  InflectionService,\n}   from '@ceo/core'\n\nimport {\n  iResourceIdentifier,\n} from '../interfaces/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ResourceIdentifierService {\n  constructor(\n    private inflectionService: InflectionService,\n  ) {}\n\n  isValid(ri: iResourceIdentifier): boolean {\n    return _.has(ri, 'feature') && _.has(ri, 'type')\n  }\n\n  isScope(ri: iResourceIdentifier): boolean {\n    return _.has(ri, 'filter.scope')\n  }\n\n  isSameResource(\n    riOne: iResourceIdentifier,\n    riTwo: iResourceIdentifier,\n  ): boolean {\n    return _.isEqual(riOne, riTwo)\n  }\n\n  scopeName(ri: iResourceIdentifier): string {\n    let scopeKey = _.get(ri, 'filter.scope')\n    return this.inflectionService.camelCase(scopeKey)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  defer,\n  of as observableOf,\n} from 'rxjs'\n\nimport {\n  map,\n  tap,\n  mergeMap,\n  switchMap,\n  distinctUntilChanged,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  Store, Action,\n  createSelector,\n} from '@ngrx/store'\n\nimport { Actions, Effect, ofType, }  from '@ngrx/effects'\n\nimport { ROUTER_NAVIGATION } from '@ngrx/router-store'\n\nimport {\n  FeatureActions,\n} from './actions/index'\n\nimport {\n  EntityActions,\n} from '../../classes/index'\n\nimport {\n  DataService,\n} from '../../services/data.service'\n\nimport {\n  RouteEntityTypeProvider,\n} from '../../services/route-entity-type-provider.service'\n\nimport {\n  ResourceIdentifierService,\n} from '../../services/resource-identifier.service'\n\nimport {\n  SelectorProvider,\n} from '../../services/selectors/selector-provider.service'\n\nimport {\n  entityFeatureSelectors,\n} from './selectors'\n\n@Injectable()\nexport class FeatureEffects {\n  constructor(\n    private store: Store<any>,\n    private actions$: Actions<any>,\n    protected dataService: DataService,\n    protected routeEntityTypeProvider: RouteEntityTypeProvider,\n    protected resourceIdentifierService: ResourceIdentifierService,\n    protected selectorProvider: SelectorProvider,\n  ) {}\n\n  @Effect()\n  handleRouterNavigation$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(ROUTER_NAVIGATION),\n        mergeMap((action: any) => {\n          return this.routeEntityTypeProvider\n            .handleRouterNavigation$(action.payload.routerState)\n        }),\n        distinctUntilChanged(this.resourceIdentifierService.isSameResource),\n        tap((payload: any) => {\n          if(this.resourceIdentifierService.isValid(payload)) {\n            this.dataService.get$(payload)\n          }\n        }),\n        map((payload: any) => {\n          return new FeatureActions.SetPrimaryEntityIdentifier(payload)\n        }),\n      )\n\n  @Effect()\n  registerFeature$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType('[EntityFeature] REGISTER_FEATURE'),\n        map((action: any) => {\n          let feature = action.payload\n          let addFeatureAction = new FeatureActions.AddFeature(feature)\n          return addFeatureAction\n        })\n      )\n\n  @Effect()\n  loadPrimaryEntity$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType('[EntityFeature] LOAD_PRIMARY_ENTITY'),\n        mergeMap((action: any) => {\n          return this.dataService.get$(action.payload)\n        }),\n      )\n\n  @Effect()\n  selectPrimaryEntity$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType('[EntityFeature] SELECT_PRIMARY_ENTITY'),\n        mergeMap((action: any) => {\n          return this.store.select(entityFeatureSelectors.primaryEntityIdentifier)\n        }),\n        distinctUntilChanged(this.resourceIdentifierService.isSameResource),\n        mergeMap((payload: any) => {\n          if(_.isNil(payload)) {\n            return observableOf(null)\n          }\n          else {\n            let selector = this.selectorProvider.provide(payload)\n            return this.store.select(<any>selector)\n          }\n        }),\n        map((payload: any) => {\n          return new FeatureActions.SetPrimaryEntity(payload)\n        })\n      )\n\n  @Effect()\n  init$: Observable<Action> =\n    defer(() => {\n      return observableOf(new FeatureActions.SelectPrimaryEntity())\n    })\n}\n","import { iFeatureState } from './state'\n\nexport const featureInitialState: iFeatureState = {\n  features: {},\n  primaryEntity: {\n    resourceIdentifier: null,\n    entity: null\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  FeatureActionsUnion,\n} from './actions/index'\n\nimport {\n  iFeatureState\n} from './state'\n\nexport function featureReducer(\n  state: iFeatureState,\n  action: FeatureActionsUnion\n): iFeatureState {\n\n  var stateDelta = <any> {}\n\n  switch (action.type) {\n    case '[EntityFeature] ADD_FEATURE':\n\n      let existingFeatures = state.features\n      let newFeature = action.payload\n\n      let featuresDelta = {}\n      featuresDelta[newFeature.name] = newFeature\n      let newFeatures = Object.assign({}, existingFeatures, featuresDelta)\n\n      stateDelta = <any> {\n        features: newFeatures\n      }\n\n      break\n\n    case '[EntityFeature] SET_PRIMARY_ENTITY':\n      stateDelta = {\n        primaryEntity: _.cloneDeep(state.primaryEntity)\n      }\n\n      stateDelta.primaryEntity.entity = action.payload\n\n      break\n\n    case '[EntityFeature] SET_PRIMARY_ENTITY_IDENTIFIER':\n      stateDelta = {\n        primaryEntity: _.cloneDeep(state.primaryEntity)\n      }\n\n      stateDelta.primaryEntity.resourceIdentifier = action.payload\n     \n      break\n\n    default:\n      break\n  }\n\n  return Object.assign({}, state, stateDelta)\n}\n","import {\n  FeatureEffects,\n  featureInitialState as initialState,\n  featureReducer as reducer,\n} from './feature/index'\n\nexport {\n  featureInitialState as initialState,\n  featureReducer as reducer,\n} from './feature/index'\n\nexport const effects: any[] = [\n  FeatureEffects,\n]\n","import { InjectionToken } from '@angular/core'\n\nexport const FEATURE_CONFIG = new InjectionToken<any>(\"Entity Feature Config\")\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  of as observableOf,\n  defer,\n  combineLatest,\n} from 'rxjs'\n\nimport {\n  switchMap,\n  catchError, map, mergeMap,\n  flatMap, filter, tap,\n  exhaustMap,\n} from 'rxjs/operators'\n\nimport { Injectable, Inject } from '@angular/core'\n\n// @ngrx imports\nimport { Store, Action }           from '@ngrx/store'\nimport {\n  Actions, Effect,\n  ofType, OnIdentifyEffects,\n  OnInitEffects, OnRunEffects,\n  EffectNotification,\n} from '@ngrx/effects'\n\nimport {\n  typeFor, PayloadAction,\n  applicationConfigSelectors, ApplicationConfigActions,\n  systemComponentsSelectors, SystemComponentsActions,\n} from '@ceo/state'\n\nimport { EntityService }                       from './entity.service'\n\nimport {\n  FeatureActions,\n} from '../state/index'\n\nimport {\n  EntityActions,\n  EntityActionsMap,\n} from '../classes/index'\n\nimport {\n  EntityConfigActions,\n} from '../state/index'\n\nimport {\n  iEntityConstructor,\n  iApiResponse,\n  iEntitySliceNamePayload,\n  iResourceIdentifier,\n  iEntityCollection,\n  iEntityMap,\n} from '../interfaces/index'\n\nimport {\n  FEATURE_CONFIG,\n} from '../util/tokens'\n\nimport { ResourceIdentifierService } from './resource-identifier.service'\n\n@Injectable()\nexport class EntityEffects\n  implements OnIdentifyEffects, OnInitEffects {\n\n  featureName: string = 'Feature'\n\n  constructor(\n    protected store: Store<any>,\n    protected actions$: Actions<any>,\n    protected entityService: EntityService,\n    @Inject(FEATURE_CONFIG) protected featureConfig,\n    protected resourceIdentifierService: ResourceIdentifierService\n  ) {\n    this.featureName = featureConfig.name\n  }\n\n  @Effect()\n  init$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(this.featureAction(\"INIT\")),\n        switchMap((action: PayloadAction) => {\n          let registerFeatureAction = new FeatureActions.RegisterFeature(this.featureConfig)\n          let loadSeedAction = new EntityActions.LoadSeedData(this.featureName, this.featureConfig)\n          return [registerFeatureAction, loadSeedAction]\n        }),\n      )\n\n  @Effect()\n  seed$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(this.featureAction(\"LOAD_SEED_DATA\")),\n        switchMap((action: PayloadAction) => {\n          var feature = action.payload\n          let seeds = action.payload.seedEntities\n\n          let buildLoadAction = (ri: iResourceIdentifier) => {\n            let sliceName = this.getFeatureEntitySlice(feature.name, ri.type)\n            return new EntityActions.Load(sliceName, ri)\n          }\n\n          return _.map(seeds, buildLoadAction)\n        }),\n      )\n\n  @Effect()\n  load$: Observable<Action> =\n    this.actions$\n     .pipe(\n       ofType(...this.sliceActions(\"LOAD\")),\n       mergeMap((action: PayloadAction) => {\n         let resourceOpts = this.buildResourceOpts(action)\n         return this.entityService.get$(resourceOpts)\n       }),\n       map((payload: iApiResponse) => {\n         return new EntityActions.AsyncSuccess(this.featureName, payload)\n       })\n     )\n\n  @Effect()\n  add$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(...this.sliceActions(\"ADD\")),\n        mergeMap((action: PayloadAction) => {\n          let resourceOpts = this.buildResourceOpts(action)\n          return this.entityService.create$(resourceOpts)\n        }),\n        map((payload: iApiResponse) => {\n          return new EntityActions.AsyncSuccess(this.featureName, payload)\n        })\n      )\n\n  @Effect()\n  update$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(...this.sliceActions(\"UPDATE\")),\n        mergeMap((action: PayloadAction) => {\n          let resourceOpts = this.buildResourceOpts(action)\n          return this.entityService.update$(resourceOpts)\n        }),\n        map((payload: iApiResponse) => {\n          return new EntityActions.AsyncSuccess(this.featureName, payload)\n        }),\n      )\n\n  @Effect()\n  asyncSuccess$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(this.featureAction(\"ASYNC_SUCCESS\")),\n        map((action: PayloadAction) => {\n          return {\n            resourceIdentifier: action.payload.resourceIdentifier,\n            data: this.groupedEntities(action.payload),\n          }\n        }),\n        switchMap((payload: any) => {\n          return this.buildAddToStoreActions(payload)\n        })\n      )\n\n  @Effect()\n  delete$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(...this.sliceActions(\"DELETE\")),\n        mergeMap((action: PayloadAction) => {\n          let resourceOpts = this.buildResourceOpts(action)\n          return this.entityService.delete$(resourceOpts)\n        }),\n        map((payload: iApiResponse) => {\n          return new EntityActions.DeleteSuccess(\n            this.getEntitySlice(payload.resourceIdentifier.type),\n            payload.data\n          )\n        })\n      )\n\n  @Effect()\n  loadApplicationResource$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType('[ApplicationConfig] LOAD_RESOURCE_BY_ID'),\n        mergeMap(() => {\n          return this.store.select(applicationConfigSelectors.resourceById)\n        }),\n        filter((payload) => this.isValidPayload(payload)),\n        mergeMap((payload) => {\n          return this.entityService.get$(payload)\n        }),\n        filter((payload) => this.isValidResource(payload)),\n        map((payload: any) => {\n          return new ApplicationConfigActions.SetPrimaryEntity(payload)\n        })\n      )\n\n\n  ngrxOnIdentifyEffects() {\n    return this.featureName\n  }\n\n  ngrxOnInitEffects(): Action {\n    let initFeatureAction = new EntityActions.Init(this.featureName, this.featureConfig)\n    return initFeatureAction\n  }\n\n  // Private methods\n\n  private buildAddToStoreActions(payload) {\n    let actions = []\n    let addActions = _.map(payload.data, _.bind(this.buildAddEntitiesAction, this))\n    actions = actions.concat(addActions)\n\n    if(this.resourceIdentifierService.isScope(payload.resourceIdentifier)) {\n      let scopeAction = this.buildAddScopeEntitiesAction(payload)\n      actions = actions.concat([scopeAction])\n    }\n\n    return _.flatten(actions)\n  }\n\n  private buildAddEntitiesAction(payload: iEntitySliceNamePayload) {\n    return new EntityActions.AddStoreEntities(\n      this.getEntitySlice(payload.sliceName),\n      payload.entities,\n    )\n  }\n\n  private buildAddScopeEntitiesAction(payload: any) {\n    let ri = payload.resourceIdentifier\n    let scopeName = this.resourceIdentifierService.scopeName(ri)\n\n    var sliceName = ri.type\n    let hasEntityType = (payload: iEntitySliceNamePayload): boolean => {\n      return payload.sliceName == sliceName\n    }\n\n    let sliceNamePayload = _.find(payload.data, hasEntityType)\n    let entities = sliceNamePayload.entities\n\n    let actionPayload = {\n      scope: scopeName,\n      entities: entities\n    }\n\n    return new EntityActions.SetScopeEntities(\n      this.getEntitySlice(sliceName),\n      actionPayload,\n    )\n  }\n\n  private groupedEntities(payload: iApiResponse): iEntitySliceNamePayload[] {\n    let entities = payload.data\n\n    let groupedBySlice = (entityTypeMap, entity) => {\n      let sliceName = entity.constructor.sliceName\n      var entities = []\n      if(entityTypeMap[sliceName]) {\n        entities = entityTypeMap[sliceName].entities\n      }\n      entities.push(entity)\n      entityTypeMap[sliceName] = {\n        sliceName: sliceName,\n        entities: entities\n      }\n\n      return entityTypeMap\n    }\n\n    return  _.values(_.reduce(entities, groupedBySlice, {}))\n  }\n\n\n  private isValidPayload(payload) {\n    //TODO: @Deepak  - it should ensure the payload is for THIS feature\n    return _.has(payload, 'feature') &&\n    _.has(payload, 'type') &&\n    _.has(payload, 'id')\n  }\n\n  private isValidResource(payload) {\n    return payload\n  }\n\n  private buildResourceOpts(action) {\n    let ri = {\n      type: _.last(_.split(action.slice, \".\"))\n    }\n    ri = _.merge({}, ri, action.payload)\n\n    return {\n      payload: action.payload,\n      type: _.last(_.split(action.slice, \".\")),\n      data: action.payload.data,\n      resourceIdentifier: ri,\n    }\n  }\n\n  private featureAction(actionName) {\n    let featureName = this.featureConfig.name\n    return typeFor(featureName, EntityActionsMap[actionName])\n  }\n\n  private sliceActions(actionName) {\n    let buildActionType = (sliceName) => {\n      return typeFor(sliceName, EntityActionsMap[actionName])\n    }\n    let sliceActions = _.map(this.featureConfig.sliceNames, buildActionType)\n    return sliceActions\n  }\n\n  private getSliceName(resourceOpts) {\n    return _.join([resourceOpts.feature, 'entities', resourceOpts.type], '.')\n  }\n\n  private getEntitySlice(sliceName) {\n    return this.getFeatureEntitySlice(this.featureName, sliceName)\n  }\n\n  private getFeatureEntitySlice(featureName, sliceName) {\n    return _.join([featureName,'entities', sliceName], '.')\n  }\n}\n","import { DataService }                  from './data.service'\nimport { EntityCloner }                 from './entity-cloner.service'\nimport { EntityEffects }                from './entity.effects'\nimport { EntityFactory }                from './entity-factory.service'\nimport { EntityService }                from './entity.service'\nimport { EntityRelationshipProvider }   from './entity-relationship-provider.service'\nimport { EntityTypeProviderService }    from './entity-type-provider.service'\nimport { ResourceIdentifierService }    from './resource-identifier.service'\nimport { RouteEntityTypeProvider }      from './route-entity-type-provider.service'\nimport { DataService as EntityDataService }              from './data.service'\n\nimport * as attributeBuilders from './attribute-builders/index'\nimport * as selectors         from './selectors/index'\n\nexport const entityServices: any[] = [\n  DataService,\n  EntityCloner,\n  EntityEffects,\n  EntityFactory,\n  EntityRelationshipProvider,\n  EntityService,\n  EntityTypeProviderService,\n  ResourceIdentifierService,\n  RouteEntityTypeProvider,\n  EntityDataService,\n  ...attributeBuilders.services,\n  ...selectors.services,\n]\n\nexport { DataService }\nexport { EntityCloner }\nexport { EntityDataService }\nexport { EntityEffects }\nexport { EntityFactory }\nexport { EntityService }\nexport { EntityRelationshipProvider }\nexport { EntityTypeProviderService }\nexport { ResourceIdentifierService }\nexport { RouteEntityTypeProvider }\n\nexport {\n  EntityAttributeBuilder,\n  JsonApiEntityAttributeBuilder,\n} from './attribute-builders/index'\n\nexport {\n  EntitySelectorNameService,\n  EntitySelectorService,\n  EntitySelectorProvider,\n} from './selectors/index'\n","import {\n  EntityEffects,\n  RouteEntityTypeProvider,\n  ResourceIdentifierService,\n} from '../../../services/index'\n\nexport const buildEntityEffects = (\n  store,\n  actions,\n  entityService,\n  featureConfig,\n  resourceIdentifierService,\n) => {\n\n  return new EntityEffects(\n    store,\n    actions,\n    entityService,\n    featureConfig,\n    resourceIdentifierService,\n  )\n}\n","import * as _ from 'lodash'\n\nimport { iEntityConfig } from '../../../interfaces'\n\nlet buildEntityConfig  = (\n  apiConfig,\n  defaultEntityConfigClass,\n  params,\n): iEntityConfig  => {\n\n  let configClass =\n    _.get(params, 'entityConfigClass', defaultEntityConfigClass)\n\n  let configParams = _.merge(\n    _.omit(params, ['entityConfigClass']),\n    {apiConfig: apiConfig}\n  )\n\n  return new configClass(configParams)\n}\n\nexport const buildEntityConfigs = (\n  entityConfigParams,\n  apiConfig,\n  defaultEntityConfigClass,\n) => {\n  let build =\n    _.partial(buildEntityConfig, apiConfig, defaultEntityConfigClass)\n\n  return _.map(\n    _.sortBy(entityConfigParams, 'type'),\n    build\n  )\n}\n","import { createEntityAdapter }  from '@ngrx/entity';\n\nimport {\n  iEntity,\n} from '../../../interfaces/index'\n\nexport function buildEntityInitialState(entityType): any {\n  let createInitialStateForEntityType = (name) => {\n    let prop = {};\n    let initialState = createEntityAdapter<iEntity>().getInitialState();\n    let customInitialState = {\n      selectedEntityId: null,\n      config: {\n        entityType: entityType\n      },\n      scopes: {\n      },\n    }\n    initialState =\n      Object.assign(\n        {},\n        initialState,\n        customInitialState,\n        entityType.config.initialState\n      )\n    prop[name] = initialState\n    return prop;\n  }\n\n  let sliceName = entityType.sliceName;\n  return createInitialStateForEntityType(sliceName);\n}\n","import {\n  EntityService,\n} from '../../../services/index'\n\nexport function buildEntityService(\n  entityFactory,\n  apiService,\n  attributeBuilder,\n): any {\n\n  return new EntityService(entityFactory, apiService, attributeBuilder)\n}\n","import { EntityTypeProviderService } from '../../../services';\n\nexport const buildEntityTypeProvider = (featureConfig) => {\n  return new EntityTypeProviderService(featureConfig)\n}\n","import * as _ from 'lodash';\n\nimport { classify } from '@ceo/core';\n\nlet buildEntityTypeClass = (entityConfig, baseEntity) => {\n  class Entity extends baseEntity {\n    static _sliceName: string = entityConfig.name;\n    static config: any = entityConfig;\n  }\n\n  return Entity;\n}\n\nexport function buildEntityTypes(\n  entityConfigs,\n  baseEntity\n) {\n\n  let addEntityType = (entityTypes, entityConfig) => {\n    let className = classify(entityConfig.name)\n    let entityTypeClass = buildEntityTypeClass(entityConfig, baseEntity)\n    entityTypes[className] = entityTypeClass\n    return entityTypes\n  }\n\n  return _.reduce(entityConfigs, addEntityType, {});\n}\n","import {\n  FeatureConfig,\n} from '../../../classes/index'\n\nexport function buildFeatureConfig(config): any {\n  return new FeatureConfig(config)\n}\n","import * as _ from 'lodash'\n\nimport {\n  FeatureConfig,\n} from '../../../classes/index'\n\nimport { buildEntityInitialState } from '../entity/index'\n\nexport function buildFeatureInitialState(config): any {\n  let featureConfig = new FeatureConfig(config)\n\n  let entityTypes = featureConfig.entityTypes;\n  let entityStates = _.reduce(\n    _.map(entityTypes, buildEntityInitialState),\n    _.merge,\n    {}\n  );\n\n  return {\n    entities: entityStates\n  }\n}\n","import * as _ from 'lodash'\n\nimport { pipe } from 'rxjs'\nimport { filter } from 'rxjs/operators'\n\nimport {\n  select,\n  createSelector,\n  compose,\n  ActionReducer,\n  createFeatureSelector,\n  combineReducers,\n} from '@ngrx/store'\n\nimport {\n  iEntityState,\n  iEntity,\n  iEntityCollection,\n  iEntityConfig\n} from '../../../interfaces'\n\nimport {\n  EntityAdapterFactory,\n} from '../../../classes'\n\nimport {\n  entityConfigReducer,\n} from '../../../state'\n\nimport {\n  buildEntitySelectors,\n  buildRootSelector,\n  buildSliceSelector,\n  buildFeatureSelector,\n} from '../selectors/index'\n\nexport function buildFeatureReducer(\n  featureConfig,\n  selectorService,\n  selectorNameService,\n  buildCustomSelectors,\n): ActionReducer<any> {\n\n  let factory = new EntityAdapterFactory(featureConfig)\n  let entityAdapters = factory.adapters\n\n  buildFeatureSelector(\n    featureConfig,\n    entityAdapters,\n    selectorService,\n    selectorNameService,\n    buildCustomSelectors,\n  )\n\n  var featureEntitiesReducerPrefix = _.join([featureConfig.name, 'entities'], '.')\n\n  var entityReducers = _.reduce(_.map(entityAdapters, buildEntityReducer), _.merge, {})\n\n  // @Luis: action should not be any\n  let featureEntitiesReducer = (state: iEntityState<iEntity>, action: any) => {\n    let sliceName = action.slice\n\n    if(_.startsWith(sliceName, featureEntitiesReducerPrefix)) {\n      let entitySliceName = _.last(_.split(sliceName, '.'))\n      let stateDelta = {}\n      if(entitySliceName) {\n        stateDelta[entitySliceName] = \n          entityReducers[entitySliceName](state[entitySliceName], action)\n      }\n      return Object.assign({}, state, stateDelta)\n    }\n    else {\n      return state\n    }\n  }\n\n  let reducers = {\n    config: entityConfigReducer,\n    entities: featureEntitiesReducer,\n  }\n\n  return combineReducers(reducers)\n}\n\nlet buildEntityReducer = (entityTypeAdapter) => {\n  let reducer = {}\n  let key = entityTypeAdapter.sliceName\n  reducer[key] = entityTypeAdapter.reducer\n  return reducer\n}\n","import {\n  JsonApiEntity,\n} from '../classes/index'\n\nimport {\n  FEATURE_CONFIG,\n} from './tokens'\n\nlet featureConfig = {\n  name: 'Default Feature',\n  entityConfigs: [],\n  baseEntityType: JsonApiEntity,\n}\n\nlet featureConfigProvider = {\n  provide: FEATURE_CONFIG,\n  useValue: featureConfig,\n  multi: true,\n}\n\nexport const providers: any[] = [\n  featureConfigProvider,\n]\n","import { NgModule } from '@angular/core'\n\nimport { StoreModule }                 from '@ngrx/store'\nimport { EffectsModule } from '@ngrx/effects'\n\nimport {\n  effects,\n  initialState,\n  reducer,\n} from './state/state'\n\nimport { entityServices } from './services/index'\nimport { providers }from './util/index'\n\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(\n      'entity',\n      reducer,\n      {\n        initialState: initialState,\n      }\n    ),\n    EffectsModule.forFeature([\n      ...effects,\n    ]),\n  ],\n  declarations: [],\n  providers: [\n    ...entityServices,\n    ...providers,\n  ]\n})\nexport class EntityModule { }\n","import {\n  Observable,\n  BehaviorSubject,\n} from 'rxjs'\n\nimport {\n  iFormWrapper,\n} from '@ceo/shared'\n\nimport {\n  iEntity,\n} from '../../entity/index'\n\nimport {\n  iEntityFormManager,\n} from '../interfaces/index'\n\nexport class EntityFormManager implements iEntityFormManager {\n  private _entity: iEntity\n  private _form: iFormWrapper\n\n  private _entity$: Observable<iEntity>\n  private _form$: BehaviorSubject<iFormWrapper>\n\n  constructor(\n    entity$: Observable<iEntity>,\n    form$: BehaviorSubject<iFormWrapper>,\n  ) {\n    this.entity$ = entity$\n    this.form$ = form$\n  }\n\n  set entity$(entity$: Observable<iEntity>) {\n    this._entity$ = entity$\n    entity$.subscribe(entity => this.entity = entity)\n  }\n\n  get entity$(): Observable<iEntity> {\n    return this._entity$\n  }\n\n  set form$(form$: BehaviorSubject<iFormWrapper>) {\n    this._form$ = form$\n    form$.subscribe(form => this.form = form)\n  }\n\n  get form$(): BehaviorSubject<iFormWrapper> {\n    return this._form$\n  }\n\n  get entity(): iEntity {\n    return this._entity\n  }\n\n  set entity(entity: iEntity)  {\n    this._entity = entity\n  }\n\n  get form(): iFormWrapper {\n    return this._form\n  }\n\n  set form(form: iFormWrapper) {\n    this._form = form\n  }\n\n  formToEntity() {\n    this.entity.updateAttributes(this.form.value)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  iEntityCollection,\n  JsonApiEntity,\n  buildEntityRelationshipProperties,\n  defineEntityRelationshipGetSet,\n} from '../../entity/index'\n\nimport {\n  iFormEntity,\n} from '../interfaces/index'\n\nexport class FormEntity extends JsonApiEntity implements iFormEntity {\n  private _formFields$: Observable<iEntityCollection>\n\n  static relationshipNames: string[] = [\n    'form-fields',\n  ]\n\n  formFields$: any\n}\n//buildEntityRelationshipProperties(FormEntity)\n\nlet buildEntityRelationship = (name) => {\n  defineEntityRelationshipGetSet(FormEntity, name)\n}\n_.map(FormEntity.relationshipNames, buildEntityRelationship)\n","import { JsonApiEntity } from '../../entity/index'\n\nexport class FormFieldEntity extends JsonApiEntity {}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  of as observableOf\n} from 'rxjs'\n\nimport { map }        from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iEntityCollection\n} from '../../../../../entity/index'\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DropdownOptionsFactory {\n  build(data$: Observable<iEntityCollection>, entityKey) {\n    var dropdownData$ = data$.pipe(map(entityCollection =>{\n      var getOptions = (entity) => {\n        return this.getOptions(entityKey, entity)\n      }\n      return _.map(entityCollection.entities, getOptions)\n    }))\n    return dropdownData$\n  }\n\n  getOptions(key, entity) {\n    return {\n      key: entity.id,\n      value: entity.attributes[key]\n    }\n  }\n}\n\n","export const resourceList = [\n  {\n    key: 'default_project_roles',\n    value: 'name',\n    name: 'project-roles'\n  }\n]\n","import {\n  Observable,\n  of as observableOf\n} from 'rxjs'\n\nimport { Injectable } from '@angular/core';\n\nimport {\n  kebabCase,\n  pluralize,\n  snakeCase,\n} from '@ceo/core'\n\nimport {\n  iEntity,\n  iEntityCollection,\n  DataService,\n} from '../../../../../entity/index'\n\n\nimport { DropdownOptionsFactory } from './dropdown-options-factory.service'\n\nimport { resourceList } from './resource-list'\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DropdownFactory {\n  private selectorData$: Observable<iEntityCollection>\n\n  constructor(\n    private dataService: DataService,\n    private optionsFactory: DropdownOptionsFactory,\n  ) { }\n\n  build(resolvable): any {\n    var entityKey = 'name';\n    var name = pluralize(resolvable.name.replace('_id', ''));\n    let resource = resourceList.filter(item => item.key === name)\n    if(resource.length > 0){\n      entityKey = resource[0].value\n      this.selectorData$ = this.getSelectors$(resource[0].name)\n    }\n    else{\n      this.selectorData$ = this.getSelectors$(name)\n    }\n    return this.optionsFactory.build(this.selectorData$, entityKey);\n  }\n\n  getSelectors$(type) {\n    let resourceOpts = {\n      feature: \"app\",\n      type: type\n    }\n    return this.dataService.get$(resourceOpts);\n  }\n}\n\n","import * as _ from 'lodash'\n\nimport { Observable } from 'rxjs'\n\nimport {\n  of as observableOf,\n} from 'rxjs'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  Validators as NgValidators,\n} from '@angular/forms'\n\n\nimport {\n  FormControlType,\n  FormMemberType,\n  InputTypeAttribute,\n  iFormMemberFactoryParams,\n} from '@ceo/shared'\n\nimport {\n  iEntity,\n} from '../../../../../entity/index'\n\nimport { DropdownFactory as SelectFactory } from './dropdown-factory.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormControlDataFactory {\n  static defaultControlType: FormControlType = 'input'\n  static formMemberType: FormMemberType = 'form-item'\n\n  constructor(\n    private selectFactory: SelectFactory,\n  ) { }\n\n  build(\n    entity: iEntity,\n  ): Partial<iFormMemberFactoryParams> {\n\n    return {\n      type: FormControlDataFactory.formMemberType,\n      data: {\n        label: this.labelParams(entity),\n        control: this.controlParams(entity)\n      }\n    }\n  }\n\n  private labelParams(entity: iEntity) {\n    return {\n      text: entity.displayName,\n    }\n  }\n\n  private controlParams(entity: iEntity) {\n    let params = {\n      controlType: this.controlType(entity),\n      placeholder: entity.displayName,\n      key: entity.name,\n      validators: this.buildEntityValidators(entity),\n      displayName: entity.displayName,\n    }\n\n    let controlTypeParams =\n      this.controlTypeData(entity, this.controlType(entity))\n\n    return _.defaults(params, controlTypeParams)\n  }\n\n  private controlType(entity): FormControlType {\n    if(entity.name.includes(\"_id\")) {\n      return 'select' as FormControlType\n    }\n\n    if(entity.dataType == 'boolean') {\n      return 'checkbox' as FormControlType\n    }\n\n    return FormControlDataFactory.defaultControlType\n  }\n\n  private controlTypeData(entity: iEntity, controlType: FormControlType) {\n    switch(controlType) {\n      case \"select\": {\n        return this.selectControlTypeData(entity)\n      }\n      case \"input\": {\n        return this.inputControlTypeData(entity)\n      }\n      default: {\n        return {}\n      }\n    }\n  }\n\n  private selectControlTypeData(entity) {\n    return {\n      options: this.selectFactory.build(entity)\n    }\n  }\n\n  private inputControlTypeData(entity) {\n    return {\n      required: true,\n      inputType: this.inputType(entity),\n    }\n  }\n\n  private inputType(entity: iEntity): InputTypeAttribute {\n    var inputType = 'text'\n    if(entity.name == 'email') {\n      inputType = 'email'\n    }\n    if(entity.name == 'password') {\n      inputType = 'password'\n    }\n\n    return inputType as InputTypeAttribute\n  }\n\n  private buildEntityValidators(entity: iEntity) {\n    let validators = [NgValidators.required]\n\n    if(entity.name == 'email') {\n      validators.push(NgValidators.email)\n    }\n    return validators\n  }\n}\n","import {\n  of as observableOf,\n  Observable\n} from 'rxjs'\n\nimport { Injectable } from '@angular/core'\nimport {\n  Validators as NgValidators,\n} from '@angular/forms'\n\nimport { kebabCase } from '@ceo/core'\n\nimport {\n  iEntity,\n  iEntityCollection,\n} from '../../../../../entity/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormControlValidatorFactory {\n  build(\n    resolvable: iEntity,\n  ): any {\n\n    return {\n      type: 'form-item',\n      data: {\n        control: {\n          validators: [ NgValidators.required ] ,\n        }\n      }\n    }\n  }\n}\n","import * as _                 from 'lodash'\nimport { Observable, empty  } from 'rxjs'\n\nimport { map } from 'rxjs/operators'\n\nimport { Injector, Injectable, InjectionToken } from '@angular/core'\n\nimport {\n  kebabCase,\n  pluralize,\n  snakeCase,\n} from '@ceo/core'\n\nimport {\n  iEntity,\n  EntityData,\n  JsonApiEntity,\n} from '../../../../../entity/index'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormGroupDataFactory {\n  build(\n    entity: iEntity\n  ): any {\n    let resourceType = this.pluralizeType(entity)\n\n    return {\n      memberType: 'form-group',\n      key: this.inputKey(entity),\n      resourceType: resourceType,\n      formName: this.buildFormName(resourceType)\n    }\n  }\n\n  private pluralizeType(entity): string {\n    return pluralize(snakeCase(entity.className))\n  }\n\n  private inputKey(entity) {\n    return `${entity.name}_attributes`\n  }\n\n  private buildFormName(resourceType: string, formType: string = 'edit') {\n    return `${resourceType}.${formType}`\n  }\n}\n","import { Injectable } from '@angular/core'\n\nimport {\n  iEntity,\n} from '../../../../../entity/index'\n\nimport { FormControlDataFactory } from './form-control-data-factory.service'\nimport { FormControlValidatorFactory } from './form-control-validator-factory.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormItemDataFactory {\n  constructor(\n    private formControlDataFactory: FormControlDataFactory,\n    private formControlValidatorFactory: FormControlValidatorFactory,\n  ) { }\n\n  build(\n    entity: iEntity\n  ): any {\n    let factory = this.resolveParamsFactory(entity)\n    return factory.build(entity)\n  }\n\n  private resolveParamsFactory(entity: iEntity) {\n    switch(entity.type) {\n      case \"resource-attributes\": {\n        return this.formControlDataFactory\n      }\n      case \"resource-validators\": {\n        return this.formControlValidatorFactory\n      }\n      default: {\n        return this.formControlDataFactory\n      }\n    }\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport { map } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iEntity,\n} from '../../../../../entity/index'\n\nimport {\n  FormGroupDataFactory,\n  FormItemDataFactory,\n} from '../data-factories/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataFactoryResolver {\n  constructor(\n    private formGroupDataFactory: FormGroupDataFactory,\n    private formItemDataFactory: FormItemDataFactory,\n  ) {}\n\n  resolve(\n    entity: iEntity,\n  ) {\n    switch(entity.type) {\n      case \"resource-associations\": {\n        return this.formGroupDataFactory\n      }\n      case \"resource-attributes\": {\n        return this.formItemDataFactory\n      }\n      case \"resource-validators\": {\n        return this.formItemDataFactory\n      }\n      default: {\n        return this.formItemDataFactory\n      }\n    }\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport { map } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iFormMemberFactoryParams,\n} from '@ceo/shared'\n\nimport {\n  iEntity,\n} from '../../../../../entity/index'\n\nimport { DataFactoryResolver } from './data-factory-resolver.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataFactory {\n  constructor(\n    private dataFactoryResolver: DataFactoryResolver,\n  ) {}\n\n  build(\n    entity: iEntity,\n  ): Partial<iFormMemberFactoryParams> {\n    let factory = this.resolveDataFactory(entity)\n    return factory.build(entity) as Partial<iFormMemberFactoryParams>\n  }\n\n  private resolveDataFactory(\n    entity: iEntity,\n  ) {\n    return this.dataFactoryResolver.resolve(entity)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  map, filter, tap,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  EntityData,\n  iEntityCollection,\n} from '../../../../../entity/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RelationshipProvider {\n  provide$(\n    resourceConfiguration,\n    formFieldEntity,\n    relationshipName,\n  ): Observable<EntityData> {\n\n    return resourceConfiguration.relationship$(relationshipName).pipe(\n      filter((collection: iEntityCollection) => {\n\n        return this.relationshipFullyLoaded(\n          resourceConfiguration,\n          relationshipName,\n          collection\n        )\n\n      }),\n      map((collection: iEntityCollection) => {\n        return collection.invokeFilter('isForAttribute', formFieldEntity.inputName)\n      }),\n    )\n  }\n\n  private relationshipFullyLoaded(\n    resourceConfiguration,\n    relationshipName,\n    collection\n  ) {\n\n    let relationshipSize =\n      resourceConfiguration.relationshipSize(relationshipName)\n\n    return collection.length == relationshipSize\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  zip as observableZip,\n  Observable,\n} from 'rxjs'\n\nimport { first, filter, map, startWith, tap } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iEntity,\n  EntityData,\n} from '../../../../../entity/index'\n\nimport { RelationshipProvider } from './relationship-provider.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RelationshipsProvider {\n  private relationshipTypes: string[] = [\n    'resource-attributes',\n    'resource-associations',\n    'resource-validators',\n  ]\n\n  constructor(\n    private relationshipProvider: RelationshipProvider,\n  ) {}\n\n  provide$(\n    resourceConfiguration,\n    formFieldEntity,\n  ): Observable<iEntity[]> {\n\n    let provideRelationships$ = _.bind(\n      _.partial(\n        this.provideRelationship$,\n        resourceConfiguration,\n        formFieldEntity\n      ),\n      this\n    )\n\n    let relationships = _.map(this.relationshipTypes, provideRelationships$)\n\n    return observableZip(...relationships).pipe(\n      map(relationshipCollections => {\n        return _.flatMap(relationshipCollections, 'entities')\n      }),\n    )\n  }\n\n  private flattenedRelationships(collections): iEntity[] {\n    return _.flatMap(<any>_.pick(collections, 'entities'))\n  }\n\n  private provideRelationship$(\n    resourceConfiguration,\n    formFieldEntity,\n    relationshipType,\n  ): Observable<EntityData> {\n\n    return this.relationshipProvider.provide$(\n      resourceConfiguration,\n      formFieldEntity,\n      relationshipType,\n    )\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport { map } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iFormMemberFactoryParams,\n} from '@ceo/shared'\n\nimport {\n  EntityData,\n  iEntity,\n} from '../../../../../entity/index'\n\nimport {\n  RelationshipsProvider,\n  RelationshipDataFactory,\n} from '../relationships/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormMemberFactoryParamsService {\n  constructor(\n    private relationshipsProvider: RelationshipsProvider,\n    private relationshipDataFactory: RelationshipDataFactory,\n  ) {}\n\n  provide$(\n    resourceConfiguration,\n    formFieldEntity,\n  ): Observable<iFormMemberFactoryParams> {\n\n    return this.relationships$(resourceConfiguration, formFieldEntity).pipe(\n      map(relationships => {\n        return this.buildParams(relationships, formFieldEntity)\n      }),\n    )\n  }\n\n  private relationships$(\n    resourceConfiguration,\n    formFieldEntity,\n  ) {\n    return this.relationshipsProvider.provide$(\n      resourceConfiguration,\n      formFieldEntity,\n    )\n  }\n\n  private buildParams(entities, formFieldEntity): iFormMemberFactoryParams {\n    let buildEntityFormMemberParams =\n      _.bind(this.buildEntityFormMemberParams, this)\n    let entitiesParams = _.map(entities, buildEntityFormMemberParams)\n    let params = _.merge({}, ...entitiesParams)\n    return params as iFormMemberFactoryParams\n  }\n\n  private buildEntityFormMemberParams(\n    entity: iEntity,\n  ): Partial<iFormMemberFactoryParams> {\n    return this.relationshipDataFactory.build(entity)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  of as observableOf,\n  zip, combineLatest,\n  BehaviorSubject,\n} from 'rxjs'\n\nimport {\n  first, tap, take,\n  map, mergeMap, skipWhile,\n  startWith, filter,\n  share,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iFormGroup,\n  iFormMemberFactoryParams,\n  iFormMember,\n  iMap,\n  FormGroup,\n  FormMemberFactory,\n  FormFactory as BaseFormFactory,\n} from '@ceo/shared'\n\nimport {\n  iEntity,\n  iEntityCollection,\n} from '../../../../entity/index'\n\nimport {\n  iFormEntity,\n} from '../../../interfaces/index'\n\nimport {\n  FormMemberFactoryParamsService,\n} from './form-fields/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormFactory {\n  constructor(\n    private formMemberFactory: FormMemberFactory,\n    private formMemberFactoryParamsService: FormMemberFactoryParamsService,\n    private formFactory: BaseFormFactory,\n  ) {}\n\n  build$(\n    resourceConfiguration: iEntity,\n    form: iFormEntity,\n  ): BehaviorSubject<any> {\n    return this.buildFormGroup$(resourceConfiguration, form, null)\n  }\n\n  buildFormGroup$(\n    resourceConfiguration: iEntity,\n    form: iFormEntity,\n    resourceType,\n  ): BehaviorSubject<any> {\n\n    return <BehaviorSubject<any>>form.formFields$.pipe(\n      mergeMap(formFields => {\n        return this.buildFormMembersParams$(\n          resourceConfiguration,\n          formFields,\n        )\n      }),\n      map((params: iMap<iFormMemberFactoryParams>) => {\n        return this.buildFormMembers(params)\n      }),\n      map((formMembers: iMap<iFormMember>) => {\n        return this.buildForm(formMembers, resourceType)\n      }),\n    )\n  }\n\n  private buildFormMembersParams$(\n    resourceConfiguration: iEntity,\n    formFields: iEntityCollection,\n  ): Observable<iMap<iFormMemberFactoryParams>> {\n\n    let buildFormMemberParams$ = _.partial(\n      _.bind(this.buildFormMemberParams$, this),\n      resourceConfiguration\n    )\n\n    let formMemberParams$ =\n      _.map(formFields.entities, buildFormMemberParams$)\n\n    return combineLatest(...formMemberParams$).pipe(\n      map(formMembersParams => {\n        let mergedParams = _.merge({}, ...formMembersParams)\n        return mergedParams as iMap<iFormMemberFactoryParams>\n      })\n    )\n  }\n\n  private buildFormMemberParams$(\n    resourceConfiguration,\n    formFieldEntity,\n  ): Observable<iMap<iFormMemberFactoryParams>> {\n    return this.formMemberFactoryParamsService.provide$(\n      resourceConfiguration,\n      formFieldEntity,\n    ).pipe(\n      map((params: iFormMemberFactoryParams) => {\n        let pair = [formFieldEntity.inputName, params]\n        return _.fromPairs([pair]) as iMap<iFormMemberFactoryParams>\n      }),\n    )\n  }\n\n  private buildFormMembers(\n    paramsSet: iMap<iFormMemberFactoryParams>,\n  ): iMap<iFormMember> {\n\n    let buildFormMember = (params: iFormMemberFactoryParams) => {\n      return this.formMemberFactory.build(params)\n    }\n    let formMembers = _.mapValues(paramsSet, buildFormMember)\n    return formMembers\n  }\n\n  private buildForm(\n    formMembers: iMap<iFormMember>,\n    resourceType: string,\n  ) {\n\n    var formParams\n    if(resourceType) {\n      let pair = [resourceType, formMembers]\n      formParams = _.fromPairs([pair])\n    }\n    else {\n      formParams = formMembers\n    }\n\n    return this.formFactory.build(formParams)\n  }\n}\n","// Accepts:\n// resourceType 'string'\n// formName 'string'\n//\n// Returns a FormGroup\n\nimport * as _ from 'lodash'\n\nimport {\n  Observable,\n  BehaviorSubject,\n  combineLatest,\n} from 'rxjs'\n\nimport {\n  map, mergeMap,\n  filter,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  TextboxFormControl,\n  iFormControl,\n  iFormWrapper,\n} from '@ceo/shared'\n\nimport {\n  EntityData,\n  iEntity,\n  DataService,\n} from '../../entity/index'\n\nimport {\n  iFormEntity,\n  iEntityFormFactoryOpts,\n} from '../interfaces/index'\n\nimport {\n  ResourceConfigurationFormFactory,\n} from './resource-configurations/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EntityFormFactory {\n  constructor(\n    private resourceConfigurationFormFactory: ResourceConfigurationFormFactory,\n    private dataService: DataService,\n  ) {}\n\n  build$(entity: iEntity, opts: iEntityFormFactoryOpts): BehaviorSubject<iFormWrapper> {\n    let data$ = combineLatest(\n      this.resourceConfiguration$(entity),\n      this.form$(entity, opts.formName),\n    )\n\n    return <BehaviorSubject<iFormWrapper>>data$.pipe(\n      mergeMap(([rc, form]) => {\n        return this.resourceConfigurationFormFactory.build$(<iEntity>rc, <iFormEntity>form)\n      }),\n    )\n  }\n\n  private form$(entity: iEntity, formName: string): Observable<iEntity> {\n    let opts = {\n      feature: entity.feature,\n      type: 'forms',\n      id: formName,\n    }\n\n    return <Observable<iEntity>>this.loadData$(opts)\n  }\n\n  private resourceConfiguration$(entity: iEntity): Observable<EntityData> {\n    let opts = {\n      feature: entity.feature,\n      type: 'resource-configurations',\n      id: entity.type,\n    }\n\n    return <Observable<iEntity>>this.loadData$(opts)\n  }\n\n  private loadData$(opts: any): Observable<iEntity> {\n    return this.dataService.get$(opts).pipe(\n      filter(entityType => !_.isNil(entityType))\n    )\n  }\n}\n","import {\n  Observable,\n  BehaviorSubject,\n} from 'rxjs'\n\nimport {\n  mergeMap,\n  shareReplay,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iFormWrapper,\n} from '@ceo/shared'\n\nimport {\n  iEntity,\n} from '../../entity/index'\n\nimport {\n  EntityFormManager,\n} from '../classes/index'\n\nimport { EntityFormFactory } from './entity-form-factory.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EntityFormManagerFactory {\n  constructor(\n    private formFactory: EntityFormFactory,\n  ) { }\n\n  build(entity$: Observable<iEntity>, formName: string): EntityFormManager {\n    let form$ = this.buildForm$(entity$, formName).pipe(\n      shareReplay(1),\n    ) as BehaviorSubject<iFormWrapper>\n\n    return new EntityFormManager(entity$, form$)\n  }\n\n  private buildForm$(\n    entity$: Observable<iEntity>,\n    formName: string,\n  ): BehaviorSubject<iFormWrapper> {\n\n    return entity$.pipe(\n      shareReplay(1),\n      mergeMap(entity => this.buildForm(entity, formName))\n    ) as BehaviorSubject<iFormWrapper>\n  }\n\n  private buildForm(\n    entity: iEntity,\n    formName: string\n  ): BehaviorSubject<iFormWrapper> {\n    let opts = {\n      formName: formName\n    }\n    return this.formFactory.build$(entity, opts)\n  }\n}\n","import {\n  FormControlDataFactory,\n  FormControlValidatorFactory,\n  FormGroupDataFactory,\n  FormItemDataFactory,\n  DropdownFactory,\n  DropdownOptionsFactory,\n} from './index'\n\nexport const services: any[] = [\n  FormControlDataFactory,\n  FormControlValidatorFactory,\n  FormGroupDataFactory,\n  FormItemDataFactory,\n  DropdownFactory,\n  DropdownOptionsFactory,\n]\n","import {\n  FormMemberFactoryParamsService,\n} from './index'\n\n\nexport const services: any[] = [\n  FormMemberFactoryParamsService,\n]\n","import {\n  RelationshipDataFactory,\n  RelationshipDataFactoryResolver,\n  RelationshipProvider,\n  RelationshipsProvider,\n} from './index'\n\nexport const services: any[] = [\n  RelationshipDataFactory,\n  RelationshipDataFactoryResolver,\n  RelationshipProvider,\n  RelationshipsProvider,\n]\n","import {\n  ResourceConfigurationFormFactory,\n} from './index'\n\nimport { services as dataFactoriesServices } from './data-factories/services'\nimport { services as formFieldsServices }    from './form-fields/services'\nimport { services as relationshipsServices } from './relationships/services'\n\nexport const services: any[] = [\n  ResourceConfigurationFormFactory,\n  ...dataFactoriesServices,\n  ...formFieldsServices,\n  ...relationshipsServices,\n]\n","import { services as formsServices } from './forms/services'\n\nexport const services: any[] = [\n  ...formsServices,\n]\n","import {\n  EntityFormFactory,\n  EntityFormManagerFactory,\n} from './public-api'\n\nimport { services as resourceConfigurationServices } from './resource-configurations/services'\n\nexport const services: any[] = [\n  EntityFormFactory,\n  EntityFormManagerFactory,\n  ...resourceConfigurationServices,\n]\n","import { NgModule } from '@angular/core'\n\nimport { CeoFormsModule } from '@ceo/shared'\n\nimport { services }     from './services/services'\n\n@NgModule({\n  imports: [\n    CeoFormsModule,\n  ],\n  declarations: [],\n  providers: [\n    ...services,\n  ]\n})\nexport class CeoEntityFormsModule { }\n"],"names":["tslib_1.__extends","_.get","_.compact","_.keys","_.partial","_.reduce","defaults","_.pick","_.join","_.omit","_.without","_.extend","_.map","_.flatten","EntityActionsMap","_.isArray","_.head","_.sortBy","_.filter","filter","_.isNil","_.find","_.has","_.includes","_.toString","_.every","_.lowerCase","_.isEmpty","_.merge","ngrxCreateEntityAdapter","_.bind","map","_.isFunction","_.defaults","_.clone","ofType","_.assign","camelCase","_.split","find","buildFeatureSelector","_.mapValues","_.set","_.intersection","EntitySelectorNameService","EntitySelectorProvider","EntitySelectorService","actionType","EntityActions.Add","EntityActions.Delete","EntityActions.Load","EntityActions.Update","clone","services","EntityAttributeBuilder","JsonApiEntityAttributeBuilder","tslib_1.__decorate","_.pickBy","_.values","_.drop","_.last","_.dropRight","_.isEqual","FeatureActions.SetPrimaryEntityIdentifier","FeatureActions.AddFeature","observableOf","FeatureActions.SetPrimaryEntity","FeatureActions.SelectPrimaryEntity","_.cloneDeep","FeatureActions.RegisterFeature","EntityActions.LoadSeedData","EntityActions.AsyncSuccess","EntityActions.DeleteSuccess","EntityActions.Init","actions","EntityActions.AddStoreEntities","EntityActions.SetScopeEntities","sliceActions","EntityDataService","attributeBuilders.services","selectors.services","_.startsWith","reducer","initialState","buildEntityRelationship","NgValidators","SelectFactory","observableZip","_.flatMap","RelationshipDataFactory","FormFactory","_.fromPairs","BaseFormFactory","ResourceConfigurationFormFactory","RelationshipDataFactoryResolver","dataFactoriesServices","formFieldsServices","relationshipsServices","formsServices","resourceConfigurationServices"],"mappings":"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"}
