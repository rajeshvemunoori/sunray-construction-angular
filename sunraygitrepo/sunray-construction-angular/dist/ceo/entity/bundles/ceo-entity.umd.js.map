{"version":3,"file":"ceo-entity.umd.js.map","sources":["node_modules/tslib/tslib.es6.js","ng://@ceo/entity/lib/entity/classes/entity/entity.actions.ts","ng://@ceo/entity/lib/entity/classes/entity/entity.action-classes.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-scope-selectors.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-entity-type-selectors.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/action-type.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/add-many.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/add-one.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/remove-many.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/remove-one.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/set-scope-ids.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/update-many.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/update-one.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/reducer.ts","ng://@ceo/entity/lib/entity/classes/entity/entity.collection.ts","ng://@ceo/entity/lib/entity/classes/entity/entity.adapter.ts","ng://@ceo/entity/lib/entity/classes/entity/entity-adapter.factory.ts","ng://@ceo/entity/lib/entity/classes/entity/entity-type.factory.ts","ng://@ceo/entity/lib/entity/classes/entity/entity.config.ts","ng://@ceo/entity/lib/entity/classes/entity/entity.effects-config.ts","ng://@ceo/entity/lib/entity/classes/entity/entities/json-api.entity.ts","ng://@ceo/entity/lib/entity/classes/entity/entities/resource-association.entity.ts","ng://@ceo/entity/lib/entity/classes/entity/entities/resource-attribute.entity.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-relationship-properties.ts","ng://@ceo/entity/lib/entity/classes/entity/entities/resource-configuration.entity.ts","ng://@ceo/entity/lib/entity/classes/entity/entities/resource-validator.entity.ts","ng://@ceo/entity/lib/entity/classes/feature/feature.config.ts","ng://@ceo/entity/lib/entity/interfaces/entity/entity.ts","ng://@ceo/entity/lib/entity/interfaces/selectors/selector-types.ts","ng://@ceo/entity/lib/entity/services/entity-cloner.service.ts","ng://@ceo/entity/lib/entity/services/selectors/selector-name.service.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-entity-selectors.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-slice-selector.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-entity-type-slice-selector.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-root-selector.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-feature-selector.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-filter-selector.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-find-selector.ts","ng://@ceo/entity/lib/entity/state/feature/selectors.ts","ng://@ceo/entity/lib/entity/services/selectors/selector.service.ts","ng://@ceo/entity/lib/entity/services/selectors/selector-provider.service.ts","ng://@ceo/entity/lib/entity/services/selectors/index.ts","ng://@ceo/entity/lib/entity/services/entity-relationship-provider.service.ts","ng://@ceo/entity/lib/entity/services/entity-type-provider.service.ts","ng://@ceo/entity/lib/entity/services/entity-factory.service.ts","ng://@ceo/entity/lib/entity/services/data.service.ts","ng://@ceo/entity/lib/entity/services/attribute-builders/attribute-builder.service.ts","ng://@ceo/entity/lib/entity/services/attribute-builders/json-api-attribute-builder.service.ts","ng://@ceo/entity/lib/entity/services/attribute-builders/index.ts","ng://@ceo/entity/lib/entity/services/entity.service.ts","ng://@ceo/entity/lib/entity/state/config/actions.ts","ng://@ceo/entity/lib/entity/state/config/effects.ts","ng://@ceo/entity/lib/entity/state/config/initial-state.ts","ng://@ceo/entity/lib/entity/state/config/reducer.ts","ng://@ceo/entity/lib/entity/state/config/selectors.ts","ng://@ceo/entity/lib/entity/state/feature/actions/action-types.ts","ng://@ceo/entity/lib/entity/state/feature/actions/actions.ts","ng://@ceo/entity/lib/entity/services/route-entity-type-provider.service.ts","ng://@ceo/entity/lib/entity/services/resource-identifier.service.ts","ng://@ceo/entity/lib/entity/state/feature/effects.ts","ng://@ceo/entity/lib/entity/state/feature/initial-state.ts","ng://@ceo/entity/lib/entity/state/feature/reducer.ts","ng://@ceo/entity/lib/entity/state/state.ts","ng://@ceo/entity/lib/entity/util/tokens.ts","ng://@ceo/entity/lib/entity/services/entity.effects.ts","ng://@ceo/entity/lib/entity/services/public_api.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-effects.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-configs.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-initial-state.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-service.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-type-provider.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-types.ts","ng://@ceo/entity/lib/entity/util/builders/feature/build-feature-config.ts","ng://@ceo/entity/lib/entity/util/builders/feature/build-initial-state.ts","ng://@ceo/entity/lib/entity/util/builders/feature/build-reducer.ts","ng://@ceo/entity/lib/entity/util/providers.ts","ng://@ceo/entity/lib/entity/entity.module.ts","ng://@ceo/entity/lib/forms/classes/entity-form-manager.ts","ng://@ceo/entity/lib/forms/entities/form.entity.ts","ng://@ceo/entity/lib/forms/entities/form-field.entity.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/dropdown-options-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/resource-list.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/dropdown-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/form-control-data-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/form-control-validator-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/form-group-data-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/form-item-data-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/relationships/data-factory-resolver.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/relationships/data-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/relationships/relationship-provider.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/relationships/relationships-provider.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/form-fields/form-member-factory-params.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/form-factory.service.ts","ng://@ceo/entity/lib/forms/services/entity-form-factory.service.ts","ng://@ceo/entity/lib/forms/services/entity-form-manager-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/services.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/form-fields/services.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/relationships/services.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/services.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/services.ts","ng://@ceo/entity/lib/forms/services/services.ts","ng://@ceo/entity/lib/forms/forms.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { sliceActions } from '@ceo/state'\n\nexport const actions = {\n  ...sliceActions,\n  ADD: 'ADD',\n  ADD_OPTIMISTICALLY: 'ADD_OPTIMISTICALLY',\n  ADD_SUCCESS: 'ADD_SUCCESS',\n  ADD_TEMP: 'ADD_TEMP', // Use for adding to a blank to the store so users can fill in before submitting to server\n  ADD_UPDATE_FAIL: 'ADD_UPDATE_FAIL',\n  UPDATE_SUCCESS: 'UPDATE_SUCCESS',\n  DELETE: 'DELETE',\n  DELETE_FAIL: 'DELETE_FAIL',\n  DELETE_SUCCESS: 'DELETE_SUCCESS',\n  DELETE_TEMP: 'DELETE_TEMP',\n  ASYNC: 'ASYNC',\n  ASYNC_FAIL: 'ASYNC_FAIL',\n  ASYNC_SUCCESS: 'ASYNC_SUCCESS',\n  ASYNC_DATA_READY: 'ASYNC_DATA_READY',\n  PATCH: 'PATCH',\n  PATCH_EACH: 'PATCH_EACH',\n  PATCH_FAIL: 'PATCH_FAIL',\n  PATCH_SUCCESS: 'PATCH_SUCCESS',\n  RESTORE_TEMP: 'RESTORE_TEMP',\n  SELECT: 'SELECT',\n  SELECT_NEXT: 'SELECT_NEXT',\n  UNLOAD: 'UNLOAD',\n  ADD_STORE_ENTITIES: \"ADD_STORE_ENTITIES\",\n  SET_SELECTED: \"SET_SELECTED\",\n  LOAD_SEED_DATA: 'LOAD_SEED_DATA',\n  SET_PRIMARY_ENTITY: 'SET_PRIMARY_ENTITY',\n  SET_SCOPE_ENTITIES: 'SET_SCOPE_ENTITIES',\n};\n","import { Action } from '@ngrx/store'\n\nimport {\n  PayloadAction,\n  SliceAction,\n  typeFor,\n} from '@ceo/state'\n\nimport {\n  iApiResponse,\n  iEntity,\n} from '../../interfaces/index'\n\nimport { actions } from './entity.actions'\n\nexport const TEMP = 'TEMP_ID_VALUE'\n\nexport class EntityAction<T extends iEntity>\n  extends SliceAction implements PayloadAction {\n\n  constructor(public slice: any, public payload: T) {\n    super(slice, payload)\n  }\n}\n\nexport class Init<T extends iEntity>\n  extends SliceAction implements PayloadAction {\n\n  protected actionName: string = actions.INIT\n}\n\n// Action to add a new entity on the server.\nexport class Add<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ADD\n\n  constructor(public slice: any, public payload: any = {}) {\n    super(slice, Object.assign({}, { dirty: true }, payload))\n  }\n\n  // If the payload contains the temp ID value, that means\n  // we want the server to assign and ID value, so drop the ID field\n  payloadForPost() {\n    const newPayload = Object.assign({}, this.payload)\n    if (this.payload.id === TEMP) {\n      delete newPayload.id\n      delete newPayload.dirty\n    }\n\n    return newPayload\n  }\n}\n\n// Action to send array of entities to the store.\nexport class AddStoreEntities<T extends iEntity>\n  extends SliceAction {\n\n  protected actionName: string = actions.ADD_STORE_ENTITIES\n\n  constructor(public slice: string, public payload: T[]) {\n    super(slice, payload)\n  }\n}\n\n// Action to load data from the server\nexport class Load<T extends iEntity>\n  extends SliceAction implements PayloadAction {\n\n  protected actionName: string = actions.LOAD\n\n  constructor(public slice: string, public payload: any = null) {\n    super(slice, payload)\n  }\n}\n\n// Action to capture successful response from the server.\nexport class AsyncSuccess<T extends iEntity>\n  extends SliceAction {\n\n  protected actionName: string = actions.ASYNC_SUCCESS\n\n  constructor(public slice: string, public payload: iApiResponse) {\n    super(slice, payload)\n  }\n}\n\n\nexport class LoadSeedData<T extends iEntity>\n  extends SliceAction implements PayloadAction {\n\n  protected actionName: string = actions.LOAD_SEED_DATA\n\n  constructor(public slice: string, public payload: any = null) {\n    super(slice, payload)\n  }\n}\n\n///////////////////////////////////////\n///////////////////////////////////////\n// Not being used at this time: ///////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n\nexport class Initialized<T extends iEntity>\n  extends SliceAction implements PayloadAction {\n\n  protected actionName: string = actions.INITIALIZED\n}\n\nexport class Patch<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.PATCH\n}\n\n/**\n * Create a temporary entity to go into the store but not to the server or be\n * validated. If the id of the payload is missing or null\n * then use the TEMP value. Otherwise use the payload.id value\n*/\nexport class AddTemp<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ADD_TEMP\n\n  constructor(public slice: any, payload: any = {}) {\n    super(slice, Object.assign({}, payload, (payload.id ? {} : { id: TEMP })))\n  }\n}\n\n/**\n* Use this action to first put in the store and then\n* submit to the server\n*/\nexport class AddOptimistically<T extends iEntity> extends Add<T> {\n  protected actionName: string = actions.ADD_OPTIMISTICALLY\n\n  constructor(public slice: any, payload: any = {}) {\n    super(slice, Object.assign({}, { id: TEMP }, payload))\n  }\n}\n\nexport class AddSuccess<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ADD_SUCCESS\n}\n\nexport class AddUpdateFail<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ADD_UPDATE_FAIL\n\n  constructor(public slice: any, payload: any = {}) {\n    super(slice, Object.assign({}, payload, (payload.id ? {} : { id: TEMP })))\n  }\n}\n\nexport class Delete<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.DELETE\n\n  constructor(public slice: string, public payload: any = null) {\n    super(slice, payload)\n  }\n}\n\nexport class DeleteFail<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.DELETE_FAIL\n}\n\nexport class DeleteSuccess<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.DELETE_SUCCESS\n}\n\nexport class LoadFail<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.LOAD_FAIL\n}\n\nexport class Async<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ASYNC\n}\n\nexport class AsyncFail<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ASYNC_FAIL\n}\n\nexport class AsyncDataReady<T extends iEntity> extends SliceAction {\n  protected actionName: string = actions.ASYNC_DATA_READY\n\n  constructor(public slice: string, public payload: T[]) {\n    super(slice, payload)\n  }\n}\n\n// this makes Effect loadFromRemote$ work\nexport class LoadSuccess<T extends iEntity> extends AsyncSuccess<T> {\n  protected actionName: string = actions.LOAD_SUCCESS\n}\n\nexport class PatchSuccess<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.PATCH_SUCCESS\n}\n\nexport class PatchFail<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.PATCH_FAIL\n}\n\nexport class Update<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.UPDATE\n}\n\nexport class PatchEach<T extends iEntity> extends SliceAction {\n  protected actionName: string = actions.PATCH_EACH\n}\n\nexport class UpdateSuccess<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.UPDATE_SUCCESS\n}\n\nexport class Select<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.SELECT\n}\n\nexport class SelectNext<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.SELECT_NEXT\n\n  constructor(public slice: any) {\n    super(slice, null)\n  }\n}\n\nexport class Unload<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.UNLOAD\n\n  constructor(public slice: any) {\n    super(slice, null)\n  }\n}\n\nexport class SetSelected<T extends iEntity> extends SliceAction {\n  protected actionName: string = actions.SET_SELECTED\n\n  constructor(public slice: string, public payload: any) {\n    super(slice, payload)\n  }\n}\n\nexport class SetPrimaryEntity<T extends iEntity> extends SliceAction {\n  protected actionName: string = actions.SET_PRIMARY_ENTITY \n  constructor(public slice: string, public payload: any) {\n    super(slice, payload)\n  }\n}\n\nexport class SetScopeEntities<T extends iEntity> extends SliceAction {\n  protected actionName: string = actions.SET_SCOPE_ENTITIES\n  constructor(public slice: string, public payload: any) {\n    super(slice, payload)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  createSelector,\n} from '@ngrx/store'\n\nimport {\n  camelCase,\n} from '@ceo/core'\n\n\nimport {\n  iEntity,\n  iEntityAdapter,\n} from '../../../interfaces/index'\n\nexport const buildScopeSelector = (\n  entityAdapter,\n  selectors,\n  scopeName,\n) => {\n\n  var collectionType = entityAdapter.entityCollectionType\n\n  let selectScopeEntities = (scopes, entities) => {\n    let ids = _.get(scopes, [scopeName, 'ids'], [])\n    let scopeEntities =\n      _.compact(ids.map(function (id) { return entities[id] }))\n    let collection = new collectionType(scopeEntities)\n    return collection\n  }\n\n  let selectorName = `select.scope.${camelCase(scopeName)}`\n  selectors[selectorName] = createSelector(\n    selectors.selectScopes,\n    selectors.selectEntities,\n    selectScopeEntities\n  )\n\n  return selectors\n}\n\n// Get all the Selectors internal to an entity type\nexport const buildScopeSelectors = (entityAdapter, selectors) => {\n  let scopeNames = _.keys(entityAdapter.scopes)\n  let buildSelector =\n    _.partial(buildScopeSelector, entityAdapter)\n\n  return _.reduce(scopeNames, buildSelector, selectors)\n}\n","/*\nngrx selectors\n  selectIds\n  selectEntities\n  selectTotal\n\ncustom selectors \n  selectAll\n  selectSelectedEntity\n  selectScopes\n*/\n\nimport * as _ from 'lodash'\n\nimport {\n  iEntityState,\n  iEntity,\n} from '../../../interfaces/index'\n\nimport {\n  buildScopeSelectors\n} from './build-scope-selectors'\n\nexport const buildEntityTypeSelectors = (\n  entityAdapter,\n) => {\n\n  var collectionType = entityAdapter.entityCollectionType\n\n  var selectors = entityAdapter.ngrxEntityAdapter.getSelectors()\n\n  let defaults = ['selectIds', 'selectEntities', 'selectTotal']\n  let decoratedSelectors = _.pick(selectors, defaults)\n  \n  // Wrap the selectAll selector in order to return an\n  // entity collection object\n  decoratedSelectors.selectAll = (state: any) => {\n    let entities = selectors.selectAll(state) \n    let collection = new collectionType(entities)\n    return collection\n  }\n\n  decoratedSelectors.selectSelectedEntity = (\n    state: iEntityState<iEntity>\n  ): iEntity => {\n\n    return state.entities[state.selectedEntityId]\n  }\n\n  decoratedSelectors.selectScopes = (state) => { return state.scopes }\n\n  buildScopeSelectors(entityAdapter, decoratedSelectors)\n\n  return decoratedSelectors\n\n}\n","import * as _ from 'lodash'\n\nimport { typeFor }      from '@ceo/state'\n\n// get theType\nexport function actionType(featureName, sliceName, actionName) {\n  let fullSliceName = _.join([featureName, sliceName], \".\")\n  return typeFor(fullSliceName, actionName)\n}\n","export function addMany(\n  entities: any,\n  adapter: any,\n  state: any\n) {\n  return adapter.addMany(entities, state)\n}\n","import * as _ from 'lodash'\n\n// addOne\nexport function addOne(\n  entity: any,\n  adapter: any,\n  state: any\n) {\n\n  // Remove the entity if already existing\n  let entityId = entity.id\n  let newEntities = _.omit(state.entities, entityId)\n  let newIds = _.without(state.ids, entityId)\n  state = _.extend(state, {ids: newIds, entities: newEntities})\n\n  return adapter.addOne(entity, state)\n}\n","import * as _ from 'lodash'\n\nimport { EntityAction } from '../../entity.action-classes'\n\nexport function removeMany(\n  action: EntityAction<any>,\n  adapter: any,\n  state: any\n) {\n\n  let payloadIds = _.map(\n    _.flatten([action.payload]),\n    'id'\n  )\n  return adapter.removeMany(payloadIds, state)\n}\n","import { EntityAction } from '../../entity.action-classes'\n\n// removeOne\nexport function removeOne(\n  action: EntityAction<any>,\n  adapter: any,\n  state: any\n) {\n  return adapter.removeOne(action.payload.id, state)\n}\n","import * as _ from 'lodash'\n\nimport { EntityAction } from '../../entity.action-classes'\n\nexport function setScopeIds(\n  action: EntityAction<any>,\n  adapter: any,\n  state: any\n) {\n\n  let entities = action.payload.entities\n  let scopeName = action.payload.scope\n\n\n  let ids = _.map(entities, 'id')\n\n  let stateDelta = {\n    scopes: {\n    }\n  }\n  stateDelta.scopes[scopeName] = {\n    ids: ids\n  }\n\n\n  return Object.assign({}, state, stateDelta)\n}\n","import * as _ from 'lodash'\n\nimport { EntityAction } from '../../entity.action-classes'\n\n// updateMany\nexport function updateMany(\n  action: EntityAction<any>,\n  adapter: any,\n  state: any\n) {\n  let payload = _.flatten([action.payload])\n  let payloadIds = _.map(\n    _.flatten([payload]),\n    'id'\n  )\n  return adapter.upsertMany(payload, state)\n}\n","import { EntityAction } from '../../entity.action-classes'\n\n// updateOne\nexport function updateOne(\n  action: EntityAction<any>,\n  adapter: any,\n  state: any\n) {\n  return adapter.updateOne(action.payload, state)\n}\n","import * as _ from 'lodash'\n\nimport { EntityAction }                 from '../entity.action-classes'\nimport { actions as EntityActionsMap }  from '../entity.actions'\n\nimport {\n  actionType,\n} from './action-type'\n\nimport {\n  addMany, addOne, removeMany, removeOne,\n  setScopeIds, updateMany, updateOne,\n} from './functions/index'\n\nexport function entityReducer(\n  action: EntityAction<any>,\n  featureName: string,\n  sliceName: string,\n  adapter: any,\n  state: any,\n) {\n\n  switch (action.type) {\n    // Handle add store entities\n    case actionType(featureName, sliceName, EntityActionsMap.ADD_STORE_ENTITIES):\n\n      let entityData = action.payload\n      \n      if(_.isArray(entityData) && entityData.length == 1) {\n        // Single item\n        entityData = _.head(entityData)\n      }\n\n      if(_.isArray(entityData)) {\n        return addMany(entityData, adapter, state)\n      }\n      else {\n        return addOne(entityData, adapter, state)\n      }\n    // Handle set selected store entity\n    case actionType(featureName, sliceName, EntityActionsMap.SET_PRIMARY_ENTITY):\n      if (state.selectedEntityId == action.payload.entity.id) {\n        return state\n      }\n      else {\n        let stateDelta = {\n          selectedEntityId: action.payload.entity.id\n        }\n        return Object.assign({}, state, stateDelta)\n      }\n    case actionType(featureName, sliceName, EntityActionsMap.SET_SELECTED):\n      if (state.selectedEntityId == action.payload.entity.id) {\n        return state\n      }\n      else {\n        let stateDelta = {\n          selectedEntityId: action.payload.entity.id\n        }\n        return Object.assign({}, state, stateDelta)\n      }\n    // Handle set selected store entity\n    case actionType(featureName, sliceName, EntityActionsMap.UPDATE_SUCCESS):\n      if(Array.isArray(action.payload)) {\n        return updateMany(action, adapter, state)\n      }\n      else {\n        return updateOne(action, adapter, state)\n      }\n    // Handle delete store entities\n    case actionType(featureName, sliceName, EntityActionsMap.DELETE_SUCCESS):\n      if(Array.isArray(action.payload)) {\n        return removeMany(action, adapter, state)\n      }\n      else {\n        return removeOne(action, adapter, state)\n      }\n    // Handle set scope entities\n    case actionType(featureName, sliceName, EntityActionsMap.SET_SCOPE_ENTITIES):\n      return setScopeIds(action, adapter, state)\n    // Return the state\n    default:\n      return state\n    }\n}\n\n","import * as _ from 'lodash'\n\nimport { Observable } from 'rxjs'\n\nimport {\n  EntityIdentifier,\n  iEntity,\n  iEntityCollection,\n} from '../../interfaces'\n\n\nexport class EntityCollection implements iEntityCollection {\n  public length: number\n\n  constructor(\n    public entities: iEntity[] = []\n  ) {\n    this.length = entities.length\n  }\n\n  none() {\n    return this.buildCollection([])\n  }\n\n  sort(attributes: string[] | string): iEntityCollection {\n    attributes = _.flatten([attributes])\n\n    let entities = _.sortBy(this.entities, attributes)\n    return this.buildCollection(entities)\n  }\n\n  filter(...args): iEntityCollection {\n    // @ts-ignore:\n    let entities = this.entities.filter(...args)\n    return this.buildCollection(entities)\n  }\n\n  invokeFilter(methodName: string, attribute): iEntityCollection {\n    let filterByMethod = (entity) => {\n      if(entity[methodName]) {\n        return entity[methodName](attribute)\n      }\n      else {\n        return false\n      }\n    }\n    //let filterPartial = _.partialRight(filterByMethod, ...args)\n    let entities = _.filter(this.entities, filterByMethod)\n    return this.buildCollection(entities)\n  }\n\n  // TODO: deprecate this method\n  filterByInvoke(methodName: string, attribute): iEntityCollection {\n    return this.invokeFilter(methodName, attribute)\n  }\n\n  filterByAttrs(filters: any): iEntityCollection {\n    let runFilter = (entityCollection, filter, attr) => {\n      return entityCollection.filterByAttr(attr, filter)\n    }\n    let value = _.reduce(filters, runFilter, this)\n    return value\n  }\n\n  find(id: EntityIdentifier): iEntity {\n    let findEntity = (entity) => {\n      var defaults = [\"id\"]\n      var idAttributes =\n        _.get(entity.constructor, 'config.primaryKeys', defaults)\n      let hasId = (attr) => {\n        return entity[attr] == id\n      }\n      return ! _.isNil(_.find(idAttributes, hasId))\n    }\n\n    return _.find(this.entities, findEntity)\n  }\n\n  findByAttr(attr: string, value: any): iEntity {\n    function findEntity(entity) {\n      return entity[attr] == value\n    }\n\n    return _.find(this.entities, findEntity)\n  }\n\n  map(mapFn): any[] {\n    return _.map(this.entities, mapFn)\n  }\n\n  slice(...args): iEntityCollection {\n    let entities = this.entities.slice(...args)\n    return this.buildCollection(entities)\n  }\n\n  where(conditions: any): iEntityCollection {\n    var filterByCondition = (entity, value, key) => {\n      // When the entity does not have the attribute at all\n      if(!_.has(entity, key)) {\n        return false\n      }\n\n      let entityValue = entity[key]\n\n      // Case 1: the attribute in the entity is an array\n      if(entityValue instanceof Array) {\n        return _.includes(\n          _.map(entityValue, _.toString),\n          _.toString(value)\n        )\n      }\n\n      // Case 2: the condition is an array\n      if(value instanceof Array) {\n        return _.includes(\n          _.map(value, _.toString),\n          _.toString(entityValue)\n        )\n      }\n\n      return _.toString(entityValue) == _.toString(value)\n    }\n\n    var filterEntity = (entity) => {\n      return _.every(conditions, _.partial(filterByCondition, entity))\n    }\n\n    let entities = _.filter(this.entities, filterEntity)\n    return this.buildCollection(entities)\n  }\n\n  stringSearch(conditions: any): iEntityCollection {\n    let runFilter = (entityCollection, searchTerm, attr) => {\n      return entityCollection.stringSearchByAttr(attr, searchTerm)\n    }\n    return _.reduce(conditions, runFilter, this)\n  }\n\n  search(conditions: any): iEntityCollection {\n    var filterByCondition = (entity, value, key) => {\n      let entityValue = entity.attributes[key]\n\n      if(value instanceof Array) {\n        return _.includes(value, entityValue)\n      }\n      else {\n        return _.includes(entityValue, value)\n      }\n    }\n\n    var filterEntity = (entity) => {\n      return _.every(conditions, _.partial(filterByCondition, entity))\n    }\n\n    let entities = _.filter(this.entities, filterEntity)\n    return this.buildCollection(entities)\n  }\n\n  stringSearchByAttr(attr: string, searchTerm: any): iEntityCollection {\n    let attrFilter = (entity) => {\n      if(! searchTerm) {\n        return true\n      }\n\n      let entityValue = entity[attr]\n      let entityWildcardValue = _.lowerCase(entityValue)\n      let searchTermWildcardValue = _.lowerCase(searchTerm)\n      return _.includes(entityWildcardValue, searchTermWildcardValue)\n    }\n    return this.filter(attrFilter)\n  }\n\n  isEmpty(): boolean {\n    return _.isEmpty(this.entities)\n  }\n\n  isNotEmpty(): boolean {\n    return !this.isEmpty()\n  }\n\n  hasEntities(): boolean {\n    return this.isNotEmpty()\n  }\n\n  private filterByAttr(attr: string, filter: any): any {\n    let attrFilter = (entity) => {\n      let value = entity.attributes[attr]\n      return filter(value)\n    }\n    return this.filter(attrFilter)\n  }\n\n  private buildCollection(entities) {\n    let collectionType: any = this.constructor\n    return new collectionType(entities)\n  }\n\n  // Create an iterator for EntityTypeCollection\n  // Allows us to use the collections in angular directives\n  // (i.e. ngFor, etc)\n  [Symbol.iterator]() {\n    let current = 0\n    let entities = this.entities\n    return  {\n      next: function () {\n        let noEntities = _.isEmpty(entities)\n        let value = noEntities ? null : entities[current++]\n        let done = noEntities ? true : current > entities.length\n        return {\n          value: value,\n          done: done\n        }\n      }\n    }\n  }\n}\n","import * as _ from 'lodash'\n\nimport { createEntityAdapter as ngrxCreateEntityAdapter } from '@ngrx/entity'\n\nimport {\n  iEntityState,\n  iEntity,\n  iEntityAdapter,\n} from '../../interfaces/index'\n\nimport { \n  buildEntityTypeSelectors,\n} from '../../util/builders/selectors/build-entity-type-selectors'\n\nimport { entityReducer }         from './reducer/index'\nimport { EntityCollection }      from './entity.collection'\n\n\nexport class EntityAdapter implements iEntityAdapter {\n  featureName: any\n  entityType: any\n  entityConfig: any\n  entityName: any\n  sliceName: any\n\n  private _initialState: any\n  private _ngrxEntityAdapter: any\n  private _selectors: any\n  private _stateInterface: any\n  private _reducer: any\n  private _entityCollectionType: any\n\n  constructor(entityOpts: any) {\n    this.featureName = entityOpts.featureName\n    this.entityType = entityOpts.entityType\n    this.entityConfig = this.entityType.config\n\n    this.entityName = this.entityType.sliceName\n    this.sliceName = this.entityName\n  }\n\n\n  get entityCollectionType() {\n    return EntityCollection\n  }\n\n  get reducer() {\n    return this.getterWithBuilder('_reducer', 'buildReducer')\n  }\n\n  get selectors() {\n    return this.getterWithBuilder('_selectors', 'buildSelectors')\n  }\n\n  get initialState() {\n    return this.getterWithBuilder('_initialState', 'buildInitialState')\n  }\n\n  get ngrxEntityAdapter() {\n    if(! this._ngrxEntityAdapter) {\n      this._ngrxEntityAdapter = this.buildNgrxEntityAdapter()\n    }\n\n    return this._ngrxEntityAdapter\n  }\n\n  get scopes() {\n    let defaultScopes = {}\n    return _.get(this.entityConfig, 'initialState.scopes', defaultScopes)\n  }\n\n  private buildReducer() {\n    var adapter = this.ngrxEntityAdapter\n    var featureName = this.featureEntitySliceName(this.featureName)\n    var sliceName = this.sliceName\n    var initialState = this.initialState\n    var customReducer = this.entityConfig.reducer\n\n    let baseReducer = (state: iEntityState<iEntity> = initialState, action: any) => {\n\n      if(customReducer) {\n        state = customReducer(state, action)\n      }\n\n      state = entityReducer(\n        action, \n        featureName,\n        sliceName,\n        adapter,\n        state,\n      )\n\n      return state\n    }\n\n    return baseReducer\n  }\n  \n  private featureEntitySliceName(featureName) {\n    return _.join([featureName, 'entities'], '.')\n  }\n\n  private buildSelectors() {\n    return buildEntityTypeSelectors(this)\n  } \n\n  private buildInitialState() {\n    let entityTypeInitialState = {\n      selectedEntityId: null,\n    }\n\n    let initialState = _.merge(\n      entityTypeInitialState,\n      this.entityType.initialState\n    )\n\n    return this.ngrxEntityAdapter.getInitialState(initialState)\n  }\n\n  private buildNgrxEntityAdapter() {\n    return ngrxCreateEntityAdapter<any>() \n  }\n\n  private getterWithBuilder(propName, builder) {\n    if(!this[propName]) {\n      this[propName] = this[builder]()\n    }\n\n    return this[propName]\n  }\n\n}\n","import * as _ from 'lodash'\n\nimport { EntityAdapter }      from './entity.adapter'\n\nexport class EntityAdapterFactory {\n  _adapters: any[]\n\n  constructor(\n    private _featureConfig,\n  ) {}\n\n  get featureConfig(): any {\n    return this._featureConfig\n  }\n\n  get adapters(): any[] {\n    if(!this._adapters) {\n      this._adapters = this.buildAdapters()\n    }\n    return this._adapters\n  }\n\n  private buildAdapters() {\n    return _.map(\n      this.featureConfig.entityTypes,\n      _.bind(this.buildAdapter, this)\n    )\n  }\n\n  private buildAdapter(entityType) {\n    let opts = {\n      featureName: this.featureConfig.name,\n      entityType: entityType,\n    }\n    return new EntityAdapter(opts)\n  }\n}\n","import * as _ from 'lodash'\n\nimport { classify } from '@ceo/core'\n\nimport {\n  iFeatureConfig,\n  iEntityConstructor,\n  iEntityTypeMap,\n  iEntity,\n  iEntityConfig,\n  EntityTypeIdentifier,\n} from '../../interfaces/index'\n\nexport class EntityTypeFactory {\n  baseEntityType: iEntityConstructor\n\n  constructor(\n    baseEntityType: iEntityConstructor\n  ) {\n    this.baseEntityType = baseEntityType\n  }\n\n  build(\n    entityConfig: iEntityConfig,\n  ): iEntityTypeMap {\n\n    let entityTypeName = classify(entityConfig.name)\n    let entityType = this.buildEntityType(entityConfig)\n\n    let map = {}\n    let identifier = <EntityTypeIdentifier>entityTypeName\n    map[identifier] = entityType\n    return <iEntityTypeMap>map\n  }\n\n  private buildEntityType(\n    entityConfig: iEntityConfig,\n  ) {\n\n    var entityType\n    if(entityConfig.entityType) {\n      entityType = entityConfig.entityType\n    }\n    else {\n      entityType = this.baseEntityType\n    }\n\n    class Entity extends entityType {\n      static _sliceName: string = entityConfig.name\n      static config: any = entityConfig\n    }\n\n    return Entity\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  iEntityConfig,\n  EntityConfigUrl,\n  EntityConfigUrlFragment,\n  iEntity,\n  iEntityConstructor,\n  iResourceIdentifier,\n} from '../../interfaces/index'\n\nexport class EntityConfig implements iEntityConfig {\n  private _name: string\n  private _entityType: iEntityConstructor\n\n  public type: string\n  public url?: EntityConfigUrlFragment\n  public primaryKeys?: any[] = ['id']\n  public seed: iResourceIdentifier[] = []\n  public apiConfig: any\n  public reducer: any\n  public initialState: any = {}\n\n  public isSeed?: boolean\n\n  public constructor(init?: Partial<EntityConfig>) {\n    Object.assign(this, init)\n  }\n\n  get name(): string {\n    if(! this._name) {\n      this._name = this.type\n    }\n\n    return this._name\n  }\n\n  set name(value: string) {\n    this._name = value\n  }\n\n  getName(): string {\n    return this.type\n  }\n\n  hasResourceType(resourceIdentifier: any = {}): boolean {\n    return this.type == resourceIdentifier.type\n  }\n\n  ofType(entityData: iEntity): boolean {\n    return this.type == entityData.type\n  }\n\n  isCustom() {\n    return _.has(this, \"primaryKeys\")\n  }\n\n  urlFragment(opts = {}): EntityConfigUrlFragment {\n    if(_.isFunction(this.url)) {\n      return this.url(opts)\n    }\n    else {\n      return this.url ? this.url : this.type\n    }\n  }\n\n  get entityType(): iEntityConstructor {\n    return this._entityType\n  }\n\n  set entityType(entityType: iEntityConstructor) {\n    this._entityType = entityType\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  iEntity,\n  iEntityEffectsConfigArgs,\n  iEntityEffectsConfig,\n  iEntityEffectTypes,\n} from '../../interfaces/index'\n\nexport class EntityEffectsConfig implements iEntityEffectsConfig {\n  private sliceName: string\n  private initialEntity: iEntity\n  private effectTypes: iEntityEffectTypes\n  private defaultEffectTypes: iEntityEffectTypes = {\n    init: false,\n    load: true,\n    add: true,\n    patch: true,\n    asyncSuccess: true\n  }\n\n  constructor(\n    public config: iEntityEffectsConfigArgs\n  ) {\n    this.sliceName = config.sliceName\n    this.initialEntity = config.initialEntity\n    this.effectTypes = _.merge(this.defaultEffectTypes, config.effectTypes)\n  }\n\n  public hasEffectType(effectTypeName: string) {\n    return(\n      _.has(this.effectTypes, effectTypeName)  &&\n        this.effectTypes[effectTypeName]\n    )\n  }\n\n  public getConfig(configItem: string) {\n    return this.config[configItem]\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  slugify,\n  camelCase,\n} from '@ceo/core'\n\nimport {\n  Mixin,\n  AttributeGetterSetter,\n  AttributeUpdater,\n  Memoizer,\n} from '@ceo/shared'\n\n\nimport {\n  iDataService,\n  iDataServiceOpts,\n  iEntity,\n  iEntityAttributes,\n  iEntityConfig,\n  iEntityRelationships,\n  EntityData,\n  EntityIdentifier,\n  EntityRelationshipIdentifier,\n  EntityTypeIdentifier,\n  iResourceIdentifier,\n} from '../../../interfaces/index'\n\n// @dynamic\n@Mixin([AttributeGetterSetter, AttributeUpdater, Memoizer])\nexport class JsonApiEntity implements iEntity,\n  AttributeGetterSetter, AttributeUpdater {\n\n  static _sliceName: string = ''\n  static config: any = {}\n  static defaultAttributes: any = {}\n\n  static get sliceName(): string {\n    if(this._sliceName) {\n      return this._sliceName\n    }\n\n    if(this.config) {\n      return this.config.name\n    }\n\n    return this.constructor.name\n  }\n\n  id: EntityIdentifier\n  type: EntityTypeIdentifier\n  attributes: iEntityAttributes = {}\n  relationships: iEntityRelationships\n  defaultAttributes: any = {}\n\n  private _dataService: iDataService\n\n  public constructor(\n    init?: Partial<iEntity>,\n    dataService?: iDataService,\n  ) {\n    Object.assign(this, init)\n    this._dataService = dataService\n    this.setAttributes()\n  }\n\n  setAttributes() {\n    this.attributes =\n      _.defaults(this.attributes, (<any>this.constructor).defaultAttributes)\n    this.updateAttributes(this.attributes)\n  }\n\n  getAttr(attrName: string) {\n    return this.attributes[attrName]\n  }\n\n  setAttr(attrName: string, value: any) {\n    attrName = slugify(attrName)\n    let prop = {}\n    prop[attrName] = value\n    this.updateAttributes(prop)\n  }\n\n  get dataService(): iDataService {\n    return this._dataService\n  }\n\n  set dataService(service: iDataService) {\n    this._dataService = service\n  }\n\n  get isNew(): boolean {\n    return !_.has(this, 'id')\n  }\n\n  nameStartsWith(name: string) {\n    let nameIndex = this.getAttr('name')\n      .toLowerCase()\n      .indexOf(name.toLowerCase())\n    return nameIndex === 0\n  }\n\n  getSliceName() {\n    return this.type\n  }\n\n  relationship(type) {\n    return this[type]\n  }\n\n  relationshipSize(\n    relationshipName: EntityRelationshipIdentifier,\n  ): number {\n    if(!this.hasRelationship(relationshipName)) {\n      return 0\n    }\n\n    let relationshipData = this.relationships[relationshipName].data\n    if(_.isArray(relationshipData)) {\n      return relationshipData.length\n    }\n\n    return 1\n  }\n\n  relationship$(\n    relationshipName: EntityRelationshipIdentifier,\n    opts: iDataServiceOpts = {},\n  ): Observable<EntityData> {\n    return this.dataService.relationship$(this, relationshipName, opts)\n  }\n\n  save$(\n    opts: iDataServiceOpts = {}\n  ): Observable<iEntity> {\n    let saveAction = this.isNew ? 'create$' : 'update$'\n    return this.dataService[saveAction](this.toResourceIdentifier(), opts)\n  }\n\n  private toResourceIdentifier(): any {\n    let ri = _.clone(_.pick(this, 'feature', 'type')) as any\n    ri.data = this.attributes\n    if(!this.isNew) {\n      ri.id = this.id\n    }\n    return ri\n  }\n\n  private hasRelationship(\n    relationshipName: EntityRelationshipIdentifier,\n  ): boolean {\n    return (\n      this.relationships &&\n      this.relationships[relationshipName] && \n      this.relationships[relationshipName].data\n    )\n  }\n\n\n  // Mixin methods\n  updatedKeys: string[] = []\n  updateAttributes(attributes: any): void {}\n  createAttributeSettersAndGetters(): void {}\n  createSettersAndGetters(props: any): void {}\n  createGetSet(obj, props, key: string, name: string): void {}\n  generateGetSet(props, key, name): any {}\n  setProp(props, key, value): void {}\n  getProp(props, key): any {}\n  memoized(property: string, value: any): any {}\n}\n","import { JsonApiEntity } from './json-api.entity'\n\nexport class ResourceAssociationEntity extends JsonApiEntity {\n  isForAttribute(attrName: string) {\n    return (this as any).name == attrName\n  }\n}\n","import { JsonApiEntity } from './json-api.entity'\n\nexport class ResourceAttributeEntity extends JsonApiEntity {\n  isForAttribute(attrName: string) {\n    return (this as any).name == attrName\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  camelCase,\n} from '@ceo/core'\n\nimport {\n  EntityData,\n} from '../../../interfaces/index'\n\nexport function buildEntityRelationshipProperty(\n  relationshipName,\n): (() => Observable<EntityData>) {\n\n  function relationship(): Observable<EntityData> {\n    return this.dataService.relationship$(this, relationshipName, {})\n  }\n\n  return relationship\n}\n\nexport function defineEntityRelationshipGetSet(\n  entityType,\n  relationshipName,\n): void {\n\n  let propName = `${camelCase(relationshipName)}$`\n  let privatePropName = `_${propName}`\n\n  let getter = buildEntityRelationshipProperty(relationshipName)\n\n  console.log(\"building get set for \" + entityType.name + \" : \" + relationshipName)\n\n  let props = {\n    get: function() {\n      return this.memoized(privatePropName, getter)\n    },\n    set: function(value: any) {}\n  }\n\n  Object.defineProperty(entityType.prototype, propName, props)\n}\n\n\nexport function buildEntityRelationshipProperties(\n  entityType,\n): void {\n\n  let defineGetSet = _.partial(defineEntityRelationshipGetSet, entityType)\n  _.map(entityType.relationshipNames, defineGetSet)\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  slugify,\n} from '@ceo/core'\n\nimport {\n  iEntityCollection,\n  iResourceConfigurationEntity,\n} from '../../../interfaces/index'\n\nimport {\n  buildEntityRelationshipProperties,\n  defineEntityRelationshipGetSet,\n} from '../../../util/builders/entity/build-entity-relationship-properties'\n\nimport { JsonApiEntity } from './json-api.entity'\n\nexport class ResourceConfigurationEntity extends JsonApiEntity\n  implements iResourceConfigurationEntity {\n\n  static defaultAttributes: {} = {\n    isRoutable: true\n  }\n\n  static relationshipNames: string[] = [\n    'resource-associations',\n    'resource-attributes',\n    'resource-validators',\n  ]\n\n  resourceAssociations$: any\n}\n\nlet buildEntityRelationship = (name) => {\n  defineEntityRelationshipGetSet(ResourceConfigurationEntity, name)\n}\n_.map(ResourceConfigurationEntity.relationshipNames, buildEntityRelationship)\n\n/*\nResourceConfigurationEntity.prototype.resourceAssociations$ = function() {\n  return this.dataService.relationship$(this, 'resource-associations', {})\n}\n*/\n","import * as _ from 'lodash'\n\nimport { JsonApiEntity } from './json-api.entity'\n\nexport class ResourceValidatorEntity extends JsonApiEntity {\n  isForAttribute(attrName: string) {\n    return _.includes((this as any).attributeNames, attrName)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  iFeatureConfig,\n  iEntityConstructor,\n  iEntityConstructorParams,\n  iEntityTypeMap,\n  iEntity,\n  iEntityConfig,\n  iResourceIdentifier,\n} from '../../interfaces/index'\n\nimport { EntityTypeFactory } from '../entity/entity-type.factory'\n\nexport class FeatureConfig implements iFeatureConfig {\n  name: string\n  entityConfigs: iEntityConfig[]\n  baseEntityType: iEntityConstructor\n  selectors: any\n\n  private _entityTypes: iEntityTypeMap\n  private _sliceNames: string[]\n  private _seedEntities: iEntityConstructor[]\n\n  public constructor(init?: Partial<iFeatureConfig>) {\n    Object.assign(this, init)\n  }\n\n  get sliceNames(): string[] {\n    if(this._sliceNames) {\n      return this._sliceNames\n    }\n\n    this._sliceNames = this.buildSliceNames()\n    return this._sliceNames\n  }\n\n  get seedEntities() {\n   if(! this._seedEntities) {\n     this._seedEntities = this.buildSeeds()\n   }\n\n   return this._seedEntities\n  }\n\n  get entityTypes(): iEntityTypeMap {\n    if(!this._entityTypes) {\n      this._entityTypes = this.buildEntityTypes()\n    }\n\n    return this._entityTypes\n  }\n\n  entityTypeFromEntityData(\n    entityData: iEntityConstructorParams\n  ): iEntityConstructor {\n    let ofType = (entityType) => {\n      return entityType.config.ofType(entityData)\n    }\n\n    return _.find(this.entityTypes, ofType)\n  }\n\n  entityType(theType: string): iEntityConstructor {\n    let hasType = (entityType) => {\n      return entityType.config.type == theType\n    }\n\n    return _.find(this.entityTypes, hasType)\n  }\n\n  ////////////////////////////\n  // Private methods\n  ////////////////////////////\n\n\n  private get entitySliceNames(): string[] {\n    let getName = (entityType) => {\n      return entityType.sliceName\n    }\n    return _.map(this.entityTypes, getName)\n  }\n\n  private buildSliceNames(): string[] {\n    let prefixedSliceName = (sliceName) => {\n      return _.join([this.name, 'entities', sliceName], '.')\n    }\n\n    return _.map(this.entitySliceNames, prefixedSliceName)\n  }\n\n  private buildSeeds() {\n    return _.flatten(\n      _.map(\n        this.entityTypes,\n        _.bind(this.buildEntityTypeSeeds, this)\n      )\n    )\n  }\n\n  private buildEntityTypeSeeds(entityType) {\n    let buildResourceIdentiifer = (\n      ri: iResourceIdentifier\n    ) => {\n      let map = {\n        feature: this.name,\n        type: entityType.config.type\n      }\n      return _.merge(map, ri)\n    }\n\n    return _.map(entityType.config.seed, buildResourceIdentiifer)\n  }\n\n  private buildEntityTypes() {\n    var factory = new EntityTypeFactory(this.baseEntityType)\n    let build = _.bind(factory.build, factory)\n    let entityTypeMaps = _.map(this.entityConfigs, build)\n    return _.assign.apply(_, entityTypeMaps)\n  }\n}\n","import {\n  Observable,\n} from 'rxjs'\n\nimport * as types from '../types'\n\nimport { FeatureIdentifier } from '../feature/feature-identifier'\n\nimport { EntityIdentifier } from './entity-identifier'\n\nexport type EntityAttributeDataType = any;\n\nexport type EntityRelationshipIdentifier = string\n\nexport type EntityRelationshipType = string\nexport const EntityHasOneRelationshipType = \"HasOne\"\nexport const EntityHasManyRelationshipType = \"HasMany\"\nexport type EntityRelationship = EntityHasOneRelationship | EntityHasManyRelationship\n\nexport type EntityHasOneRelationship = iEntityRelationshipMapping\nexport type EntityHasManyRelationship = iEntityRelationshipMapping[]\n\nexport type EntityTypeIdentifier = string;\n\n\nexport type EntityData = iEntity | iEntityCollection\n\nexport interface iEntityAttributes {\n  [key: string]: EntityAttributeDataType;\n}\n\nexport interface iEntityRelationships {\n  [key: string]: any\n}\n\nexport interface iEntityConstructorParams {\n  id?: EntityIdentifier\n  feature?: FeatureIdentifier\n  type: EntityTypeIdentifier\n  attributes: iEntityAttributes\n  relationships?: iEntityRelationships\n  [key: string]: any\n}\n\nexport interface iEntity extends iEntityConstructorParams {\n  sliceName?: string\n  dataService?: any\n\n  save$(opts?: any): Observable<iEntity>\n}\n\nexport interface Entity extends iEntity {}\n\nexport interface iEntityConstructor {\n  new(...args): iEntity\n\n  _sliceName: string\n\n  config: any\n  defaultAttributes: any\n}\n\nexport interface iEntityCollection {\n  length: number;\n  entities: iEntity[];\n\n  slice(any): iEntityCollection;\n  filter(any): iEntityCollection;\n  find(any): iEntity;\n  findByAttr(attr: any, value: any): iEntity;\n  filterByAttrs(any): iEntityCollection;\n  invokeFilter(methodName: string, ...args): iEntityCollection\n  filterByInvoke(methodName: string, ...args): iEntityCollection\n  where(any): iEntityCollection;\n  stringSearch(any): iEntityCollection;\n  search(any): iEntityCollection;\n  stringSearchByAttr(attr: any, term: any): iEntityCollection;\n  map(any): any[]\n  sort(attributes: string[]): iEntityCollection\n  isEmpty(): boolean\n  isNotEmpty(): boolean\n  hasEntities(): boolean\n}\n\n\nexport interface iEntityRelationshipMapping {\n  id: EntityIdentifier,\n  type: EntityTypeIdentifier;\n  [key: string]: any\n}\n\nexport interface iWrappedEntityRelationship {\n  data: EntityRelationship\n}\n\n\nexport interface iEntityMap {\n  EntityTypeIdentifier: iEntity[],\n}\n\nexport interface iEntityTypeMap {\n  EntityTypeIdentifier: iEntityConstructor\n}\n","export const EntitySelectorTypes: any = {\n  All: 'All' as 'All',\n  Ids: 'Ids' as 'Ids',\n  Entities: 'Entities' as 'Entities',\n  Total: 'Total' as 'Total',\n  SelectedEntity: 'SelectedEntity' as 'SelectedEntity',\n  Config: 'Config' as 'Config',\n  Scope: 'Scope' as 'Scope',\n}\n\nexport interface iEntitySelectorTypes {\n  All: string\n  Ids: string\n  Entities: string\n  Total: string\n  SelectedEntity: string\n  Config: string\n  Scope: string\n}\n\nexport type EntitySelectorTypeKeys = keyof iEntitySelectorTypes\n","import * as _ from 'lodash'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iDataService,\n  iEntity,\n  iEntityConstructorParams,\n} from '../interfaces/index'\n\n@Injectable()\nexport class EntityCloner {\n  clone(\n    entity: iEntity,\n    dataService: iDataService = null,\n  ): iEntity {\n    let entityCtor : any = entity.constructor\n    return new entityCtor(this.constructorParams(entity), dataService)\n  }\n\n  private constructorParams(\n    entity: iEntity,\n  ): iEntityConstructorParams {\n\n    let paramNames = [\n      'id',\n      'feature',\n      'type',\n      'attributes',\n      'relationships',\n    ]\n    return <iEntityConstructorParams>_.pick(entity, paramNames)\n\n  }\n}\n","import * as _ from 'lodash'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  InflectionService,\n}   from '@ceo/core'\n\nimport {\n  iEntitySelectorIdentifier,\n} from '../../interfaces/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SelectorNameService {\n  constructor(\n    private inflectionService: InflectionService,\n  ) {}\n\n  getFeatureSelectorName(featureConfig) {\n    return featureConfig.name\n  }\n\n  getEntitySelectorName(entityAdapter) {\n    return entityAdapter.sliceName\n  }\n\n  getNestedSelectorName(parentName, selectorName) {\n    let parentSegments = this.buildSegments(parentName)\n    let selectorNameSegments = this.buildSegments(selectorName, 'select')\n    let segments = _.flatten([parentSegments, selectorNameSegments])\n\n    return _.join(segments, '.')\n  }\n\n  getResourceSelectorName(si: iEntitySelectorIdentifier) {\n    return this.selectorIdentifierToSelectorName(si)\n  }\n\n  // Alias for getResourceSelectorName\n  getSelectorName(si: iEntitySelectorIdentifier) {\n    return this.getResourceSelectorName(si)\n  }\n\n  private buildSegments(value: string, prefix: string = ''): string[] {\n    let camelCase = _.bind(this.inflectionService.camelCase, this)\n\n    let inflections = \n      [\n        ['removePrefix', prefix],\n        ['replace', / /g, ''],\n        ['trim', '.'],\n        ['split', '.'],\n      ]\n\n    let result = (<any>this.inflectionService).inflect(value, inflections)\n\n    return _.map(result, camelCase)\n  }\n\n  private sanitizedSelectorName(selectorName: string): string[] {\n    let prefix = 'select'\n\n    selectorName = this.inflectionService.removePrefix(selectorName, prefix)\n\n    let camelCase = (value) => {\n      return this.inflectionService.camelCase(value)\n    }\n\n    let segments = _.map(_.split(selectorName, '.'), camelCase)\n    return segments\n  }\n\n  private selectorIdentifierToSelectorName(si: iEntitySelectorIdentifier) {\n    let featureName =\n      this.inflectionService.camelCase(si.feature)\n\n    let featureEntities = 'entities'\n\n    let sliceName =\n      this.inflectionService.camelCase(si.entityType)\n\n    let selectorType =\n      this.inflectionService.camelCase(si.selectorType)\n\n    let segments = [\n      featureName,\n      featureEntities,\n      sliceName,\n      selectorType,\n    ]\n\n    if(_.has(si, 'scope')) {\n      let scopeName =\n        this.inflectionService.camelCase(si.scope)\n\n      segments.push(scopeName)\n    }\n\n    return _.join(segments, '.')\n  }\n}\n","// Get all the Selectors internal to an entity type\n\nimport * as _ from 'lodash'\n\nimport {\n  createSelector,\n} from '@ngrx/store'\n\nexport const buildEntitySelectors = (\n  entityAdapter,\n  entityTypeSelector,\n  selectorNameService,\n) => {\n\n  let buildEntityScopedSelector = (selector, selectorName) => {\n    let entitySelectorName =\n      selectorNameService.getEntitySelectorName(entityAdapter) \n\n    let entityScopedSelectorName =\n      selectorNameService.getNestedSelectorName(entitySelectorName, selectorName)\n\n    let featureLevelSelector = createSelector(entityTypeSelector, selector)\n\n    let selectors = {}\n    selectors[entityScopedSelectorName] = featureLevelSelector\n\n    return selectors\n  }\n\n  return _.reduce(\n    _.map(entityAdapter.selectors, buildEntityScopedSelector),\n    _.merge,\n    {},\n  )\n}\n","import {\n  iEntityState,\n} from '../../../interfaces/index'\n\nexport const buildSliceSelector = (sliceName) => {\n  return (state: iEntityState<any>) => {\n    return state[sliceName]\n  }\n}\n","import {\n  iEntityState,\n} from '../../../interfaces/index'\n\nimport { buildSliceSelector } from './build-slice-selector'\n\n// Get all the Entity Type data for an entity type.\nexport const buildEntityTypeSliceSelector = (entityAdapter) => {\n  return buildSliceSelector(entityAdapter.sliceName)\n}\n","import * as _ from 'lodash'\n\nimport {\n  compose,\n} from '@ngrx/store'\n\nexport const buildRootSelector = (\n  featureSelector,\n  entitySelector\n) => {\n\n  let rootSelectorName = _.join([featureSelector.name, entitySelector.name], '.')\n  let rootSelector = compose(entitySelector.selector, featureSelector.selector)\n\n  return {\n    name: rootSelectorName,\n    selector: rootSelector,\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  createFeatureSelector,\n  compose,\n} from '@ngrx/store'\n\nimport { buildEntitySelectors }    from './build-entity-selectors'\nimport { buildEntityTypeSliceSelector } from './build-entity-type-slice-selector'\nimport { buildRootSelector }       from './build-root-selector'\nimport { buildSliceSelector }      from './build-slice-selector'\n\nexport const buildFeatureSelector = (\n  featureConfig,\n  entityAdapters,\n  selectorService,\n  selectorNameService,\n  buildCustomSelectors,\n) => {\n\n  // Feature Selector\n  var featureSelectorName = selectorNameService.getFeatureSelectorName(featureConfig)\n  let featureSelectorFunction = createFeatureSelector<any>(featureSelectorName)\n  let featureSelector = {\n    name: featureSelectorName,\n    selector: featureSelectorFunction\n  }\n  selectorService.addSelector(featureSelector)\n\n  // Feature Entities Selector\n  var featureEntitiesSelectorName =\n    selectorNameService.getNestedSelectorName(featureSelectorName, 'entities')\n  let entitiesSelectorFunction = buildSliceSelector('entities')\n  let featureEntitiesSelectorFunction =\n    compose(entitiesSelectorFunction, featureSelector.selector)\n  let featureEntitiesSelector = {\n    name: featureEntitiesSelectorName,\n    selector: featureEntitiesSelectorFunction\n  }\n  selectorService.addSelector(featureEntitiesSelector)\n\n\n  // Feature Config Selector\n  var featureConfigSelectorName =\n    selectorNameService.getNestedSelectorName(featureSelectorName, 'config')\n  let configSelectorFunction = buildSliceSelector('config')\n  let featureConfigSelectorFunction =\n    compose(configSelectorFunction, featureSelector.selector)\n  let featureConfigSelector = {\n    name: featureConfigSelectorName,\n    selector: featureConfigSelectorFunction\n  }\n  selectorService.addSelector(featureConfigSelector)\n\n\n  let addEntity = (entityAdapter) => {\n    var adapter = entityAdapter\n\n    var entityTypeSelector = buildEntityTypeSliceSelector(entityAdapter)\n\n    let entitySelectors =\n      buildEntitySelectors(\n        entityAdapter,\n        entityTypeSelector,\n        selectorNameService\n      )\n\n    let buildRootSelectorForEntity = (selector, selectorName) => {\n      let entitySelector = {\n        name: selectorName,\n        selector: selector\n      }\n\n      return buildRootSelector(\n        featureEntitiesSelector,\n        entitySelector\n      )\n    }\n\n    let rootSelectors = _.map(entitySelectors, buildRootSelectorForEntity)\n\n    let addSelectors = (selector) => {\n      selectorService.addSelector(selector)\n    }\n\n    _.map(rootSelectors, addSelectors)\n  }\n\n  _.map(entityAdapters, addEntity)\n\n  buildCustomSelectors(selectorService)\n}\n\n","import * as _ from 'lodash'\n\nimport { Store, createSelector, MemoizedSelector } from '@ngrx/store'\n\nimport {\n  iEntityState,\n  iEntity,\n} from '../../../interfaces/index'\n\n\nexport const buildFilterSelector = (selector, filter) => {\n\n  let filterState = (state: any) => {\n    if(state && state.where) {\n      return state.where(filter)\n    }\n    else {\n      return state\n    }\n  }\n\n  return createSelector(\n    selector,\n    filterState,\n  )\n}\n","import * as _ from 'lodash'\n\nimport { Store, createSelector, MemoizedSelector } from '@ngrx/store'\n\nimport {\n  iEntityState,\n  iEntity,\n  iResourceIdentifier,\n} from '../../../interfaces/index'\n\nexport const buildFindSelector = (\n  selector,\n  ri: iResourceIdentifier,\n  findPropPath: string = 'id'\n) => {\n\n  let find = (state: any) => {\n    return state.find(_.get(ri, findPropPath))\n  }\n\n  return createSelector(\n    selector,\n    find,\n  )\n}\n","import * as _ from 'lodash'\n\nimport { pipe }   from 'rxjs'\nimport { filter } from 'rxjs/operators'\n\nimport { \n  select,\n  createFeatureSelector,\n  createSelector, MemoizedSelector\n} from '@ngrx/store'\n\nimport {\n  iFeatureMap,\n} from '../../interfaces/index'\n\nimport { iFeatureState } from './state'\n\nexport const selectEntityFeature = createFeatureSelector<any> ('entity')\n\nlet selectFeatures = (state: iFeatureState): iFeatureMap => {\n  return state.features\n}\n\nlet selectPrimaryEntityIdentifier = (state: iFeatureState) => {\n  return _.get(state, 'primaryEntity.resourceIdentifier')\n}\n\nlet selectPrimaryEntity = (state: iFeatureState) => {\n  return _.get(state, 'primaryEntity.entity')\n}\n\nlet selectors = {\n  features: selectFeatures,\n  primaryEntity: selectPrimaryEntity,\n  primaryEntityIdentifier: selectPrimaryEntityIdentifier,\n}\n\nlet buildFeatureSelector = (selector, name) => {\n  return createSelector(\n    selectEntityFeature,\n    selector,\n  )\n}\n\n\nexport const entityFeatureSelectors =\n  _.mapValues(selectors, buildFeatureSelector)\n","import * as _ from 'lodash'\n\nimport { Observable }   from 'rxjs'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store } from '@ngrx/store'\n\nimport { InflectionService }             from '@ceo/core'\n\nimport {\n  iSelectorsMap,\n  iEntitySelectorIdentifier,\n} from '../../interfaces/index'\n\nimport { SelectorNameService } from './selector-name.service'\n\n@Injectable()\nexport class SelectorService {\n  selectors: iSelectorsMap = {}\n\n  constructor(\n    private inflectionService: InflectionService,\n    private store: Store<any>,\n    private selectorNameService: SelectorNameService\n  ) {}\n\n  select$(selectorName): Observable<any> {\n    let selector = this.getSelector(selectorName)\n    return this.store.select(selector)\n  }\n\n  select(selectorName) {\n    return this.select$(selectorName)\n  }\n\n  selectorFromSelectorIdentifier(si: iEntitySelectorIdentifier) {\n    let selectorName =\n      this.selectorNameService.getResourceSelectorName(si)\n\n    return this.getSelector(selectorName)\n  } \n\n  getSelector(selectorName) {\n    let path = this.selectorPath(selectorName)\n    return  _.get(this.selectors, path)\n  }\n\n  addSelector(selector) {\n    let path = this.selectorPath(selector.name)\n    this.log(selector, path, false)\n    return _.set(this.selectors, path, selector.selector)\n  }\n\n  private selectorPath(selectorName: string): string {\n    let pathElements = _.split(selectorName, '.')\n    /*\n    if(pathElements.length > 1) {\n      pathElements.splice(1, 0, 'entities')\n    }\n    */\n    pathElements.push('selector')\n    return _.join(pathElements, '.')\n  }\n\n  private log(selector, path, loggingEnabled = false) {\n    if(loggingEnabled) {\n      console.log(\"Registering the selector \" + path)\n    }\n  }\n}\n","import * as _ from 'lodash'\n\nimport { Observable }   from 'rxjs'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store, createSelector } from '@ngrx/store'\n\nimport { InflectionService } from '@ceo/core'\n\nimport {\n  iCustomSelector,\n  iEntitySelectorIdentifier,\n  iEntitySelectorTypes,\n  iFeature,\n  iFeatureMap,\n  iResourceIdentifier,\n  iDataServiceOpts,\n  EntitySelectorTypes,\n} from '../../interfaces/index'\n\nimport {\n  JsonApiEntity,\n} from '../../classes/index'\n\nimport {\n  buildFilterSelector,\n  buildFindSelector,\n} from '../../util/builders/selectors/index'\n\nimport {\n  entityFeatureSelectors,\n} from '../../state/feature/selectors'\n\n\nimport { SelectorService } from './selector.service'\n\n\n@Injectable()\nexport class SelectorProvider {\n  features$: Observable<iFeatureMap>\n  features: iFeatureMap\n\n  private defaultOpts: any = {\n    selectorType: <keyof iEntitySelectorTypes>EntitySelectorTypes.All\n  }\n\n  constructor(\n    private selectorService: SelectorService,\n    private store: Store<any>,\n  ) {\n    this.subscribeToFeatures()\n  }\n\n  provide(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n    opts = _.defaults(opts, this.defaultOpts)\n\n    let selector = this.customSelector(ri, opts) ||\n      this.defaultSelector(ri, opts)\n\n    return selector\n  }\n\n  private customSelector(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n\n    let feature = this.features[ri.feature]\n\n    if(feature) {\n      let selectorIsValid = (selector): boolean => {\n        return selector.isValid(ri)\n      }\n      let selector = _.find(feature.selectors, selectorIsValid)\n\n      if(selector) {\n        return <any>selector.selector(this.selectorService, ri)\n      }\n      else {\n        return null\n      }\n    }\n\n    return null\n  }\n\n  private defaultSelector(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n\n    if(this.isRelationshipResourceRequest(ri)) {\n      ri = {\n        feature: ri.feature,\n        type: ri.relationship.type\n      }\n    }\n\n    let si = this.selectorIdentifier(ri, opts)\n    let selector = this.getBaseSelector(si)\n\n    if(this.isFindRequest(ri)) {\n      selector = this.findSelector(selector, ri)\n    }\n\n    if(this.isFilteredResourceRequest(ri)) {\n      selector = this.filterSelector(selector, ri)\n    }\n\n    return selector\n  }\n\n  private isRelationshipResourceRequest(\n    ri: iResourceIdentifier,\n  ) {\n    return _.has(ri, 'relationship')\n  }\n\n  private selectorIdentifier(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): iEntitySelectorIdentifier {\n\n    let isScoped = this.isScopedResourceIdentifier(ri)\n    var selectorType = isScoped ? 'scope' : opts.selectorType\n    \n    let si = {\n      feature: ri.feature,\n      entityType: ri.type,\n      selectorType: <keyof iEntitySelectorTypes> selectorType\n    }\n\n    if(isScoped) {\n      si = _.merge(si, {scope: ri.filter.scope})\n    }\n\n    return si\n  }\n\n  private getBaseSelector(\n    selectorIdentifier: iEntitySelectorIdentifier,\n  ) {\n    return this.selectorService\n      .selectorFromSelectorIdentifier(selectorIdentifier)\n  }\n\n  private isFindRequest(\n    ri: iResourceIdentifier,\n  ) {\n    return !_.isEmpty(this.findPropPath(ri))\n  }\n\n  private findPropPath(\n    ri: iResourceIdentifier,\n  ) {\n\n    let primaryKeys = this.getPrimaryKeys(ri)\n\n    // Simple case when primary key is 'id'\n    if(_.has(ri, 'id') && _.includes(primaryKeys, 'id')) {\n      return 'id'\n    }\n\n\n    // Alternate scenario: when the primary key is\n    // mixed in with the filter params\n    let filterKeys = _.keys(this.getFilterParams(ri))\n    let primaryKey = _.head(_.intersection(primaryKeys, filterKeys))\n    if(primaryKey) {\n      return `filter.${primaryKey}`\n    }\n    else {\n      return null\n    }\n  }\n\n  private findSelector(\n    selector: any,\n    ri: iResourceIdentifier,\n  ): any {\n    return buildFindSelector(selector, ri, this.findPropPath(ri))\n  }\n\n  private isFilteredResourceRequest(\n    ri: iResourceIdentifier,\n  ) {\n    return _.has(ri, 'filter')\n  }\n\n  private filterSelector(\n    selector: any,\n    ri: iResourceIdentifier,\n  ) {\n\n    let filter = this.getFilterParams(ri)\n    return buildFilterSelector(selector, filter)\n  }\n\n  private isScopedResourceIdentifier(ri: iResourceIdentifier,) {\n    return _.has(ri, 'filter.scope')\n  }\n\n  private subscribeToFeatures() {\n    this.features$ = \n      <Observable<iFeatureMap>>this.store.select(entityFeatureSelectors.features)\n    this.features$\n      .subscribe(features => this.features = features)\n  }\n\n  private getFeature(ri: iResourceIdentifier) {\n    return this.features[ri.feature]\n  }\n\n  private getFilterParams(ri: iResourceIdentifier) {\n    return _.omit(ri.filter, 'scope')\n  }\n\n  private getPrimaryKeys(ri: iResourceIdentifier): string[] {\n    var primaryKeys = ['id']\n    let feature = this.getFeature(ri)\n    let entityType = feature.entityType(ri.type)\n\n    if(entityType) {\n      primaryKeys = entityType.config.primaryKeys || primaryKeys\n    }\n\n    return primaryKeys\n  }\n}\n","import { SelectorNameService as EntitySelectorNameService }  from './selector-name.service'\nimport { SelectorProvider as EntitySelectorProvider }        from './selector-provider.service'\nimport { SelectorService as EntitySelectorService }          from './selector.service'\n\nexport const services: any[] = [\n  EntitySelectorNameService,\n  EntitySelectorProvider,\n  EntitySelectorService,\n]\n\nexport {\n  EntitySelectorNameService,\n  EntitySelectorProvider,\n  EntitySelectorService,\n}\n","//  Loads and constructs relations for an entity, using the entity's\n//  relationship data.\n\nimport * as _ from 'lodash'\n\nimport { Observable, empty, of } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport { camelCase }        from '@ceo/core'\n\nimport {\n  EntityRelationshipIdentifier,\n  EntityData,\n  EntityIdentifier,\n  EntityRelationship,\n  EntityRelationshipType,\n  EntityHasOneRelationship,\n  EntityHasManyRelationship,\n  EntityHasOneRelationshipType,\n  EntityHasManyRelationshipType,\n  EntityTypeIdentifier,\n  iDataService,\n  iDataServiceOpts,\n  iEntityRelationshipProvider,\n  iEntity,\n  iEntityRelationshipMapping,\n  iEntityCollection,\n} from '../interfaces/index'\n\nimport {\n  EntityCollection,\n} from '../classes/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EntityRelationshipProvider\n  implements iEntityRelationshipProvider {\n\n  private defaultDataServiceOpts: iDataServiceOpts = {\n    syncWithApi: false,\n  }\n\n  provide$(\n    dataService: iDataService,\n    entity: iEntity,\n    relationshipIdentifier: EntityRelationshipIdentifier,\n    opts: iDataServiceOpts = {},\n  ): Observable<EntityData> {\n\n    let relationship = this.relationshipData(entity, relationshipIdentifier)\n\n    if(!relationship) {\n      return of(<EntityData>null)\n    }\n\n    let relationshipType = this.relationshipType(relationship)\n\n    if(!relationshipType) {\n      return of(<EntityData>null)\n    }\n\n    return this.loadRelationshipData$(\n      dataService, entity, relationship, relationshipType, opts\n    )\n  }\n\n  private loadRelationshipData$(\n    dataService: iDataService,\n    entity: iEntity,\n    relationship: EntityRelationship,\n    relationshipType: EntityRelationshipType,\n    opts: iDataServiceOpts = {},\n  ): Observable<EntityData> {\n\n    var resourceType = ''\n    var prepareRelationship\n\n    if(relationshipType == EntityHasOneRelationshipType) {\n      resourceType = (<EntityHasOneRelationship> relationship).type\n      prepareRelationship = this.prepareHasOne\n    }\n\n    if(relationshipType == EntityHasManyRelationshipType) {\n      if(_.isEmpty(relationship)) {\n        resourceType = this.defaultRelationResourceType(entity)\n      }\n      else {\n        let firstRelationship = relationship[0]\n        resourceType = (firstRelationship).type || 'entity'\n      }\n\n      prepareRelationship = this.prepareHasMany\n    }\n\n    return this.loadResourceTypeData$(dataService, entity, resourceType, opts).pipe(\n      map(entities => prepareRelationship(relationship, entities))\n    )\n  }\n\n  private prepareHasMany(\n    relationship: EntityRelationship,\n    entities: iEntityCollection\n  ): iEntityCollection {\n\n    let ids = _.map(relationship, 'id')\n    return entities.where({id: ids})\n  }\n\n  private prepareHasOne(\n    relationship: EntityRelationship,\n    entities: iEntityCollection\n  ): iEntity {\n    return entities.find((<EntityHasOneRelationship> relationship).id)\n  }\n\n  private loadResourceTypeData$(\n    dataService: iDataService,\n    entity: iEntity,\n    resourceType: EntityTypeIdentifier,\n    opts: iDataServiceOpts = {},\n  ): Observable<iEntityCollection> {\n\n    let resourceOpts = {\n      feature: entity.feature,\n      type: resourceType,\n    }\n    return dataService.get$(resourceOpts, this.buildDataServiceOpts(opts))\n  }\n\n  private buildDataServiceOpts(\n    opts: iDataServiceOpts = {},\n  ) {\n    return _.defaults(opts, this.defaultDataServiceOpts)\n  }\n\n  private relationshipData(\n    entity: iEntity,\n    relationshipIdentifier: EntityRelationshipIdentifier\n  ): EntityRelationship {\n    if(entity && entity.relationships){\n      let wrappedData = entity.relationships[relationshipIdentifier]\n      if(wrappedData) {\n        return wrappedData.data\n      }\n      else {\n        return null\n      }\n    }\n    return null\n  }\n\n  private relationshipType(\n    relationship: EntityRelationship\n  ): EntityRelationshipType  | null {\n    if(_.has(relationship, 'id')) {\n      return EntityHasOneRelationshipType\n    }\n    if(relationship instanceof Array) {\n      return EntityHasManyRelationshipType\n    }\n    return null\n  }\n\n  private defaultRelationResourceType(entity: iEntity) {\n    switch(entity.feature) { \n      case 'app': {\n        return 'sunray-entities'\n      }\n      case 'cms': {\n        return 'wordpress-entities'\n      }\n      default: { \n        return 'sunray-entities'\n      }\n    }\n  }\n} \n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  pipe,\n} from 'rxjs'\n\nimport { map } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store }           from '@ngrx/store'\n\nimport {\n  FeatureIdentifier,\n  iEntityConfig,\n  iEntityTypeMap,\n  iEntity,\n  iEntityConstructor,\n  iEntityConstructorParams,\n  iFeatureConfig,\n  iFeatureMap,\n} from '../interfaces/index'\n\nimport {\n  entityFeatureSelectors,\n} from '../state/feature/selectors'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EntityTypeProviderService {\n  private _features$: Observable<iFeatureMap>\n\n  constructor(\n    protected store: Store<any>,\n  ) {}\n\n  provide$(\n    entityData: iEntityConstructorParams,\n  ): Observable<iEntityConstructor> {\n\n    return this.getFeature$(entityData.feature).pipe(\n      map(feature => this.getEntityType(feature, entityData)),\n    )\n  }\n\n  private getEntityType(\n    feature: iFeatureConfig,\n    entityData: iEntityConstructorParams\n  ): iEntityConstructor {\n\n    return this.getCustomEntityType(feature, entityData) ||\n      feature.baseEntityType\n  }\n\n  private getCustomEntityType(\n    feature: iFeatureConfig,\n    entityData: iEntityConstructorParams\n  ): iEntityConstructor {\n\n    return feature.entityTypeFromEntityData(entityData)\n  }\n\n  private getFeature$(\n    featureName: FeatureIdentifier\n  ): Observable<iFeatureConfig> {\n    return this.features$.pipe(\n      map(features => features[featureName] ),\n    )\n  }\n\n\n  // new stuff\n  private get features$(): Observable<iFeatureMap> {\n    if(!this._features$) {\n      this._features$ = this.buildFeatures$()\n    }\n\n    return this._features$\n  }\n\n  private buildFeatures$(): Observable<iFeatureMap> {\n    let features = this.store.select(entityFeatureSelectors.features)\n    return <Observable<iFeatureMap>>features\n  }\n}\n","// Builds Entity instances from raw (usually server-side) data.\n\nimport * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  map,\n} from 'rxjs/operators'\n\nimport { Injectable, Inject } from '@angular/core'\n\nimport {\n  FeatureIdentifier,\n  iEntity,\n  iResourceIdentifier,\n  iEntityConstructorParams,\n  iEntityConstructor,\n} from '../interfaces/index'\n\nimport { EntityTypeProviderService }  from './entity-type-provider.service'\nimport { EntityRelationshipProvider } from './entity-relationship-provider.service'\n\n\n@Injectable()\nexport class EntityFactory {\n  constructor(\n    private entityTypeProvider: EntityTypeProviderService,\n    private relationshipProvider: EntityRelationshipProvider,\n  ) {}\n\n  build$(\n    entityData: iEntityConstructorParams,\n  ): Observable<iEntity> {\n    return this.getEntityType$(entityData).pipe(\n      map(entityType => new entityType(entityData)),\n    )\n  }\n\n  private getEntityType$(\n    entityData: iEntityConstructorParams,\n  ): Observable<iEntityConstructor> {\n    return this.entityTypeProvider.provide$(entityData)\n  }\n}\n","import * as _ from 'lodash'\n\nimport { Observable, of } from 'rxjs'\n\nimport {\n  map,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store, createSelector } from '@ngrx/store'\n\nimport {\n  EntityActions,\n  JsonApiEntity,\n  EntityCollection,\n} from '../classes/index'\n\nimport {\n  EntityRelationshipIdentifier,\n  EntityData,\n  iEntity,\n  iResourceIdentifier,\n  iDataService,\n  iDataServiceOpts,\n  iEntityConstructorParams,\n  iEntitySelectorIdentifier,\n  EntitySelectorTypes,\n  iEntitySelectorTypes,\n} from '../interfaces/index'\n\nimport { EntityCloner }               from './entity-cloner.service'\nimport { EntitySelectorProvider }     from './selectors/index'\nimport { EntityRelationshipProvider } from './entity-relationship-provider.service'\nimport { EntityFactory              } from './entity-factory.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService implements iDataService {\n  private defaultOpts: iDataServiceOpts = {\n    syncWithApi: true,\n    selectorOpts: {\n      selectorType: <keyof iEntitySelectorTypes>EntitySelectorTypes.All\n    }\n  }\n\n  constructor(\n    private store: Store<any>,\n    private selectorProvider: EntitySelectorProvider,\n    private entityRelationshipProvider: EntityRelationshipProvider,\n    private entityCloner: EntityCloner,\n    private entityFactory: EntityFactory,\n  ) { }\n\n  build$(\n    entityData: iEntityConstructorParams,\n  ): Observable<iEntity> {\n    return this.entityFactory.build$(entityData).pipe(\n      map(entity => this.decoratedData(entity) as iEntity)\n    )\n  }\n\n  create$(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n\n    let actionType = EntityActions.Add\n    return this.executeRequest$(ri, opts, actionType)\n  }\n\n  delete$(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n    let actionType = EntityActions.Delete\n    return this.executeRequest$(ri, opts, actionType)\n  }\n\n  get$(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n    let actionType = EntityActions.Load\n    return this.executeRequest$(ri, opts, actionType)\n  }\n\n  update$(ri: any, opts: iDataServiceOpts = {}) {\n    let actionType = EntityActions.Update\n    return this.executeRequest$(ri, opts, actionType)\n  }\n\n  relationship$(\n    entity: iEntity,\n    relationshipIdentifier: EntityRelationshipIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<EntityData> {\n    return this.entityRelationshipProvider.provide$(\n      this,\n      entity,\n      relationshipIdentifier,\n      opts,\n    )\n  }\n\n  // TODO: deprecate this method\n  get(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n    return this.get$(ri, opts)\n  }\n\n  private executeRequest$(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {},\n    actionType: any\n  ): Observable<any> {\n\n    opts = _.defaults(opts, this.defaultOpts)\n\n    if(this.shouldDispatch(ri, opts)) {\n      let sliceName = this.getSliceName(ri)\n      let action = new actionType(sliceName, ri)\n      this.store.dispatch(action)\n    }\n\n    let selector = this.getSelector(ri, opts)\n\n    if(selector) {\n      return this.storeData$(selector, opts).pipe(\n        map(data => this.decoratedData(data)),\n      )\n    }\n    else {\n      return this.noData$()\n    }\n  }\n\n  private storeData$(\n    selector: any,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n\n    return this.store.select(selector)\n  }\n\n  private decoratedData(\n    data: EntityData\n  ): EntityData {\n\n    var buildDecoratedEntity = (entity: iEntity) => {\n      return this.entityCloner.clone(entity, this)\n    }\n\n    if(data) {\n      if(EntityCollection.prototype.isPrototypeOf(data)) {\n        let clonedEntities = data.map(buildDecoratedEntity)\n        let clonedCollection = new EntityCollection(clonedEntities)\n        return <EntityData>clonedCollection\n      }\n      if(JsonApiEntity.prototype.isPrototypeOf(data)) {\n        let clone = buildDecoratedEntity(<iEntity>data)\n        return <EntityData>clone\n      }\n    }\n\n    return data\n  }\n\n  private getSelector(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n\n    return this.selectorProvider.provide(ri, opts.selectorOpts)\n  }\n\n  private shouldDispatch(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): boolean {\n    return opts.syncWithApi\n  }\n\n  private getSliceName(\n    ri: iResourceIdentifier,\n  ) {\n    return _.join([ri.feature, 'entities', ri.type], '.')\n  }\n\n  private noData$(): Observable<any> {\n    return of([])\n  }\n}\n","import * as _ from 'lodash'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iEntityAttributeBuilder,\n  iEntityConstructorParams,\n} from '../../interfaces/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AttributeBuilder implements iEntityAttributeBuilder {\n  build(params: any): iEntityConstructorParams {\n    return {\n      feature: params.feature,\n      type: params.type,\n      id: params.id,\n      attributes: _.omit(params, ['id', 'feature'])\n    }\n  }\n}\n","import * as _ from 'lodash'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iEntityConstructorParams,\n  iEntityAttributeBuilder,\n} from '../../interfaces/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JsonApiAttributeBuilder implements iEntityAttributeBuilder {\n  build(params: any): iEntityConstructorParams {\n    let propNames = ['feature', 'type', 'id', 'attributes', 'relationships']\n    return <iEntityConstructorParams>_.pick(params, propNames)\n  }\n}\n","import { AttributeBuilder as EntityAttributeBuilder }               from './attribute-builder.service'\nimport { JsonApiAttributeBuilder as JsonApiEntityAttributeBuilder } from './json-api-attribute-builder.service'\n\nexport const services: any[] = [\n  EntityAttributeBuilder,\n  JsonApiEntityAttributeBuilder,\n]\n\nexport {\n  EntityAttributeBuilder,\n  JsonApiEntityAttributeBuilder,\n}\n","import * as _         from 'lodash'\n\nimport {\n  Observable,\n  of as observableOf,\n  pipe,\n  combineLatest,\n} from 'rxjs'\n\nimport { map, mergeMap } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  ApiService,\n} from '@ceo/shared'\n\n\nimport {\n  FeatureIdentifier,\n  iApiResponse,\n  iEntity,\n  iEntityConstructorParams,\n  iEntityService,\n  iResourceIdentifier,\n} from '../interfaces/index'\n\nimport { EntityFactory } from './entity-factory.service'\nimport { EntityAttributeBuilder } from './attribute-builders/index'\n\n@Injectable()\nexport class EntityService implements iEntityService {\n  constructor(\n    public entityFactory: EntityFactory,\n    public apiService: ApiService,\n    public attributeBuilder: EntityAttributeBuilder,\n  ) {}\n\n  create$(...args) {\n    return this.apiEntityRequest$('create$', ...args)\n  }\n\n  post$(...args) {\n    return this.apiEntityRequest$('post$', ...args)\n  }\n\n  delete$(...args) {\n    return this.apiEntityRequest$('delete$', ...args)\n  }\n\n  get$(...args) {\n    return this.apiEntityRequest$('get$', ...args)\n  }\n\n  update$(...args) {\n    return this.apiEntityRequest$('update$', ...args)\n  }\n\n  private apiEntityRequest$(action: string, ...args) {\n    return this.entityData$((<any>this.apiService)[action](...args))\n  }\n\n  private entityData$(apiData$: Observable<iApiResponse>) {\n    return apiData$.pipe(\n      mergeMap(apiResponse => this.buildEntityData$(apiResponse)),\n    )\n  }\n\n  private buildEntityData$(\n    apiResponse: iApiResponse\n  ): Observable<any> {\n    return this.buildEntities$(apiResponse).pipe(\n      map(entities => {\n        return {\n          data: entities,\n          resourceIdentifier: apiResponse.resourceIdentifier,\n        }\n      })\n    )\n  }\n\n  private buildEntities$(apiResponse: iApiResponse): Observable<any[]> {\n    var resourceIdentifier = apiResponse.resourceIdentifier\n    var apiData = apiResponse.data\n    var featureName = resourceIdentifier.feature\n\n    let buildEntity$ = _.bind(_.partial(this.buildEntity$, featureName), this)\n    let observables = _.map(apiData, buildEntity$)\n    return combineLatest(observables)\n  }\n\n  private buildEntity$(\n    featureName: FeatureIdentifier,\n    entityData: iEntityConstructorParams,\n  ): Observable<iEntity> {\n    let featureData = {\n      feature: featureName\n    }\n    _.defaults(entityData, featureData)\n    let data = this.attributeBuilder.build(entityData)\n    return this.entityFactory.build$(data)\n  }\n}\n","import { Action } from '@ngrx/store'\n\nimport { PayloadAction } from '@ceo/state'\n\nexport enum EntityConfigActionTypes {\n  SET_PRIMARY_ENTITY = 'SET_PRIMARY_ENTITY',\n}\n\nexport class SetPrimaryEntity extends PayloadAction {\n  readonly type = EntityConfigActionTypes.SET_PRIMARY_ENTITY\n  constructor(public slice: string, public payload: any) {\n    super(slice)\n  }\n}\n\nexport type EntityConfigActionsUnion =\n  SetPrimaryEntity\n","import { Observable, of, defer } from 'rxjs'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store, Action }    from '@ngrx/store'\nimport { Actions, Effect, ofType } from '@ngrx/effects'\n\n\n@Injectable()\nexport class EntityConfigEffects {\n  constructor(\n    private store: Store<any>,\n    private actions$: Actions<any>,\n  ) {}\n\n\n  @Effect()\n  init$: Observable<Action> =\n    defer(() => {})\n}\n","import {\n  iEntityConfigState,\n  iPrimaryEntityState,\n} from './state'\n\nexport var configInitialState: iPrimaryEntityState = {\n  primaryEntity: {\n    feature: \"\",\n    type: \"\",\n    id: \"\",\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  EntityConfigActionTypes,\n  EntityConfigActionsUnion,\n} from './actions'\n\nimport {\n  iEntityConfigState\n} from './state'\n\nexport function entityConfigReducer(\n  state: iEntityConfigState,\n  action: EntityConfigActionsUnion\n): iEntityConfigState {\n  var deltaState = {}\n\n  switch (action.type) {\n    case EntityConfigActionTypes.SET_PRIMARY_ENTITY:\n      deltaState = {\n       primaryEntity: _.omit(action.payload, 'feature'),\n      }\n      return _.assign({}, state, deltaState)\n    default:\n      return state\n  }\n}\n","import * as _ from 'lodash'\n\nimport { \n  createFeatureSelector, createSelector,\n  MemoizedSelector\n} from '@ngrx/store'\n\nimport { iEntityConfigState } from './state'\n\nexport const selectAppFeature  = createFeatureSelector<any>('app')\n\n/*\nlet selectPrimaryEntity = (state: iEntityConfigState) => {\n  return state.entity.primaryEntity\n}\nexport const selectEntityPrimaryEntity = createSelector(\n  selectAppFeature,\n  selectPrimaryEntity,\n  (appFeature: any, primaryEntity: any) => {\n    if(_.isEmpty(primaryEntity)) { \n      return null\n    }\n    else {\n      let type = primaryEntity.type\n      let id = primaryEntity.id\n      return appFeature.entities[type].entities[id]\n    }\n  }\n)\n\nexport const entityConfigSelectors = {\n  primaryEntity: selectEntityPrimaryEntity,\n}\n*/\n","export enum ActionTypes {\n  ADD_FEATURE = '[EntityFeature] ADD_FEATURE',\n  LOAD_PRIMARY_ENTITY = '[EntityFeature] LOAD_PRIMARY_ENTITY',\n  REGISTER_FEATURE = '[EntityFeature] REGISTER_FEATURE',\n  SELECT_PRIMARY_ENTITY = '[EntityFeature] SELECT_PRIMARY_ENTITY',\n  SET_PRIMARY_ENTITY = '[EntityFeature] SET_PRIMARY_ENTITY',\n  SET_PRIMARY_ENTITY_IDENTIFIER = '[EntityFeature] SET_PRIMARY_ENTITY_IDENTIFIER',\n}\n","import { Action } from '@ngrx/store'\n\nimport {\n  PayloadAction,\n} from '@ceo/state'\n\nimport { ActionTypes } from './action-types'\n\nexport class AddFeature extends PayloadAction {\n  readonly type = ActionTypes.ADD_FEATURE\n}\n\nexport class LoadPrimaryEntity extends PayloadAction {\n  readonly type = ActionTypes.LOAD_PRIMARY_ENTITY\n}\n\nexport class RegisterFeature extends PayloadAction {\n  readonly type = ActionTypes.REGISTER_FEATURE\n}\n\nexport class SelectPrimaryEntity implements Action {\n  readonly type = ActionTypes.SELECT_PRIMARY_ENTITY\n}\n\nexport class SetPrimaryEntity extends PayloadAction {\n  readonly type = ActionTypes.SET_PRIMARY_ENTITY\n}\n\nexport class SetPrimaryEntityIdentifier extends PayloadAction {\n  readonly type = ActionTypes.SET_PRIMARY_ENTITY_IDENTIFIER\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  of as observableOf,\n  combineLatest,\n} from 'rxjs'\n\nimport {\n  mergeMap,\n  map,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store } from '@ngrx/store'\n\nimport {\n  InflectionService,\n} from '@ceo/core'\n\nimport {\n  iRouterStateUrl,\n} from '@ceo/state'\n\nimport {\n  UrlSlug,\n} from '@ceo/shared'\n\nimport {\n  JsonApiEntity,\n  EntityCollection,\n} from '../classes/index'\n\nimport {\n  entityFeatureSelectors,\n} from '../state/feature/selectors'\n\n\nimport {\n  iEntityCollection,\n  iFeature,\n  iFeatureMap,\n  iResourceIdentifier,\n} from '../interfaces/index'\n\nimport { DataService } from './data.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RouteEntityTypeProvider {\n  private _features$: Observable<iFeatureMap>\n\n  constructor(\n    protected store: Store<any>,\n    protected dataService: DataService,\n    protected inflectionService: InflectionService,\n  ) {}\n\n  handleRouterNavigation$(\n    routerState: iRouterStateUrl\n  ): Observable<iResourceIdentifier> {\n\n    return this.features$.pipe(\n      mergeMap(features => this.featureRoutableEntities$(features)),\n      map(collection => {\n        return this.resourceIdentifierFromRouterState(collection, routerState)\n      }),\n    )\n  }\n\n  private resourceIdentifierFromRouterState(\n    collection: any,\n    routerState: iRouterStateUrl\n  ): iResourceIdentifier {\n\n    let entityTypeSlug = this.entityTypeSlugFromRouterState(routerState)\n    if(entityTypeSlug) {\n\n      let entity = collection.findByAttr('urlSlug', entityTypeSlug)\n      if(entity) {\n\n        let routerStateOpts =\n          this.resourceIdentifierOptsFromRouterState(entity, routerState)\n\n        return _.merge({}, entity.resourceIdentifier, routerStateOpts)\n      }\n      else {\n        return null\n      }\n    }\n    else {\n      return null\n    }\n  }\n\n  private resourceIdentifierOptsFromRouterState(entity, routerState) {\n    let params = routerState.params\n    let ri = <iResourceIdentifier>{}\n\n    let isPrimaryKey = (value, prop) => {\n      return _.includes(entity.primaryKeys, prop)\n    }\n\n    let idKey = _.pickBy(params, isPrimaryKey) \n    if(idKey) {\n      ri.id = _.head(_.values(idKey))\n    }\n\n    let filter = _.omit(params, _.keys(idKey))\n    if(!_.isEmpty(filter)) {\n      ri.filter = filter\n    }\n\n    return ri\n  }\n\n  private entityTypeSlugFromRouterState(\n    routerState: iRouterStateUrl\n  ): UrlSlug {\n    let segments = _.map(routerState.segments, 'path')\n\n    if(_.head(segments) == 'app') {\n      segments = _.drop(segments)\n    }\n\n    let params = _.values(routerState.params)\n\n\n    let segmentsWithoutParam = (segments, param) => {\n      if(_.last(segments) == param) {\n        return _.dropRight(segments)\n      }\n      else {\n        return segments\n      }\n\n    }\n    let finalSegments = _.reduce(params, segmentsWithoutParam, segments)\n\n    return finalSegments[0]\n  }\n\n  private featureRoutableEntities$(features) {\n    let getRoutableEntities = _.bind(this.getRoutableEntities, this)\n    let routableEntities = _.map(features, getRoutableEntities)\n\n    return combineLatest(routableEntities).pipe(\n      map(routableEntityCollections => {\n        let entities = _.flatten(_.map(routableEntityCollections, 'entities'))\n        return new EntityCollection(entities)\n      }),\n    )\n  }\n\n  private getRoutableEntities(feature, featureName) {\n    return this.resourceConfigurations$(feature).pipe(\n      map(collection => this.routableResourceConfigurations(collection)),\n      map(collection => this.buildResourceIdentifiers(feature, collection)),\n    )\n  }\n\n  private routableResourceConfigurations(\n    collection: iEntityCollection\n  ): iEntityCollection {\n    return collection.where({isRoutable: true})\n  }\n\n  private resourceConfigurations$(feature) {\n    let ri = {\n      feature: feature.name,\n      type: 'resource-configurations',\n    }\n    let dataOpts = {\n      syncWithApi: false,\n    }\n\n    return this.dataService.get$(ri, dataOpts)\n  }\n\n  private buildResourceIdentifiers(feature, collection) {\n    let buildResourceIdentifier = (entity) => {\n      let ri = {\n        feature: feature.name,\n        type: entity.resourceType,\n      }\n\n      let attributes = {\n        resourceIdentifier: ri,\n        urlSlug: entity.displaySlug,\n        primaryKeys: entity.primaryKeys\n      }\n\n      let data = {\n        id: entity.id,\n        type: 'resource-identifiers',\n        attributes: attributes,\n      }\n      return new JsonApiEntity(data)\n    }\n    let entities = _.map(collection.entities, buildResourceIdentifier)\n    return new EntityCollection(entities)\n  }\n\n  private get features$(): Observable<iFeatureMap> {\n    if(!this._features$) {\n      this._features$ = this.getFeatures$()\n    }\n\n    return this._features$\n  }\n\n  private getFeatures$(): Observable<iFeatureMap> {\n    return <Observable<iFeatureMap>>this.store.select(entityFeatureSelectors.features)\n  }\n\n\n}\n","import * as _ from 'lodash'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  InflectionService,\n}   from '@ceo/core'\n\nimport {\n  iResourceIdentifier,\n} from '../interfaces/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ResourceIdentifierService {\n  constructor(\n    private inflectionService: InflectionService,\n  ) {}\n\n  isValid(ri: iResourceIdentifier): boolean {\n    return _.has(ri, 'feature') && _.has(ri, 'type')\n  }\n\n  isScope(ri: iResourceIdentifier): boolean {\n    return _.has(ri, 'filter.scope')\n  }\n\n  isSameResource(\n    riOne: iResourceIdentifier,\n    riTwo: iResourceIdentifier,\n  ): boolean {\n    return _.isEqual(riOne, riTwo)\n  }\n\n  scopeName(ri: iResourceIdentifier): string {\n    let scopeKey = _.get(ri, 'filter.scope')\n    return this.inflectionService.camelCase(scopeKey)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  defer,\n  of as observableOf,\n} from 'rxjs'\n\nimport {\n  map,\n  tap,\n  mergeMap,\n  switchMap,\n  distinctUntilChanged,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  Store, Action,\n  createSelector,\n} from '@ngrx/store'\n\nimport { Actions, Effect, ofType, }  from '@ngrx/effects'\n\nimport { ROUTER_NAVIGATION } from '@ngrx/router-store'\n\nimport {\n  FeatureActions,\n} from './actions/index'\n\nimport {\n  EntityActions,\n} from '../../classes/index'\n\nimport {\n  DataService,\n} from '../../services/data.service'\n\nimport {\n  RouteEntityTypeProvider,\n} from '../../services/route-entity-type-provider.service'\n\nimport {\n  ResourceIdentifierService,\n} from '../../services/resource-identifier.service'\n\nimport {\n  SelectorProvider,\n} from '../../services/selectors/selector-provider.service'\n\nimport {\n  entityFeatureSelectors,\n} from './selectors'\n\n@Injectable()\nexport class FeatureEffects {\n  constructor(\n    private store: Store<any>,\n    private actions$: Actions<any>,\n    protected dataService: DataService,\n    protected routeEntityTypeProvider: RouteEntityTypeProvider,\n    protected resourceIdentifierService: ResourceIdentifierService,\n    protected selectorProvider: SelectorProvider,\n  ) {}\n\n  @Effect()\n  handleRouterNavigation$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(ROUTER_NAVIGATION),\n        mergeMap((action: any) => {\n          return this.routeEntityTypeProvider\n            .handleRouterNavigation$(action.payload.routerState)\n        }),\n        distinctUntilChanged(this.resourceIdentifierService.isSameResource),\n        tap((payload: any) => {\n          if(this.resourceIdentifierService.isValid(payload)) {\n            this.dataService.get$(payload)\n          }\n        }),\n        map((payload: any) => {\n          return new FeatureActions.SetPrimaryEntityIdentifier(payload)\n        }),\n      )\n\n  @Effect()\n  registerFeature$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType('[EntityFeature] REGISTER_FEATURE'),\n        map((action: any) => {\n          let feature = action.payload\n          let addFeatureAction = new FeatureActions.AddFeature(feature)\n          return addFeatureAction\n        })\n      )\n\n  @Effect()\n  loadPrimaryEntity$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType('[EntityFeature] LOAD_PRIMARY_ENTITY'),\n        mergeMap((action: any) => {\n          return this.dataService.get$(action.payload)\n        }),\n      )\n\n  @Effect()\n  selectPrimaryEntity$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType('[EntityFeature] SELECT_PRIMARY_ENTITY'),\n        mergeMap((action: any) => {\n          return this.store.select(entityFeatureSelectors.primaryEntityIdentifier)\n        }),\n        distinctUntilChanged(this.resourceIdentifierService.isSameResource),\n        mergeMap((payload: any) => {\n          if(_.isNil(payload)) {\n            return observableOf(null)\n          }\n          else {\n            let selector = this.selectorProvider.provide(payload)\n            return this.store.select(<any>selector)\n          }\n        }),\n        map((payload: any) => {\n          return new FeatureActions.SetPrimaryEntity(payload)\n        })\n      )\n\n  @Effect()\n  init$: Observable<Action> =\n    defer(() => {\n      return observableOf(new FeatureActions.SelectPrimaryEntity())\n    })\n}\n","import { iFeatureState } from './state'\n\nexport const featureInitialState: iFeatureState = {\n  features: {},\n  primaryEntity: {\n    resourceIdentifier: null,\n    entity: null\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  FeatureActionsUnion,\n} from './actions/index'\n\nimport {\n  iFeatureState\n} from './state'\n\nexport function featureReducer(\n  state: iFeatureState,\n  action: FeatureActionsUnion\n): iFeatureState {\n\n  var stateDelta = <any> {}\n\n  switch (action.type) {\n    case '[EntityFeature] ADD_FEATURE':\n\n      let existingFeatures = state.features\n      let newFeature = action.payload\n\n      let featuresDelta = {}\n      featuresDelta[newFeature.name] = newFeature\n      let newFeatures = Object.assign({}, existingFeatures, featuresDelta)\n\n      stateDelta = <any> {\n        features: newFeatures\n      }\n\n      break\n\n    case '[EntityFeature] SET_PRIMARY_ENTITY':\n      stateDelta = {\n        primaryEntity: _.cloneDeep(state.primaryEntity)\n      }\n\n      stateDelta.primaryEntity.entity = action.payload\n\n      break\n\n    case '[EntityFeature] SET_PRIMARY_ENTITY_IDENTIFIER':\n      stateDelta = {\n        primaryEntity: _.cloneDeep(state.primaryEntity)\n      }\n\n      stateDelta.primaryEntity.resourceIdentifier = action.payload\n     \n      break\n\n    default:\n      break\n  }\n\n  return Object.assign({}, state, stateDelta)\n}\n","import {\n  FeatureEffects,\n  featureInitialState as initialState,\n  featureReducer as reducer,\n} from './feature/index'\n\nexport {\n  featureInitialState as initialState,\n  featureReducer as reducer,\n} from './feature/index'\n\nexport const effects: any[] = [\n  FeatureEffects,\n]\n","import { InjectionToken } from '@angular/core'\n\nexport const FEATURE_CONFIG = new InjectionToken<any>(\"Entity Feature Config\")\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  of as observableOf,\n  defer,\n  combineLatest,\n} from 'rxjs'\n\nimport {\n  switchMap,\n  catchError, map, mergeMap,\n  flatMap, filter, tap,\n  exhaustMap,\n} from 'rxjs/operators'\n\nimport { Injectable, Inject } from '@angular/core'\n\n// @ngrx imports\nimport { Store, Action }           from '@ngrx/store'\nimport {\n  Actions, Effect,\n  ofType, OnIdentifyEffects,\n  OnInitEffects, OnRunEffects,\n  EffectNotification,\n} from '@ngrx/effects'\n\nimport {\n  typeFor, PayloadAction,\n  applicationConfigSelectors, ApplicationConfigActions,\n  systemComponentsSelectors, SystemComponentsActions,\n} from '@ceo/state'\n\nimport { EntityService }                       from './entity.service'\n\nimport {\n  FeatureActions,\n} from '../state/index'\n\nimport {\n  EntityActions,\n  EntityActionsMap,\n} from '../classes/index'\n\nimport {\n  EntityConfigActions,\n} from '../state/index'\n\nimport {\n  iEntityConstructor,\n  iApiResponse,\n  iEntitySliceNamePayload,\n  iResourceIdentifier,\n  iEntityCollection,\n  iEntityMap,\n} from '../interfaces/index'\n\nimport {\n  FEATURE_CONFIG,\n} from '../util/tokens'\n\nimport { ResourceIdentifierService } from './resource-identifier.service'\n\n@Injectable()\nexport class EntityEffects\n  implements OnIdentifyEffects, OnInitEffects {\n\n  featureName: string = 'Feature'\n\n  constructor(\n    protected store: Store<any>,\n    protected actions$: Actions<any>,\n    protected entityService: EntityService,\n    @Inject(FEATURE_CONFIG) protected featureConfig,\n    protected resourceIdentifierService: ResourceIdentifierService\n  ) {\n    this.featureName = featureConfig.name\n  }\n\n  @Effect()\n  init$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(this.featureAction(\"INIT\")),\n        switchMap((action: PayloadAction) => {\n          let registerFeatureAction = new FeatureActions.RegisterFeature(this.featureConfig)\n          let loadSeedAction = new EntityActions.LoadSeedData(this.featureName, this.featureConfig)\n          return [registerFeatureAction, loadSeedAction]\n        }),\n      )\n\n  @Effect()\n  seed$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(this.featureAction(\"LOAD_SEED_DATA\")),\n        switchMap((action: PayloadAction) => {\n          var feature = action.payload\n          let seeds = action.payload.seedEntities\n\n          let buildLoadAction = (ri: iResourceIdentifier) => {\n            let sliceName = this.getFeatureEntitySlice(feature.name, ri.type)\n            return new EntityActions.Load(sliceName, ri)\n          }\n\n          return _.map(seeds, buildLoadAction)\n        }),\n      )\n\n  @Effect()\n  load$: Observable<Action> =\n    this.actions$\n     .pipe(\n       ofType(...this.sliceActions(\"LOAD\")),\n       mergeMap((action: PayloadAction) => {\n         let resourceOpts = this.buildResourceOpts(action)\n         return this.entityService.get$(resourceOpts)\n       }),\n       map((payload: iApiResponse) => {\n         return new EntityActions.AsyncSuccess(this.featureName, payload)\n       })\n     )\n\n  @Effect()\n  add$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(...this.sliceActions(\"ADD\")),\n        mergeMap((action: PayloadAction) => {\n          let resourceOpts = this.buildResourceOpts(action)\n          return this.entityService.create$(resourceOpts)\n        }),\n        map((payload: iApiResponse) => {\n          return new EntityActions.AsyncSuccess(this.featureName, payload)\n        })\n      )\n\n  @Effect()\n  update$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(...this.sliceActions(\"UPDATE\")),\n        mergeMap((action: PayloadAction) => {\n          let resourceOpts = this.buildResourceOpts(action)\n          return this.entityService.update$(resourceOpts)\n        }),\n        map((payload: iApiResponse) => {\n          return new EntityActions.AsyncSuccess(this.featureName, payload)\n        }),\n      )\n\n  @Effect()\n  asyncSuccess$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(this.featureAction(\"ASYNC_SUCCESS\")),\n        map((action: PayloadAction) => {\n          return {\n            resourceIdentifier: action.payload.resourceIdentifier,\n            data: this.groupedEntities(action.payload),\n          }\n        }),\n        switchMap((payload: any) => {\n          return this.buildAddToStoreActions(payload)\n        })\n      )\n\n  @Effect()\n  delete$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(...this.sliceActions(\"DELETE\")),\n        mergeMap((action: PayloadAction) => {\n          let resourceOpts = this.buildResourceOpts(action)\n          return this.entityService.delete$(resourceOpts)\n        }),\n        map((payload: iApiResponse) => {\n          return new EntityActions.DeleteSuccess(\n            this.getEntitySlice(payload.resourceIdentifier.type),\n            payload.data\n          )\n        })\n      )\n\n  @Effect()\n  loadApplicationResource$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType('[ApplicationConfig] LOAD_RESOURCE_BY_ID'),\n        mergeMap(() => {\n          return this.store.select(applicationConfigSelectors.resourceById)\n        }),\n        filter((payload) => this.isValidPayload(payload)),\n        mergeMap((payload) => {\n          return this.entityService.get$(payload)\n        }),\n        filter((payload) => this.isValidResource(payload)),\n        map((payload: any) => {\n          return new ApplicationConfigActions.SetPrimaryEntity(payload)\n        })\n      )\n\n\n  ngrxOnIdentifyEffects() {\n    return this.featureName\n  }\n\n  ngrxOnInitEffects(): Action {\n    let initFeatureAction = new EntityActions.Init(this.featureName, this.featureConfig)\n    return initFeatureAction\n  }\n\n  // Private methods\n\n  private buildAddToStoreActions(payload) {\n    let actions = []\n    let addActions = _.map(payload.data, _.bind(this.buildAddEntitiesAction, this))\n    actions = actions.concat(addActions)\n\n    if(this.resourceIdentifierService.isScope(payload.resourceIdentifier)) {\n      let scopeAction = this.buildAddScopeEntitiesAction(payload)\n      actions = actions.concat([scopeAction])\n    }\n\n    return _.flatten(actions)\n  }\n\n  private buildAddEntitiesAction(payload: iEntitySliceNamePayload) {\n    return new EntityActions.AddStoreEntities(\n      this.getEntitySlice(payload.sliceName),\n      payload.entities,\n    )\n  }\n\n  private buildAddScopeEntitiesAction(payload: any) {\n    let ri = payload.resourceIdentifier\n    let scopeName = this.resourceIdentifierService.scopeName(ri)\n\n    var sliceName = ri.type\n    let hasEntityType = (payload: iEntitySliceNamePayload): boolean => {\n      return payload.sliceName == sliceName\n    }\n\n    let sliceNamePayload = _.find(payload.data, hasEntityType)\n    let entities = sliceNamePayload.entities\n\n    let actionPayload = {\n      scope: scopeName,\n      entities: entities\n    }\n\n    return new EntityActions.SetScopeEntities(\n      this.getEntitySlice(sliceName),\n      actionPayload,\n    )\n  }\n\n  private groupedEntities(payload: iApiResponse): iEntitySliceNamePayload[] {\n    let entities = payload.data\n\n    let groupedBySlice = (entityTypeMap, entity) => {\n      let sliceName = entity.constructor.sliceName\n      var entities = []\n      if(entityTypeMap[sliceName]) {\n        entities = entityTypeMap[sliceName].entities\n      }\n      entities.push(entity)\n      entityTypeMap[sliceName] = {\n        sliceName: sliceName,\n        entities: entities\n      }\n\n      return entityTypeMap\n    }\n\n    return  _.values(_.reduce(entities, groupedBySlice, {}))\n  }\n\n\n  private isValidPayload(payload) {\n    //TODO: @Deepak  - it should ensure the payload is for THIS feature\n    return _.has(payload, 'feature') &&\n    _.has(payload, 'type') &&\n    _.has(payload, 'id')\n  }\n\n  private isValidResource(payload) {\n    return payload\n  }\n\n  private buildResourceOpts(action) {\n    let ri = {\n      type: _.last(_.split(action.slice, \".\"))\n    }\n    ri = _.merge({}, ri, action.payload)\n\n    return {\n      payload: action.payload,\n      type: _.last(_.split(action.slice, \".\")),\n      data: action.payload.data,\n      resourceIdentifier: ri,\n    }\n  }\n\n  private featureAction(actionName) {\n    let featureName = this.featureConfig.name\n    return typeFor(featureName, EntityActionsMap[actionName])\n  }\n\n  private sliceActions(actionName) {\n    let buildActionType = (sliceName) => {\n      return typeFor(sliceName, EntityActionsMap[actionName])\n    }\n    let sliceActions = _.map(this.featureConfig.sliceNames, buildActionType)\n    return sliceActions\n  }\n\n  private getSliceName(resourceOpts) {\n    return _.join([resourceOpts.feature, 'entities', resourceOpts.type], '.')\n  }\n\n  private getEntitySlice(sliceName) {\n    return this.getFeatureEntitySlice(this.featureName, sliceName)\n  }\n\n  private getFeatureEntitySlice(featureName, sliceName) {\n    return _.join([featureName,'entities', sliceName], '.')\n  }\n}\n","import { DataService }                  from './data.service'\nimport { EntityCloner }                 from './entity-cloner.service'\nimport { EntityEffects }                from './entity.effects'\nimport { EntityFactory }                from './entity-factory.service'\nimport { EntityService }                from './entity.service'\nimport { EntityRelationshipProvider }   from './entity-relationship-provider.service'\nimport { EntityTypeProviderService }    from './entity-type-provider.service'\nimport { ResourceIdentifierService }    from './resource-identifier.service'\nimport { RouteEntityTypeProvider }      from './route-entity-type-provider.service'\nimport { DataService as EntityDataService }              from './data.service'\n\nimport * as attributeBuilders from './attribute-builders/index'\nimport * as selectors         from './selectors/index'\n\nexport const entityServices: any[] = [\n  DataService,\n  EntityCloner,\n  EntityEffects,\n  EntityFactory,\n  EntityRelationshipProvider,\n  EntityService,\n  EntityTypeProviderService,\n  ResourceIdentifierService,\n  RouteEntityTypeProvider,\n  EntityDataService,\n  ...attributeBuilders.services,\n  ...selectors.services,\n]\n\nexport { DataService }\nexport { EntityCloner }\nexport { EntityDataService }\nexport { EntityEffects }\nexport { EntityFactory }\nexport { EntityService }\nexport { EntityRelationshipProvider }\nexport { EntityTypeProviderService }\nexport { ResourceIdentifierService }\nexport { RouteEntityTypeProvider }\n\nexport {\n  EntityAttributeBuilder,\n  JsonApiEntityAttributeBuilder,\n} from './attribute-builders/index'\n\nexport {\n  EntitySelectorNameService,\n  EntitySelectorService,\n  EntitySelectorProvider,\n} from './selectors/index'\n","import {\n  EntityEffects,\n  RouteEntityTypeProvider,\n  ResourceIdentifierService,\n} from '../../../services/index'\n\nexport const buildEntityEffects = (\n  store,\n  actions,\n  entityService,\n  featureConfig,\n  resourceIdentifierService,\n) => {\n\n  return new EntityEffects(\n    store,\n    actions,\n    entityService,\n    featureConfig,\n    resourceIdentifierService,\n  )\n}\n","import * as _ from 'lodash'\n\nimport { iEntityConfig } from '../../../interfaces'\n\nlet buildEntityConfig  = (\n  apiConfig,\n  defaultEntityConfigClass,\n  params,\n): iEntityConfig  => {\n\n  let configClass =\n    _.get(params, 'entityConfigClass', defaultEntityConfigClass)\n\n  let configParams = _.merge(\n    _.omit(params, ['entityConfigClass']),\n    {apiConfig: apiConfig}\n  )\n\n  return new configClass(configParams)\n}\n\nexport const buildEntityConfigs = (\n  entityConfigParams,\n  apiConfig,\n  defaultEntityConfigClass,\n) => {\n  let build =\n    _.partial(buildEntityConfig, apiConfig, defaultEntityConfigClass)\n\n  return _.map(\n    _.sortBy(entityConfigParams, 'type'),\n    build\n  )\n}\n","import { createEntityAdapter }  from '@ngrx/entity';\n\nimport {\n  iEntity,\n} from '../../../interfaces/index'\n\nexport function buildEntityInitialState(entityType): any {\n  let createInitialStateForEntityType = (name) => {\n    let prop = {};\n    let initialState = createEntityAdapter<iEntity>().getInitialState();\n    let customInitialState = {\n      selectedEntityId: null,\n      config: {\n        entityType: entityType\n      },\n      scopes: {\n      },\n    }\n    initialState =\n      Object.assign(\n        {},\n        initialState,\n        customInitialState,\n        entityType.config.initialState\n      )\n    prop[name] = initialState\n    return prop;\n  }\n\n  let sliceName = entityType.sliceName;\n  return createInitialStateForEntityType(sliceName);\n}\n","import {\n  EntityService,\n} from '../../../services/index'\n\nexport function buildEntityService(\n  entityFactory,\n  apiService,\n  attributeBuilder,\n): any {\n\n  return new EntityService(entityFactory, apiService, attributeBuilder)\n}\n","import { EntityTypeProviderService } from '../../../services';\n\nexport const buildEntityTypeProvider = (featureConfig) => {\n  return new EntityTypeProviderService(featureConfig)\n}\n","import * as _ from 'lodash';\n\nimport { classify } from '@ceo/core';\n\nlet buildEntityTypeClass = (entityConfig, baseEntity) => {\n  class Entity extends baseEntity {\n    static _sliceName: string = entityConfig.name;\n    static config: any = entityConfig;\n  }\n\n  return Entity;\n}\n\nexport function buildEntityTypes(\n  entityConfigs,\n  baseEntity\n) {\n\n  let addEntityType = (entityTypes, entityConfig) => {\n    let className = classify(entityConfig.name)\n    let entityTypeClass = buildEntityTypeClass(entityConfig, baseEntity)\n    entityTypes[className] = entityTypeClass\n    return entityTypes\n  }\n\n  return _.reduce(entityConfigs, addEntityType, {});\n}\n","import {\n  FeatureConfig,\n} from '../../../classes/index'\n\nexport function buildFeatureConfig(config): any {\n  return new FeatureConfig(config)\n}\n","import * as _ from 'lodash'\n\nimport {\n  FeatureConfig,\n} from '../../../classes/index'\n\nimport { buildEntityInitialState } from '../entity/index'\n\nexport function buildFeatureInitialState(config): any {\n  let featureConfig = new FeatureConfig(config)\n\n  let entityTypes = featureConfig.entityTypes;\n  let entityStates = _.reduce(\n    _.map(entityTypes, buildEntityInitialState),\n    _.merge,\n    {}\n  );\n\n  return {\n    entities: entityStates\n  }\n}\n","import * as _ from 'lodash'\n\nimport { pipe } from 'rxjs'\nimport { filter } from 'rxjs/operators'\n\nimport {\n  select,\n  createSelector,\n  compose,\n  ActionReducer,\n  createFeatureSelector,\n  combineReducers,\n} from '@ngrx/store'\n\nimport {\n  iEntityState,\n  iEntity,\n  iEntityCollection,\n  iEntityConfig\n} from '../../../interfaces'\n\nimport {\n  EntityAdapterFactory,\n} from '../../../classes'\n\nimport {\n  entityConfigReducer,\n} from '../../../state'\n\nimport {\n  buildEntitySelectors,\n  buildRootSelector,\n  buildSliceSelector,\n  buildFeatureSelector,\n} from '../selectors/index'\n\nexport function buildFeatureReducer(\n  featureConfig,\n  selectorService,\n  selectorNameService,\n  buildCustomSelectors,\n): ActionReducer<any> {\n\n  let factory = new EntityAdapterFactory(featureConfig)\n  let entityAdapters = factory.adapters\n\n  buildFeatureSelector(\n    featureConfig,\n    entityAdapters,\n    selectorService,\n    selectorNameService,\n    buildCustomSelectors,\n  )\n\n  var featureEntitiesReducerPrefix = _.join([featureConfig.name, 'entities'], '.')\n\n  var entityReducers = _.reduce(_.map(entityAdapters, buildEntityReducer), _.merge, {})\n\n  // @Luis: action should not be any\n  let featureEntitiesReducer = (state: iEntityState<iEntity>, action: any) => {\n    let sliceName = action.slice\n\n    if(_.startsWith(sliceName, featureEntitiesReducerPrefix)) {\n      let entitySliceName = _.last(_.split(sliceName, '.'))\n      let stateDelta = {}\n      if(entitySliceName) {\n        stateDelta[entitySliceName] = \n          entityReducers[entitySliceName](state[entitySliceName], action)\n      }\n      return Object.assign({}, state, stateDelta)\n    }\n    else {\n      return state\n    }\n  }\n\n  let reducers = {\n    config: entityConfigReducer,\n    entities: featureEntitiesReducer,\n  }\n\n  return combineReducers(reducers)\n}\n\nlet buildEntityReducer = (entityTypeAdapter) => {\n  let reducer = {}\n  let key = entityTypeAdapter.sliceName\n  reducer[key] = entityTypeAdapter.reducer\n  return reducer\n}\n","import {\n  JsonApiEntity,\n} from '../classes/index'\n\nimport {\n  FEATURE_CONFIG,\n} from './tokens'\n\nlet featureConfig = {\n  name: 'Default Feature',\n  entityConfigs: [],\n  baseEntityType: JsonApiEntity,\n}\n\nlet featureConfigProvider = {\n  provide: FEATURE_CONFIG,\n  useValue: featureConfig,\n  multi: true,\n}\n\nexport const providers: any[] = [\n  featureConfigProvider,\n]\n","import { NgModule } from '@angular/core'\n\nimport { StoreModule }                 from '@ngrx/store'\nimport { EffectsModule } from '@ngrx/effects'\n\nimport {\n  effects,\n  initialState,\n  reducer,\n} from './state/state'\n\nimport { entityServices } from './services/index'\nimport { providers }from './util/index'\n\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(\n      'entity',\n      reducer,\n      {\n        initialState: initialState,\n      }\n    ),\n    EffectsModule.forFeature([\n      ...effects,\n    ]),\n  ],\n  declarations: [],\n  providers: [\n    ...entityServices,\n    ...providers,\n  ]\n})\nexport class EntityModule { }\n","import {\n  Observable,\n  BehaviorSubject,\n} from 'rxjs'\n\nimport {\n  iFormWrapper,\n} from '@ceo/shared'\n\nimport {\n  iEntity,\n} from '../../entity/index'\n\nimport {\n  iEntityFormManager,\n} from '../interfaces/index'\n\nexport class EntityFormManager implements iEntityFormManager {\n  private _entity: iEntity\n  private _form: iFormWrapper\n\n  private _entity$: Observable<iEntity>\n  private _form$: BehaviorSubject<iFormWrapper>\n\n  constructor(\n    entity$: Observable<iEntity>,\n    form$: BehaviorSubject<iFormWrapper>,\n  ) {\n    this.entity$ = entity$\n    this.form$ = form$\n  }\n\n  set entity$(entity$: Observable<iEntity>) {\n    this._entity$ = entity$\n    entity$.subscribe(entity => this.entity = entity)\n  }\n\n  get entity$(): Observable<iEntity> {\n    return this._entity$\n  }\n\n  set form$(form$: BehaviorSubject<iFormWrapper>) {\n    this._form$ = form$\n    form$.subscribe(form => this.form = form)\n  }\n\n  get form$(): BehaviorSubject<iFormWrapper> {\n    return this._form$\n  }\n\n  get entity(): iEntity {\n    return this._entity\n  }\n\n  set entity(entity: iEntity)  {\n    this._entity = entity\n  }\n\n  get form(): iFormWrapper {\n    return this._form\n  }\n\n  set form(form: iFormWrapper) {\n    this._form = form\n  }\n\n  formToEntity() {\n    this.entity.updateAttributes(this.form.value)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  iEntityCollection,\n  JsonApiEntity,\n  buildEntityRelationshipProperties,\n  defineEntityRelationshipGetSet,\n} from '../../entity/index'\n\nimport {\n  iFormEntity,\n} from '../interfaces/index'\n\nexport class FormEntity extends JsonApiEntity implements iFormEntity {\n  private _formFields$: Observable<iEntityCollection>\n\n  static relationshipNames: string[] = [\n    'form-fields',\n  ]\n\n  formFields$: any\n}\n//buildEntityRelationshipProperties(FormEntity)\n\nlet buildEntityRelationship = (name) => {\n  defineEntityRelationshipGetSet(FormEntity, name)\n}\n_.map(FormEntity.relationshipNames, buildEntityRelationship)\n","import { JsonApiEntity } from '../../entity/index'\n\nexport class FormFieldEntity extends JsonApiEntity {}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  of as observableOf\n} from 'rxjs'\n\nimport { map }        from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iEntityCollection\n} from '../../../../../entity/index'\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DropdownOptionsFactory {\n  build(data$: Observable<iEntityCollection>, entityKey) {\n    var dropdownData$ = data$.pipe(map(entityCollection =>{\n      var getOptions = (entity) => {\n        return this.getOptions(entityKey, entity)\n      }\n      return _.map(entityCollection.entities, getOptions)\n    }))\n    return dropdownData$\n  }\n\n  getOptions(key, entity) {\n    return {\n      key: entity.id,\n      value: entity.attributes[key]\n    }\n  }\n}\n\n","export const resourceList = [\n  {\n    key: 'default_project_roles',\n    value: 'name',\n    name: 'project-roles'\n  }\n]\n","import {\n  Observable,\n  of as observableOf\n} from 'rxjs'\n\nimport { Injectable } from '@angular/core';\n\nimport {\n  kebabCase,\n  pluralize,\n  snakeCase,\n} from '@ceo/core'\n\nimport {\n  iEntity,\n  iEntityCollection,\n  DataService,\n} from '../../../../../entity/index'\n\n\nimport { DropdownOptionsFactory } from './dropdown-options-factory.service'\n\nimport { resourceList } from './resource-list'\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DropdownFactory {\n  private selectorData$: Observable<iEntityCollection>\n\n  constructor(\n    private dataService: DataService,\n    private optionsFactory: DropdownOptionsFactory,\n  ) { }\n\n  build(resolvable): any {\n    var entityKey = 'name';\n    var name = pluralize(resolvable.name.replace('_id', ''));\n    let resource = resourceList.filter(item => item.key === name)\n    if(resource.length > 0){\n      entityKey = resource[0].value\n      this.selectorData$ = this.getSelectors$(resource[0].name)\n    }\n    else{\n      this.selectorData$ = this.getSelectors$(name)\n    }\n    return this.optionsFactory.build(this.selectorData$, entityKey);\n  }\n\n  getSelectors$(type) {\n    let resourceOpts = {\n      feature: \"app\",\n      type: type\n    }\n    return this.dataService.get$(resourceOpts);\n  }\n}\n\n","import * as _ from 'lodash'\n\nimport { Observable } from 'rxjs'\n\nimport {\n  of as observableOf,\n} from 'rxjs'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  Validators as NgValidators,\n} from '@angular/forms'\n\n\nimport {\n  FormControlType,\n  FormMemberType,\n  InputTypeAttribute,\n  iFormMemberFactoryParams,\n} from '@ceo/shared'\n\nimport {\n  iEntity,\n} from '../../../../../entity/index'\n\nimport { DropdownFactory as SelectFactory } from './dropdown-factory.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormControlDataFactory {\n  static defaultControlType: FormControlType = 'input'\n  static formMemberType: FormMemberType = 'form-item'\n\n  constructor(\n    private selectFactory: SelectFactory,\n  ) { }\n\n  build(\n    entity: iEntity,\n  ): Partial<iFormMemberFactoryParams> {\n\n    return {\n      type: FormControlDataFactory.formMemberType,\n      data: {\n        label: this.labelParams(entity),\n        control: this.controlParams(entity)\n      }\n    }\n  }\n\n  private labelParams(entity: iEntity) {\n    return {\n      text: entity.displayName,\n    }\n  }\n\n  private controlParams(entity: iEntity) {\n    let params = {\n      controlType: this.controlType(entity),\n      placeholder: entity.displayName,\n      key: entity.name,\n      validators: this.buildEntityValidators(entity),\n      displayName: entity.displayName,\n    }\n\n    let controlTypeParams =\n      this.controlTypeData(entity, this.controlType(entity))\n\n    return _.defaults(params, controlTypeParams)\n  }\n\n  private controlType(entity): FormControlType {\n    if(entity.name.includes(\"_id\")) {\n      return 'select' as FormControlType\n    }\n\n    if(entity.dataType == 'boolean') {\n      return 'checkbox' as FormControlType\n    }\n\n    return FormControlDataFactory.defaultControlType\n  }\n\n  private controlTypeData(entity: iEntity, controlType: FormControlType) {\n    switch(controlType) {\n      case \"select\": {\n        return this.selectControlTypeData(entity)\n      }\n      case \"input\": {\n        return this.inputControlTypeData(entity)\n      }\n      default: {\n        return {}\n      }\n    }\n  }\n\n  private selectControlTypeData(entity) {\n    return {\n      options: this.selectFactory.build(entity)\n    }\n  }\n\n  private inputControlTypeData(entity) {\n    return {\n      required: true,\n      inputType: this.inputType(entity),\n    }\n  }\n\n  private inputType(entity: iEntity): InputTypeAttribute {\n    var inputType = 'text'\n    if(entity.name == 'email') {\n      inputType = 'email'\n    }\n    if(entity.name == 'password') {\n      inputType = 'password'\n    }\n\n    return inputType as InputTypeAttribute\n  }\n\n  private buildEntityValidators(entity: iEntity) {\n    let validators = [NgValidators.required]\n\n    if(entity.name == 'email') {\n      validators.push(NgValidators.email)\n    }\n    return validators\n  }\n}\n","import {\n  of as observableOf,\n  Observable\n} from 'rxjs'\n\nimport { Injectable } from '@angular/core'\nimport {\n  Validators as NgValidators,\n} from '@angular/forms'\n\nimport { kebabCase } from '@ceo/core'\n\nimport {\n  iEntity,\n  iEntityCollection,\n} from '../../../../../entity/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormControlValidatorFactory {\n  build(\n    resolvable: iEntity,\n  ): any {\n\n    return {\n      type: 'form-item',\n      data: {\n        control: {\n          validators: [ NgValidators.required ] ,\n        }\n      }\n    }\n  }\n}\n","import * as _                 from 'lodash'\nimport { Observable, empty  } from 'rxjs'\n\nimport { map } from 'rxjs/operators'\n\nimport { Injector, Injectable, InjectionToken } from '@angular/core'\n\nimport {\n  kebabCase,\n  pluralize,\n  snakeCase,\n} from '@ceo/core'\n\nimport {\n  iEntity,\n  EntityData,\n  JsonApiEntity,\n} from '../../../../../entity/index'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormGroupDataFactory {\n  build(\n    entity: iEntity\n  ): any {\n    let resourceType = this.pluralizeType(entity)\n\n    return {\n      memberType: 'form-group',\n      key: this.inputKey(entity),\n      resourceType: resourceType,\n      formName: this.buildFormName(resourceType)\n    }\n  }\n\n  private pluralizeType(entity): string {\n    return pluralize(snakeCase(entity.className))\n  }\n\n  private inputKey(entity) {\n    return `${entity.name}_attributes`\n  }\n\n  private buildFormName(resourceType: string, formType: string = 'edit') {\n    return `${resourceType}.${formType}`\n  }\n}\n","import { Injectable } from '@angular/core'\n\nimport {\n  iEntity,\n} from '../../../../../entity/index'\n\nimport { FormControlDataFactory } from './form-control-data-factory.service'\nimport { FormControlValidatorFactory } from './form-control-validator-factory.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormItemDataFactory {\n  constructor(\n    private formControlDataFactory: FormControlDataFactory,\n    private formControlValidatorFactory: FormControlValidatorFactory,\n  ) { }\n\n  build(\n    entity: iEntity\n  ): any {\n    let factory = this.resolveParamsFactory(entity)\n    return factory.build(entity)\n  }\n\n  private resolveParamsFactory(entity: iEntity) {\n    switch(entity.type) {\n      case \"resource-attributes\": {\n        return this.formControlDataFactory\n      }\n      case \"resource-validators\": {\n        return this.formControlValidatorFactory\n      }\n      default: {\n        return this.formControlDataFactory\n      }\n    }\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport { map } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iEntity,\n} from '../../../../../entity/index'\n\nimport {\n  FormGroupDataFactory,\n  FormItemDataFactory,\n} from '../data-factories/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataFactoryResolver {\n  constructor(\n    private formGroupDataFactory: FormGroupDataFactory,\n    private formItemDataFactory: FormItemDataFactory,\n  ) {}\n\n  resolve(\n    entity: iEntity,\n  ) {\n    switch(entity.type) {\n      case \"resource-associations\": {\n        return this.formGroupDataFactory\n      }\n      case \"resource-attributes\": {\n        return this.formItemDataFactory\n      }\n      case \"resource-validators\": {\n        return this.formItemDataFactory\n      }\n      default: {\n        return this.formItemDataFactory\n      }\n    }\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport { map } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iFormMemberFactoryParams,\n} from '@ceo/shared'\n\nimport {\n  iEntity,\n} from '../../../../../entity/index'\n\nimport { DataFactoryResolver } from './data-factory-resolver.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataFactory {\n  constructor(\n    private dataFactoryResolver: DataFactoryResolver,\n  ) {}\n\n  build(\n    entity: iEntity,\n  ): Partial<iFormMemberFactoryParams> {\n    let factory = this.resolveDataFactory(entity)\n    return factory.build(entity) as Partial<iFormMemberFactoryParams>\n  }\n\n  private resolveDataFactory(\n    entity: iEntity,\n  ) {\n    return this.dataFactoryResolver.resolve(entity)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  map, filter, tap,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  EntityData,\n  iEntityCollection,\n} from '../../../../../entity/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RelationshipProvider {\n  provide$(\n    resourceConfiguration,\n    formFieldEntity,\n    relationshipName,\n  ): Observable<EntityData> {\n\n    return resourceConfiguration.relationship$(relationshipName).pipe(\n      filter((collection: iEntityCollection) => {\n\n        return this.relationshipFullyLoaded(\n          resourceConfiguration,\n          relationshipName,\n          collection\n        )\n\n      }),\n      map((collection: iEntityCollection) => {\n        return collection.invokeFilter('isForAttribute', formFieldEntity.inputName)\n      }),\n    )\n  }\n\n  private relationshipFullyLoaded(\n    resourceConfiguration,\n    relationshipName,\n    collection\n  ) {\n\n    let relationshipSize =\n      resourceConfiguration.relationshipSize(relationshipName)\n\n    return collection.length == relationshipSize\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  zip as observableZip,\n  Observable,\n} from 'rxjs'\n\nimport { first, filter, map, startWith, tap } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iEntity,\n  EntityData,\n} from '../../../../../entity/index'\n\nimport { RelationshipProvider } from './relationship-provider.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RelationshipsProvider {\n  private relationshipTypes: string[] = [\n    'resource-attributes',\n    'resource-associations',\n    'resource-validators',\n  ]\n\n  constructor(\n    private relationshipProvider: RelationshipProvider,\n  ) {}\n\n  provide$(\n    resourceConfiguration,\n    formFieldEntity,\n  ): Observable<iEntity[]> {\n\n    let provideRelationships$ = _.bind(\n      _.partial(\n        this.provideRelationship$,\n        resourceConfiguration,\n        formFieldEntity\n      ),\n      this\n    )\n\n    let relationships = _.map(this.relationshipTypes, provideRelationships$)\n\n    return observableZip(...relationships).pipe(\n      map(relationshipCollections => {\n        return _.flatMap(relationshipCollections, 'entities')\n      }),\n    )\n  }\n\n  private flattenedRelationships(collections): iEntity[] {\n    return _.flatMap(<any>_.pick(collections, 'entities'))\n  }\n\n  private provideRelationship$(\n    resourceConfiguration,\n    formFieldEntity,\n    relationshipType,\n  ): Observable<EntityData> {\n\n    return this.relationshipProvider.provide$(\n      resourceConfiguration,\n      formFieldEntity,\n      relationshipType,\n    )\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport { map } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iFormMemberFactoryParams,\n} from '@ceo/shared'\n\nimport {\n  EntityData,\n  iEntity,\n} from '../../../../../entity/index'\n\nimport {\n  RelationshipsProvider,\n  RelationshipDataFactory,\n} from '../relationships/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormMemberFactoryParamsService {\n  constructor(\n    private relationshipsProvider: RelationshipsProvider,\n    private relationshipDataFactory: RelationshipDataFactory,\n  ) {}\n\n  provide$(\n    resourceConfiguration,\n    formFieldEntity,\n  ): Observable<iFormMemberFactoryParams> {\n\n    return this.relationships$(resourceConfiguration, formFieldEntity).pipe(\n      map(relationships => {\n        return this.buildParams(relationships, formFieldEntity)\n      }),\n    )\n  }\n\n  private relationships$(\n    resourceConfiguration,\n    formFieldEntity,\n  ) {\n    return this.relationshipsProvider.provide$(\n      resourceConfiguration,\n      formFieldEntity,\n    )\n  }\n\n  private buildParams(entities, formFieldEntity): iFormMemberFactoryParams {\n    let buildEntityFormMemberParams =\n      _.bind(this.buildEntityFormMemberParams, this)\n    let entitiesParams = _.map(entities, buildEntityFormMemberParams)\n    let params = _.merge({}, ...entitiesParams)\n    return params as iFormMemberFactoryParams\n  }\n\n  private buildEntityFormMemberParams(\n    entity: iEntity,\n  ): Partial<iFormMemberFactoryParams> {\n    return this.relationshipDataFactory.build(entity)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  of as observableOf,\n  zip, combineLatest,\n  BehaviorSubject,\n} from 'rxjs'\n\nimport {\n  first, tap, take,\n  map, mergeMap, skipWhile,\n  startWith, filter,\n  share,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iFormGroup,\n  iFormMemberFactoryParams,\n  iFormMember,\n  iMap,\n  FormGroup,\n  FormMemberFactory,\n  FormFactory as BaseFormFactory,\n} from '@ceo/shared'\n\nimport {\n  iEntity,\n  iEntityCollection,\n} from '../../../../entity/index'\n\nimport {\n  iFormEntity,\n} from '../../../interfaces/index'\n\nimport {\n  FormMemberFactoryParamsService,\n} from './form-fields/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormFactory {\n  constructor(\n    private formMemberFactory: FormMemberFactory,\n    private formMemberFactoryParamsService: FormMemberFactoryParamsService,\n    private formFactory: BaseFormFactory,\n  ) {}\n\n  build$(\n    resourceConfiguration: iEntity,\n    form: iFormEntity,\n  ): BehaviorSubject<any> {\n    return this.buildFormGroup$(resourceConfiguration, form, null)\n  }\n\n  buildFormGroup$(\n    resourceConfiguration: iEntity,\n    form: iFormEntity,\n    resourceType,\n  ): BehaviorSubject<any> {\n\n    return <BehaviorSubject<any>>form.formFields$.pipe(\n      mergeMap(formFields => {\n        return this.buildFormMembersParams$(\n          resourceConfiguration,\n          formFields,\n        )\n      }),\n      map((params: iMap<iFormMemberFactoryParams>) => {\n        return this.buildFormMembers(params)\n      }),\n      map((formMembers: iMap<iFormMember>) => {\n        return this.buildForm(formMembers, resourceType)\n      }),\n    )\n  }\n\n  private buildFormMembersParams$(\n    resourceConfiguration: iEntity,\n    formFields: iEntityCollection,\n  ): Observable<iMap<iFormMemberFactoryParams>> {\n\n    let buildFormMemberParams$ = _.partial(\n      _.bind(this.buildFormMemberParams$, this),\n      resourceConfiguration\n    )\n\n    let formMemberParams$ =\n      _.map(formFields.entities, buildFormMemberParams$)\n\n    return combineLatest(...formMemberParams$).pipe(\n      map(formMembersParams => {\n        let mergedParams = _.merge({}, ...formMembersParams)\n        return mergedParams as iMap<iFormMemberFactoryParams>\n      })\n    )\n  }\n\n  private buildFormMemberParams$(\n    resourceConfiguration,\n    formFieldEntity,\n  ): Observable<iMap<iFormMemberFactoryParams>> {\n    return this.formMemberFactoryParamsService.provide$(\n      resourceConfiguration,\n      formFieldEntity,\n    ).pipe(\n      map((params: iFormMemberFactoryParams) => {\n        let pair = [formFieldEntity.inputName, params]\n        return _.fromPairs([pair]) as iMap<iFormMemberFactoryParams>\n      }),\n    )\n  }\n\n  private buildFormMembers(\n    paramsSet: iMap<iFormMemberFactoryParams>,\n  ): iMap<iFormMember> {\n\n    let buildFormMember = (params: iFormMemberFactoryParams) => {\n      return this.formMemberFactory.build(params)\n    }\n    let formMembers = _.mapValues(paramsSet, buildFormMember)\n    return formMembers\n  }\n\n  private buildForm(\n    formMembers: iMap<iFormMember>,\n    resourceType: string,\n  ) {\n\n    var formParams\n    if(resourceType) {\n      let pair = [resourceType, formMembers]\n      formParams = _.fromPairs([pair])\n    }\n    else {\n      formParams = formMembers\n    }\n\n    return this.formFactory.build(formParams)\n  }\n}\n","// Accepts:\n// resourceType 'string'\n// formName 'string'\n//\n// Returns a FormGroup\n\nimport * as _ from 'lodash'\n\nimport {\n  Observable,\n  BehaviorSubject,\n  combineLatest,\n} from 'rxjs'\n\nimport {\n  map, mergeMap,\n  filter,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  TextboxFormControl,\n  iFormControl,\n  iFormWrapper,\n} from '@ceo/shared'\n\nimport {\n  EntityData,\n  iEntity,\n  DataService,\n} from '../../entity/index'\n\nimport {\n  iFormEntity,\n  iEntityFormFactoryOpts,\n} from '../interfaces/index'\n\nimport {\n  ResourceConfigurationFormFactory,\n} from './resource-configurations/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EntityFormFactory {\n  constructor(\n    private resourceConfigurationFormFactory: ResourceConfigurationFormFactory,\n    private dataService: DataService,\n  ) {}\n\n  build$(entity: iEntity, opts: iEntityFormFactoryOpts): BehaviorSubject<iFormWrapper> {\n    let data$ = combineLatest(\n      this.resourceConfiguration$(entity),\n      this.form$(entity, opts.formName),\n    )\n\n    return <BehaviorSubject<iFormWrapper>>data$.pipe(\n      mergeMap(([rc, form]) => {\n        return this.resourceConfigurationFormFactory.build$(<iEntity>rc, <iFormEntity>form)\n      }),\n    )\n  }\n\n  private form$(entity: iEntity, formName: string): Observable<iEntity> {\n    let opts = {\n      feature: entity.feature,\n      type: 'forms',\n      id: formName,\n    }\n\n    return <Observable<iEntity>>this.loadData$(opts)\n  }\n\n  private resourceConfiguration$(entity: iEntity): Observable<EntityData> {\n    let opts = {\n      feature: entity.feature,\n      type: 'resource-configurations',\n      id: entity.type,\n    }\n\n    return <Observable<iEntity>>this.loadData$(opts)\n  }\n\n  private loadData$(opts: any): Observable<iEntity> {\n    return this.dataService.get$(opts).pipe(\n      filter(entityType => !_.isNil(entityType))\n    )\n  }\n}\n","import {\n  Observable,\n  BehaviorSubject,\n} from 'rxjs'\n\nimport {\n  mergeMap,\n  shareReplay,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iFormWrapper,\n} from '@ceo/shared'\n\nimport {\n  iEntity,\n} from '../../entity/index'\n\nimport {\n  EntityFormManager,\n} from '../classes/index'\n\nimport { EntityFormFactory } from './entity-form-factory.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EntityFormManagerFactory {\n  constructor(\n    private formFactory: EntityFormFactory,\n  ) { }\n\n  build(entity$: Observable<iEntity>, formName: string): EntityFormManager {\n    let form$ = this.buildForm$(entity$, formName).pipe(\n      shareReplay(1),\n    ) as BehaviorSubject<iFormWrapper>\n\n    return new EntityFormManager(entity$, form$)\n  }\n\n  private buildForm$(\n    entity$: Observable<iEntity>,\n    formName: string,\n  ): BehaviorSubject<iFormWrapper> {\n\n    return entity$.pipe(\n      shareReplay(1),\n      mergeMap(entity => this.buildForm(entity, formName))\n    ) as BehaviorSubject<iFormWrapper>\n  }\n\n  private buildForm(\n    entity: iEntity,\n    formName: string\n  ): BehaviorSubject<iFormWrapper> {\n    let opts = {\n      formName: formName\n    }\n    return this.formFactory.build$(entity, opts)\n  }\n}\n","import {\n  FormControlDataFactory,\n  FormControlValidatorFactory,\n  FormGroupDataFactory,\n  FormItemDataFactory,\n  DropdownFactory,\n  DropdownOptionsFactory,\n} from './index'\n\nexport const services: any[] = [\n  FormControlDataFactory,\n  FormControlValidatorFactory,\n  FormGroupDataFactory,\n  FormItemDataFactory,\n  DropdownFactory,\n  DropdownOptionsFactory,\n]\n","import {\n  FormMemberFactoryParamsService,\n} from './index'\n\n\nexport const services: any[] = [\n  FormMemberFactoryParamsService,\n]\n","import {\n  RelationshipDataFactory,\n  RelationshipDataFactoryResolver,\n  RelationshipProvider,\n  RelationshipsProvider,\n} from './index'\n\nexport const services: any[] = [\n  RelationshipDataFactory,\n  RelationshipDataFactoryResolver,\n  RelationshipProvider,\n  RelationshipsProvider,\n]\n","import {\n  ResourceConfigurationFormFactory,\n} from './index'\n\nimport { services as dataFactoriesServices } from './data-factories/services'\nimport { services as formFieldsServices }    from './form-fields/services'\nimport { services as relationshipsServices } from './relationships/services'\n\nexport const services: any[] = [\n  ResourceConfigurationFormFactory,\n  ...dataFactoriesServices,\n  ...formFieldsServices,\n  ...relationshipsServices,\n]\n","import { services as formsServices } from './forms/services'\n\nexport const services: any[] = [\n  ...formsServices,\n]\n","import {\n  EntityFormFactory,\n  EntityFormManagerFactory,\n} from './public-api'\n\nimport { services as resourceConfigurationServices } from './resource-configurations/services'\n\nexport const services: any[] = [\n  EntityFormFactory,\n  EntityFormManagerFactory,\n  ...resourceConfigurationServices,\n]\n","import { NgModule } from '@angular/core'\n\nimport { CeoFormsModule } from '@ceo/shared'\n\nimport { services }     from './services/services'\n\n@NgModule({\n  imports: [\n    CeoFormsModule,\n  ],\n  declarations: [],\n  providers: [\n    ...services,\n  ]\n})\nexport class CeoEntityFormsModule { }\n"],"names":["sliceActions","tslib_1.__extends","SliceAction","_.get","_.compact","camelCase","createSelector","_.keys","_.partial","_.reduce","_.pick","state","_.join","typeFor","entity","_.omit","_.without","_.extend","_.map","_.flatten","EntityActionsMap","_.isArray","_.head","_.sortBy","_.filter","_.isNil","_.find","_.has","_.includes","_.toString","_.every","_.lowerCase","_.isEmpty","_.merge","ngrxCreateEntityAdapter","_.bind","classify","_.isFunction","_.defaults","slugify","_.clone","Mixin","AttributeGetterSetter","AttributeUpdater","Memoizer","_.assign","Injectable","_.split","InflectionService","compose","createFeatureSelector","buildFeatureSelector","_.mapValues","_.set","Store","_.intersection","EntitySelectorNameService","EntitySelectorProvider","EntitySelectorService","of","map","actionType","EntityActions.Add","EntityActions.Delete","EntityActions.Load","EntityActions.Update","services","EntityAttributeBuilder","JsonApiEntityAttributeBuilder","mergeMap","combineLatest","ApiService","PayloadAction","defer","Actions","tslib_1.__decorate","Effect","Observable","_.pickBy","_.values","_.drop","_.last","_.dropRight","_.isEqual","ofType","ROUTER_NAVIGATION","distinctUntilChanged","tap","FeatureActions.SetPrimaryEntityIdentifier","FeatureActions.AddFeature","observableOf","FeatureActions.SetPrimaryEntity","FeatureActions.SelectPrimaryEntity","_.cloneDeep","effects","InjectionToken","switchMap","FeatureActions.RegisterFeature","EntityActions.LoadSeedData","EntityActions.AsyncSuccess","EntityActions.DeleteSuccess","applicationConfigSelectors","filter","ApplicationConfigActions","EntityActions.Init","actions","EntityActions.AddStoreEntities","EntityActions.SetScopeEntities","Inject","EntityDataService","attributeBuilders.services","selectors.services","createEntityAdapter","_.startsWith","combineReducers","NgModule","StoreModule","reducer","initialState","EffectsModule","buildEntityRelationship","pluralize","NgValidators","SelectFactory","snakeCase","observableZip","_.flatMap","RelationshipDataFactory","_.fromPairs","FormMemberFactory","BaseFormFactory","ResourceConfigurationFormFactory","shareReplay","RelationshipDataFactoryResolver","dataFactoriesServices","formFieldsServices","relationshipsServices","formsServices","resourceConfigurationServices","CeoFormsModule"],"mappings":"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"}
