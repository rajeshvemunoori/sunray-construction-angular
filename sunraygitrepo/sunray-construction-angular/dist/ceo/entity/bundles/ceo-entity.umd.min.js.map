{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@ceo/entity/lib/entity/classes/entity/entity.actions.ts","ng://@ceo/entity/lib/entity/classes/entity/entity.action-classes.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-scope-selectors.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-entity-type-selectors.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/action-type.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/add-many.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/add-one.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/remove-many.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/remove-one.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/set-scope-ids.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/update-many.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/functions/update-one.ts","ng://@ceo/entity/lib/entity/classes/entity/reducer/reducer.ts","ng://@ceo/entity/lib/entity/classes/entity/entity.collection.ts","ng://@ceo/entity/lib/entity/classes/entity/entity.adapter.ts","ng://@ceo/entity/lib/entity/classes/entity/entity-adapter.factory.ts","ng://@ceo/entity/lib/entity/classes/entity/entity-type.factory.ts","ng://@ceo/entity/lib/entity/classes/entity/entity.config.ts","ng://@ceo/entity/lib/entity/classes/entity/entity.effects-config.ts","ng://@ceo/entity/lib/entity/classes/entity/entities/json-api.entity.ts","ng://@ceo/entity/lib/entity/classes/entity/entities/resource-association.entity.ts","ng://@ceo/entity/lib/entity/classes/entity/entities/resource-attribute.entity.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-relationship-properties.ts","ng://@ceo/entity/lib/entity/classes/entity/entities/resource-configuration.entity.ts","ng://@ceo/entity/lib/entity/classes/entity/entities/resource-validator.entity.ts","ng://@ceo/entity/lib/entity/classes/feature/feature.config.ts","ng://@ceo/entity/lib/entity/interfaces/entity/entity.ts","ng://@ceo/entity/lib/entity/interfaces/selectors/selector-types.ts","ng://@ceo/entity/lib/entity/services/entity-cloner.service.ts","ng://@ceo/entity/lib/entity/services/selectors/selector-name.service.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-entity-selectors.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-slice-selector.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-entity-type-slice-selector.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-root-selector.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-feature-selector.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-filter-selector.ts","ng://@ceo/entity/lib/entity/util/builders/selectors/build-find-selector.ts","ng://@ceo/entity/lib/entity/state/feature/selectors.ts","ng://@ceo/entity/lib/entity/services/selectors/selector.service.ts","ng://@ceo/entity/lib/entity/services/selectors/selector-provider.service.ts","ng://@ceo/entity/lib/entity/services/selectors/index.ts","ng://@ceo/entity/lib/entity/services/entity-relationship-provider.service.ts","ng://@ceo/entity/lib/entity/services/entity-type-provider.service.ts","ng://@ceo/entity/lib/entity/services/entity-factory.service.ts","ng://@ceo/entity/lib/entity/services/data.service.ts","ng://@ceo/entity/lib/entity/services/attribute-builders/attribute-builder.service.ts","ng://@ceo/entity/lib/entity/services/attribute-builders/json-api-attribute-builder.service.ts","ng://@ceo/entity/lib/entity/services/attribute-builders/index.ts","ng://@ceo/entity/lib/entity/services/entity.service.ts","ng://@ceo/entity/lib/entity/state/config/actions.ts","ng://@ceo/entity/lib/entity/state/config/effects.ts","ng://@ceo/entity/lib/entity/state/config/reducer.ts","ng://@ceo/entity/lib/entity/state/config/selectors.ts","ng://@ceo/entity/lib/entity/state/feature/actions/action-types.ts","ng://@ceo/entity/lib/entity/state/feature/actions/actions.ts","ng://@ceo/entity/lib/entity/services/route-entity-type-provider.service.ts","ng://@ceo/entity/lib/entity/services/resource-identifier.service.ts","ng://@ceo/entity/lib/entity/state/feature/effects.ts","ng://@ceo/entity/lib/entity/state/feature/initial-state.ts","ng://@ceo/entity/lib/entity/state/feature/reducer.ts","ng://@ceo/entity/lib/entity/state/state.ts","ng://@ceo/entity/lib/entity/util/tokens.ts","ng://@ceo/entity/lib/entity/services/entity.effects.ts","ng://@ceo/entity/lib/entity/services/public_api.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-configs.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-initial-state.ts","ng://@ceo/entity/lib/entity/util/builders/feature/build-reducer.ts","ng://@ceo/entity/lib/entity/util/providers.ts","ng://@ceo/entity/lib/entity/entity.module.ts","ng://@ceo/entity/lib/forms/classes/entity-form-manager.ts","ng://@ceo/entity/lib/forms/entities/form.entity.ts","ng://@ceo/entity/lib/forms/entities/form-field.entity.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/dropdown-options-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/resource-list.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/dropdown-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/form-control-data-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/form-control-validator-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/form-group-data-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/form-item-data-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/relationships/data-factory-resolver.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/relationships/data-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/relationships/relationship-provider.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/relationships/relationships-provider.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/form-fields/form-member-factory-params.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/form-factory.service.ts","ng://@ceo/entity/lib/forms/services/entity-form-factory.service.ts","ng://@ceo/entity/lib/forms/services/entity-form-manager-factory.service.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/data-factories/services.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/form-fields/services.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/relationships/services.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/forms/services.ts","ng://@ceo/entity/lib/forms/services/resource-configurations/services.ts","ng://@ceo/entity/lib/forms/services/services.ts","ng://@ceo/entity/lib/forms/forms.module.ts","ng://@ceo/entity/lib/entity/state/config/initial-state.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-effects.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-service.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-type-provider.ts","ng://@ceo/entity/lib/entity/util/builders/entity/build-entity-types.ts","ng://@ceo/entity/lib/entity/util/builders/feature/build-feature-config.ts","ng://@ceo/entity/lib/entity/util/builders/feature/build-initial-state.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","__spread","concat","actions","sliceActions","ADD","ADD_OPTIMISTICALLY","ADD_SUCCESS","ADD_TEMP","ADD_UPDATE_FAIL","UPDATE_SUCCESS","DELETE","DELETE_FAIL","DELETE_SUCCESS","DELETE_TEMP","ASYNC","ASYNC_FAIL","ASYNC_SUCCESS","ASYNC_DATA_READY","PATCH","PATCH_EACH","PATCH_FAIL","PATCH_SUCCESS","RESTORE_TEMP","SELECT","SELECT_NEXT","UNLOAD","ADD_STORE_ENTITIES","SET_SELECTED","LOAD_SEED_DATA","SET_PRIMARY_ENTITY","SET_SCOPE_ENTITIES","TEMP","EntityAction","slice","payload","_this","_super","tslib_1.__extends","SliceAction","Init","actionName","INIT","Add","dirty","payloadForPost","newPayload","id","AddStoreEntities","Load","LOAD","AsyncSuccess","LoadSeedData","Initialized","INITIALIZED","Patch","AddTemp","AddOptimistically","AddSuccess","AddUpdateFail","Delete","DeleteFail","DeleteSuccess","LoadFail","LOAD_FAIL","Async","AsyncFail","AsyncDataReady","LoadSuccess","LOAD_SUCCESS","PatchSuccess","PatchFail","Update","UPDATE","PatchEach","UpdateSuccess","Select","SelectNext","Unload","SetSelected","SetPrimaryEntity","SetScopeEntities","buildScopeSelector","entityAdapter","selectors","scopeName","collectionType","entityCollectionType","camelCase","createSelector","selectScopes","selectEntities","scopes","entities","ids","_.get","scopeEntities","_.compact","map","buildScopeSelectors","scopeNames","_.keys","buildSelector","_.partial","_.reduce","buildEntityTypeSelectors","ngrxEntityAdapter","getSelectors","decoratedSelectors","_.pick","selectAll","state","selectSelectedEntity","selectedEntityId","actionType","featureName","sliceName","fullSliceName","_.join","typeFor","addMany","adapter","addOne","entity","entityId","newEntities","_.omit","newIds","_.without","_.extend","removeMany","action","payloadIds","_.map","_.flatten","removeOne","setScopeIds","scope","stateDelta","updateMany","upsertMany","updateOne","entityReducer","type","EntityActionsMap","entityData","_.isArray","_.head","isArray","EntityCollection","none","buildCollection","sort","attributes","_.sortBy","filter","args","_i","_a","invokeFilter","methodName","attribute","_.filter","filterByInvoke","filterByAttrs","filters","entityCollection","attr","filterByAttr","find","_.find","idAttributes","_.isNil","findByAttr","mapFn","where","conditions","filterByCondition","_.has","entityValue","_.includes","_.toString","_.every","stringSearch","searchTerm","stringSearchByAttr","search","entityWildcardValue","_.lowerCase","searchTermWildcardValue","isEmpty","_.isEmpty","isNotEmpty","hasEntities","current","noEntities","EntityAdapter","entityOpts","entityType","entityConfig","config","entityName","getterWithBuilder","_ngrxEntityAdapter","buildNgrxEntityAdapter","buildReducer","featureEntitySliceName","initialState","customReducer","reducer","state$$1","buildSelectors","buildInitialState","_.merge","getInitialState","ngrxCreateEntityAdapter","propName","builder","EntityAdapterFactory","_featureConfig","_adapters","buildAdapters","featureConfig","entityTypes","_.bind","buildAdapter","opts","name","EntityTypeFactory","baseEntityType","build","entityTypeName","classify","buildEntityType","Entity","_sliceName","EntityConfig","init","primaryKeys","seed","_name","getName","hasResourceType","resourceIdentifier","ofType","isCustom","urlFragment","_.isFunction","url","_entityType","EntityEffectsConfig","defaultEffectTypes","load","add","patch","asyncSuccess","initialEntity","effectTypes","hasEffectType","effectTypeName","getConfig","configItem","JsonApiEntity","dataService","defaultAttributes","updatedKeys","_dataService","setAttributes","_.defaults","updateAttributes","getAttr","attrName","setAttr","prop","slugify","service","nameStartsWith","toLowerCase","indexOf","getSliceName","relationship","relationshipSize","relationshipName","hasRelationship","relationshipData","relationships","data","relationship$","save$","saveAction","isNew","toResourceIdentifier","ri","_.clone","createAttributeSettersAndGetters","createSettersAndGetters","props","createGetSet","obj","generateGetSet","setProp","getProp","memoized","property","Mixin","AttributeGetterSetter","AttributeUpdater","Memoizer","ResourceAssociationEntity","isForAttribute","ResourceAttributeEntity","buildEntityRelationshipProperty","defineEntityRelationshipGetSet","privatePropName","getter","console","log","get","set","ResourceConfigurationEntity","isRoutable","relationshipNames","ResourceValidatorEntity","attributeNames","FeatureConfig","_sliceNames","buildSliceNames","_seedEntities","buildSeeds","_entityTypes","buildEntityTypes","entityTypeFromEntityData","theType","entitySliceNames","buildEntityTypeSeeds","feature","factory","entityTypeMaps","entityConfigs","_.assign","_","EntityHasOneRelationshipType","EntityHasManyRelationshipType","EntitySelectorTypes","All","Ids","Entities","Total","SelectedEntity","Config","Scope","EntityCloner","clone","constructorParams","Injectable","SelectorNameService","inflectionService","getFeatureSelectorName","getEntitySelectorName","getNestedSelectorName","parentName","selectorName","parentSegments","buildSegments","selectorNameSegments","segments","getResourceSelectorName","si","selectorIdentifierToSelectorName","getSelectorName","prefix","inflections","result","inflect","sanitizedSelectorName","removePrefix","_.split","selectorType","providedIn","InflectionService","buildEntitySelectors","entityTypeSelector","selectorNameService","selector","entitySelectorName","entityScopedSelectorName","featureLevelSelector","buildSliceSelector","buildEntityTypeSliceSelector","buildRootSelector","featureSelector","entitySelector","compose","buildFeatureSelector","entityAdapters","selectorService","buildCustomSelectors","featureSelectorName","createFeatureSelector","addSelector","featureEntitiesSelectorName","entitiesSelectorFunction","featureEntitiesSelector","featureConfigSelectorName","configSelectorFunction","featureConfigSelector","entitySelectors","rootSelectors","buildFilterSelector","buildFindSelector","findPropPath","selectEntityFeature","features","primaryEntity","primaryEntityIdentifier","entityFeatureSelectors","_.mapValues","SelectorService","store","select$","getSelector","select","selectorFromSelectorIdentifier","path","selectorPath","_.set","pathElements","loggingEnabled","Store","SelectorProvider","defaultOpts","subscribeToFeatures","provide","customSelector","defaultSelector","isValid","isRelationshipResourceRequest","selectorIdentifier","getBaseSelector","isFindRequest","findSelector","isFilteredResourceRequest","filterSelector","isScoped","isScopedResourceIdentifier","getPrimaryKeys","filterKeys","getFilterParams","primaryKey","_.intersection","features$","subscribe","getFeature","services","EntitySelectorNameService","EntitySelectorProvider","EntitySelectorService","EntityRelationshipProvider","defaultDataServiceOpts","syncWithApi","provide$","relationshipIdentifier","of","relationshipType","loadRelationshipData$","prepareRelationship","resourceType","prepareHasOne","defaultRelationResourceType","prepareHasMany","loadResourceTypeData$","pipe","resourceOpts","get$","buildDataServiceOpts","wrappedData","EntityTypeProviderService","getFeature$","getEntityType","getCustomEntityType","_features$","buildFeatures$","EntityFactory","entityTypeProvider","relationshipProvider","build$","getEntityType$","DataService","selectorProvider","entityRelationshipProvider","entityCloner","entityFactory","selectorOpts","decoratedData","create$","EntityActions.Add","executeRequest$","delete$","EntityActions.Delete","EntityActions.Load","update$","EntityActions.Update","shouldDispatch","dispatch","storeData$","noData$","buildDecoratedEntity","isPrototypeOf","clonedEntities","AttributeBuilder","params","JsonApiAttributeBuilder","EntityAttributeBuilder","JsonApiEntityAttributeBuilder","EntityService","apiService","attributeBuilder","apiEntityRequest$","post$","entityData$","apiData$","mergeMap","apiResponse","buildEntityData$","buildEntities$","apiData","buildEntity$","observables","combineLatest","featureData","ApiService","SetPrimaryEntity$1","EntityConfigActionTypes","PayloadAction","EntityConfigEffects","actions$","init$","defer","Actions","tslib_1.__decorate","Effect","Observable","entityConfigReducer","deltaState","selectAppFeature","ADD_FEATURE","LOAD_PRIMARY_ENTITY","REGISTER_FEATURE","SELECT_PRIMARY_ENTITY","SET_PRIMARY_ENTITY_IDENTIFIER","AddFeature","ActionTypes","LoadPrimaryEntity","RegisterFeature","SelectPrimaryEntity","SetPrimaryEntity$2","SetPrimaryEntityIdentifier","RouteEntityTypeProvider","handleRouterNavigation$","routerState","featureRoutableEntities$","collection","resourceIdentifierFromRouterState","entityTypeSlug","entityTypeSlugFromRouterState","routerStateOpts","resourceIdentifierOptsFromRouterState","idKey","_.pickBy","_.values","_.drop","param","_.last","_.dropRight","getRoutableEntities","routableEntities","routableEntityCollections","resourceConfigurations$","routableResourceConfigurations","buildResourceIdentifiers","urlSlug","displaySlug","getFeatures$","ResourceIdentifierService","isScope","isSameResource","riOne","riTwo","_.isEqual","scopeKey","FeatureEffects","routeEntityTypeProvider","resourceIdentifierService","ROUTER_NAVIGATION","distinctUntilChanged","tap","FeatureActions.SetPrimaryEntityIdentifier","registerFeature$","FeatureActions.AddFeature","loadPrimaryEntity$","selectPrimaryEntity$","observableOf","FeatureActions.SetPrimaryEntity","FeatureActions.SelectPrimaryEntity","featureInitialState","featureReducer","existingFeatures","newFeature","featuresDelta","_.cloneDeep","effects","FEATURE_CONFIG","InjectionToken","EntityEffects","entityService","featureAction","switchMap","FeatureActions.RegisterFeature","EntityActions.LoadSeedData","seed$","seeds","seedEntities","getFeatureEntitySlice","load$","buildResourceOpts","EntityActions.AsyncSuccess","add$","asyncSuccess$","groupedEntities","buildAddToStoreActions","EntityActions.DeleteSuccess","getEntitySlice","loadApplicationResource$","applicationConfigSelectors","resourceById","isValidPayload","isValidResource","ApplicationConfigActions","ngrxOnIdentifyEffects","ngrxOnInitEffects","EntityActions.Init","addActions","buildAddEntitiesAction","scopeAction","buildAddScopeEntitiesAction","EntityActions.AddStoreEntities","actionPayload","EntityActions.SetScopeEntities","entityTypeMap","sliceNames","Inject","entityServices","EntityDataService","attributeBuilders.services","selectors.services","buildEntityConfig","apiConfig","defaultEntityConfigClass","buildEntityInitialState","customInitialState","createEntityAdapter","buildEntityReducer","entityTypeAdapter","providers","useValue","multi","EntityModule","NgModule","imports","StoreModule","forFeature","EffectsModule","declarations","EntityFormManager","entity$","form$","_entity$","_form$","form","_entity","_form","formToEntity","FormEntity","FormFieldEntity","DropdownOptionsFactory","data$","entityKey","getOptions","resourceList","DropdownFactory","optionsFactory","resolvable","pluralize","replace","resource","item","selectorData$","getSelectors$","FormControlDataFactory","selectFactory","formMemberType","label","labelParams","control","controlParams","text","displayName","controlType","placeholder","validators","buildEntityValidators","controlTypeParams","controlTypeData","includes","dataType","defaultControlType","selectControlTypeData","inputControlTypeData","options","required","inputType","NgValidators","email","SelectFactory","FormControlValidatorFactory","FormGroupDataFactory","pluralizeType","memberType","inputKey","formName","buildFormName","snakeCase","className","formType","FormItemDataFactory","formControlDataFactory","formControlValidatorFactory","resolveParamsFactory","DataFactoryResolver","formGroupDataFactory","formItemDataFactory","resolve","DataFactory","dataFactoryResolver","resolveDataFactory","RelationshipProvider","resourceConfiguration","formFieldEntity","relationshipFullyLoaded","inputName","RelationshipsProvider","relationshipTypes","provideRelationships$","provideRelationship$","observableZip","relationshipCollections","_.flatMap","flattenedRelationships","collections","FormMemberFactoryParamsService","relationshipsProvider","relationshipDataFactory","relationships$","buildParams","buildEntityFormMemberParams","entitiesParams","RelationshipDataFactory","FormFactory","formMemberFactory","formMemberFactoryParamsService","formFactory","buildFormGroup$","formFields$","formFields","buildFormMembersParams$","buildFormMembers","formMembers","buildForm","buildFormMemberParams$","formMemberParams$","formMembersParams","pair","_.fromPairs","paramsSet","formParams","FormMemberFactory","BaseFormFactory","EntityFormFactory","resourceConfigurationFormFactory","resourceConfiguration$","_b","rc","loadData$","ResourceConfigurationFormFactory","EntityFormManagerFactory","buildForm$","shareReplay","RelationshipDataFactoryResolver","dataFactoriesServices","formFieldsServices","relationshipsServices","formsServices","resourceConfigurationServices","CeoEntityFormsModule","CeoFormsModule","entityConfigParams","defineGetSet","baseEntity","entityTypeClass","adapters","featureEntitiesReducerPrefix","entityReducers","reducers","_.startsWith","entitySliceName","combineReducers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { sliceActions } from '@ceo/state'\n\nexport const actions = {\n  ...sliceActions,\n  ADD: 'ADD',\n  ADD_OPTIMISTICALLY: 'ADD_OPTIMISTICALLY',\n  ADD_SUCCESS: 'ADD_SUCCESS',\n  ADD_TEMP: 'ADD_TEMP', // Use for adding to a blank to the store so users can fill in before submitting to server\n  ADD_UPDATE_FAIL: 'ADD_UPDATE_FAIL',\n  UPDATE_SUCCESS: 'UPDATE_SUCCESS',\n  DELETE: 'DELETE',\n  DELETE_FAIL: 'DELETE_FAIL',\n  DELETE_SUCCESS: 'DELETE_SUCCESS',\n  DELETE_TEMP: 'DELETE_TEMP',\n  ASYNC: 'ASYNC',\n  ASYNC_FAIL: 'ASYNC_FAIL',\n  ASYNC_SUCCESS: 'ASYNC_SUCCESS',\n  ASYNC_DATA_READY: 'ASYNC_DATA_READY',\n  PATCH: 'PATCH',\n  PATCH_EACH: 'PATCH_EACH',\n  PATCH_FAIL: 'PATCH_FAIL',\n  PATCH_SUCCESS: 'PATCH_SUCCESS',\n  RESTORE_TEMP: 'RESTORE_TEMP',\n  SELECT: 'SELECT',\n  SELECT_NEXT: 'SELECT_NEXT',\n  UNLOAD: 'UNLOAD',\n  ADD_STORE_ENTITIES: \"ADD_STORE_ENTITIES\",\n  SET_SELECTED: \"SET_SELECTED\",\n  LOAD_SEED_DATA: 'LOAD_SEED_DATA',\n  SET_PRIMARY_ENTITY: 'SET_PRIMARY_ENTITY',\n  SET_SCOPE_ENTITIES: 'SET_SCOPE_ENTITIES',\n};\n","import { Action } from '@ngrx/store'\n\nimport {\n  PayloadAction,\n  SliceAction,\n  typeFor,\n} from '@ceo/state'\n\nimport {\n  iApiResponse,\n  iEntity,\n} from '../../interfaces/index'\n\nimport { actions } from './entity.actions'\n\nexport const TEMP = 'TEMP_ID_VALUE'\n\nexport class EntityAction<T extends iEntity>\n  extends SliceAction implements PayloadAction {\n\n  constructor(public slice: any, public payload: T) {\n    super(slice, payload)\n  }\n}\n\nexport class Init<T extends iEntity>\n  extends SliceAction implements PayloadAction {\n\n  protected actionName: string = actions.INIT\n}\n\n// Action to add a new entity on the server.\nexport class Add<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ADD\n\n  constructor(public slice: any, public payload: any = {}) {\n    super(slice, Object.assign({}, { dirty: true }, payload))\n  }\n\n  // If the payload contains the temp ID value, that means\n  // we want the server to assign and ID value, so drop the ID field\n  payloadForPost() {\n    const newPayload = Object.assign({}, this.payload)\n    if (this.payload.id === TEMP) {\n      delete newPayload.id\n      delete newPayload.dirty\n    }\n\n    return newPayload\n  }\n}\n\n// Action to send array of entities to the store.\nexport class AddStoreEntities<T extends iEntity>\n  extends SliceAction {\n\n  protected actionName: string = actions.ADD_STORE_ENTITIES\n\n  constructor(public slice: string, public payload: T[]) {\n    super(slice, payload)\n  }\n}\n\n// Action to load data from the server\nexport class Load<T extends iEntity>\n  extends SliceAction implements PayloadAction {\n\n  protected actionName: string = actions.LOAD\n\n  constructor(public slice: string, public payload: any = null) {\n    super(slice, payload)\n  }\n}\n\n// Action to capture successful response from the server.\nexport class AsyncSuccess<T extends iEntity>\n  extends SliceAction {\n\n  protected actionName: string = actions.ASYNC_SUCCESS\n\n  constructor(public slice: string, public payload: iApiResponse) {\n    super(slice, payload)\n  }\n}\n\n\nexport class LoadSeedData<T extends iEntity>\n  extends SliceAction implements PayloadAction {\n\n  protected actionName: string = actions.LOAD_SEED_DATA\n\n  constructor(public slice: string, public payload: any = null) {\n    super(slice, payload)\n  }\n}\n\n///////////////////////////////////////\n///////////////////////////////////////\n// Not being used at this time: ///////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n///////////////////////////////////////\n\nexport class Initialized<T extends iEntity>\n  extends SliceAction implements PayloadAction {\n\n  protected actionName: string = actions.INITIALIZED\n}\n\nexport class Patch<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.PATCH\n}\n\n/**\n * Create a temporary entity to go into the store but not to the server or be\n * validated. If the id of the payload is missing or null\n * then use the TEMP value. Otherwise use the payload.id value\n*/\nexport class AddTemp<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ADD_TEMP\n\n  constructor(public slice: any, payload: any = {}) {\n    super(slice, Object.assign({}, payload, (payload.id ? {} : { id: TEMP })))\n  }\n}\n\n/**\n* Use this action to first put in the store and then\n* submit to the server\n*/\nexport class AddOptimistically<T extends iEntity> extends Add<T> {\n  protected actionName: string = actions.ADD_OPTIMISTICALLY\n\n  constructor(public slice: any, payload: any = {}) {\n    super(slice, Object.assign({}, { id: TEMP }, payload))\n  }\n}\n\nexport class AddSuccess<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ADD_SUCCESS\n}\n\nexport class AddUpdateFail<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ADD_UPDATE_FAIL\n\n  constructor(public slice: any, payload: any = {}) {\n    super(slice, Object.assign({}, payload, (payload.id ? {} : { id: TEMP })))\n  }\n}\n\nexport class Delete<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.DELETE\n\n  constructor(public slice: string, public payload: any = null) {\n    super(slice, payload)\n  }\n}\n\nexport class DeleteFail<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.DELETE_FAIL\n}\n\nexport class DeleteSuccess<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.DELETE_SUCCESS\n}\n\nexport class LoadFail<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.LOAD_FAIL\n}\n\nexport class Async<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ASYNC\n}\n\nexport class AsyncFail<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.ASYNC_FAIL\n}\n\nexport class AsyncDataReady<T extends iEntity> extends SliceAction {\n  protected actionName: string = actions.ASYNC_DATA_READY\n\n  constructor(public slice: string, public payload: T[]) {\n    super(slice, payload)\n  }\n}\n\n// this makes Effect loadFromRemote$ work\nexport class LoadSuccess<T extends iEntity> extends AsyncSuccess<T> {\n  protected actionName: string = actions.LOAD_SUCCESS\n}\n\nexport class PatchSuccess<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.PATCH_SUCCESS\n}\n\nexport class PatchFail<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.PATCH_FAIL\n}\n\nexport class Update<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.UPDATE\n}\n\nexport class PatchEach<T extends iEntity> extends SliceAction {\n  protected actionName: string = actions.PATCH_EACH\n}\n\nexport class UpdateSuccess<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.UPDATE_SUCCESS\n}\n\nexport class Select<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.SELECT\n}\n\nexport class SelectNext<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.SELECT_NEXT\n\n  constructor(public slice: any) {\n    super(slice, null)\n  }\n}\n\nexport class Unload<T extends iEntity> extends EntityAction<T> {\n  protected actionName: string = actions.UNLOAD\n\n  constructor(public slice: any) {\n    super(slice, null)\n  }\n}\n\nexport class SetSelected<T extends iEntity> extends SliceAction {\n  protected actionName: string = actions.SET_SELECTED\n\n  constructor(public slice: string, public payload: any) {\n    super(slice, payload)\n  }\n}\n\nexport class SetPrimaryEntity<T extends iEntity> extends SliceAction {\n  protected actionName: string = actions.SET_PRIMARY_ENTITY \n  constructor(public slice: string, public payload: any) {\n    super(slice, payload)\n  }\n}\n\nexport class SetScopeEntities<T extends iEntity> extends SliceAction {\n  protected actionName: string = actions.SET_SCOPE_ENTITIES\n  constructor(public slice: string, public payload: any) {\n    super(slice, payload)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  createSelector,\n} from '@ngrx/store'\n\nimport {\n  camelCase,\n} from '@ceo/core'\n\n\nimport {\n  iEntity,\n  iEntityAdapter,\n} from '../../../interfaces/index'\n\nexport const buildScopeSelector = (\n  entityAdapter,\n  selectors,\n  scopeName,\n) => {\n\n  var collectionType = entityAdapter.entityCollectionType\n\n  let selectScopeEntities = (scopes, entities) => {\n    let ids = _.get(scopes, [scopeName, 'ids'], [])\n    let scopeEntities =\n      _.compact(ids.map(function (id) { return entities[id] }))\n    let collection = new collectionType(scopeEntities)\n    return collection\n  }\n\n  let selectorName = `select.scope.${camelCase(scopeName)}`\n  selectors[selectorName] = createSelector(\n    selectors.selectScopes,\n    selectors.selectEntities,\n    selectScopeEntities\n  )\n\n  return selectors\n}\n\n// Get all the Selectors internal to an entity type\nexport const buildScopeSelectors = (entityAdapter, selectors) => {\n  let scopeNames = _.keys(entityAdapter.scopes)\n  let buildSelector =\n    _.partial(buildScopeSelector, entityAdapter)\n\n  return _.reduce(scopeNames, buildSelector, selectors)\n}\n","/*\nngrx selectors\n  selectIds\n  selectEntities\n  selectTotal\n\ncustom selectors \n  selectAll\n  selectSelectedEntity\n  selectScopes\n*/\n\nimport * as _ from 'lodash'\n\nimport {\n  iEntityState,\n  iEntity,\n} from '../../../interfaces/index'\n\nimport {\n  buildScopeSelectors\n} from './build-scope-selectors'\n\nexport const buildEntityTypeSelectors = (\n  entityAdapter,\n) => {\n\n  var collectionType = entityAdapter.entityCollectionType\n\n  var selectors = entityAdapter.ngrxEntityAdapter.getSelectors()\n\n  let defaults = ['selectIds', 'selectEntities', 'selectTotal']\n  let decoratedSelectors = _.pick(selectors, defaults)\n  \n  // Wrap the selectAll selector in order to return an\n  // entity collection object\n  decoratedSelectors.selectAll = (state: any) => {\n    let entities = selectors.selectAll(state) \n    let collection = new collectionType(entities)\n    return collection\n  }\n\n  decoratedSelectors.selectSelectedEntity = (\n    state: iEntityState<iEntity>\n  ): iEntity => {\n\n    return state.entities[state.selectedEntityId]\n  }\n\n  decoratedSelectors.selectScopes = (state) => { return state.scopes }\n\n  buildScopeSelectors(entityAdapter, decoratedSelectors)\n\n  return decoratedSelectors\n\n}\n","import * as _ from 'lodash'\n\nimport { typeFor }      from '@ceo/state'\n\n// get theType\nexport function actionType(featureName, sliceName, actionName) {\n  let fullSliceName = _.join([featureName, sliceName], \".\")\n  return typeFor(fullSliceName, actionName)\n}\n","export function addMany(\n  entities: any,\n  adapter: any,\n  state: any\n) {\n  return adapter.addMany(entities, state)\n}\n","import * as _ from 'lodash'\n\n// addOne\nexport function addOne(\n  entity: any,\n  adapter: any,\n  state: any\n) {\n\n  // Remove the entity if already existing\n  let entityId = entity.id\n  let newEntities = _.omit(state.entities, entityId)\n  let newIds = _.without(state.ids, entityId)\n  state = _.extend(state, {ids: newIds, entities: newEntities})\n\n  return adapter.addOne(entity, state)\n}\n","import * as _ from 'lodash'\n\nimport { EntityAction } from '../../entity.action-classes'\n\nexport function removeMany(\n  action: EntityAction<any>,\n  adapter: any,\n  state: any\n) {\n\n  let payloadIds = _.map(\n    _.flatten([action.payload]),\n    'id'\n  )\n  return adapter.removeMany(payloadIds, state)\n}\n","import { EntityAction } from '../../entity.action-classes'\n\n// removeOne\nexport function removeOne(\n  action: EntityAction<any>,\n  adapter: any,\n  state: any\n) {\n  return adapter.removeOne(action.payload.id, state)\n}\n","import * as _ from 'lodash'\n\nimport { EntityAction } from '../../entity.action-classes'\n\nexport function setScopeIds(\n  action: EntityAction<any>,\n  adapter: any,\n  state: any\n) {\n\n  let entities = action.payload.entities\n  let scopeName = action.payload.scope\n\n\n  let ids = _.map(entities, 'id')\n\n  let stateDelta = {\n    scopes: {\n    }\n  }\n  stateDelta.scopes[scopeName] = {\n    ids: ids\n  }\n\n\n  return Object.assign({}, state, stateDelta)\n}\n","import * as _ from 'lodash'\n\nimport { EntityAction } from '../../entity.action-classes'\n\n// updateMany\nexport function updateMany(\n  action: EntityAction<any>,\n  adapter: any,\n  state: any\n) {\n  let payload = _.flatten([action.payload])\n  let payloadIds = _.map(\n    _.flatten([payload]),\n    'id'\n  )\n  return adapter.upsertMany(payload, state)\n}\n","import { EntityAction } from '../../entity.action-classes'\n\n// updateOne\nexport function updateOne(\n  action: EntityAction<any>,\n  adapter: any,\n  state: any\n) {\n  return adapter.updateOne(action.payload, state)\n}\n","import * as _ from 'lodash'\n\nimport { EntityAction }                 from '../entity.action-classes'\nimport { actions as EntityActionsMap }  from '../entity.actions'\n\nimport {\n  actionType,\n} from './action-type'\n\nimport {\n  addMany, addOne, removeMany, removeOne,\n  setScopeIds, updateMany, updateOne,\n} from './functions/index'\n\nexport function entityReducer(\n  action: EntityAction<any>,\n  featureName: string,\n  sliceName: string,\n  adapter: any,\n  state: any,\n) {\n\n  switch (action.type) {\n    // Handle add store entities\n    case actionType(featureName, sliceName, EntityActionsMap.ADD_STORE_ENTITIES):\n\n      let entityData = action.payload\n      \n      if(_.isArray(entityData) && entityData.length == 1) {\n        // Single item\n        entityData = _.head(entityData)\n      }\n\n      if(_.isArray(entityData)) {\n        return addMany(entityData, adapter, state)\n      }\n      else {\n        return addOne(entityData, adapter, state)\n      }\n    // Handle set selected store entity\n    case actionType(featureName, sliceName, EntityActionsMap.SET_PRIMARY_ENTITY):\n      if (state.selectedEntityId == action.payload.entity.id) {\n        return state\n      }\n      else {\n        let stateDelta = {\n          selectedEntityId: action.payload.entity.id\n        }\n        return Object.assign({}, state, stateDelta)\n      }\n    case actionType(featureName, sliceName, EntityActionsMap.SET_SELECTED):\n      if (state.selectedEntityId == action.payload.entity.id) {\n        return state\n      }\n      else {\n        let stateDelta = {\n          selectedEntityId: action.payload.entity.id\n        }\n        return Object.assign({}, state, stateDelta)\n      }\n    // Handle set selected store entity\n    case actionType(featureName, sliceName, EntityActionsMap.UPDATE_SUCCESS):\n      if(Array.isArray(action.payload)) {\n        return updateMany(action, adapter, state)\n      }\n      else {\n        return updateOne(action, adapter, state)\n      }\n    // Handle delete store entities\n    case actionType(featureName, sliceName, EntityActionsMap.DELETE_SUCCESS):\n      if(Array.isArray(action.payload)) {\n        return removeMany(action, adapter, state)\n      }\n      else {\n        return removeOne(action, adapter, state)\n      }\n    // Handle set scope entities\n    case actionType(featureName, sliceName, EntityActionsMap.SET_SCOPE_ENTITIES):\n      return setScopeIds(action, adapter, state)\n    // Return the state\n    default:\n      return state\n    }\n}\n\n","import * as _ from 'lodash'\n\nimport { Observable } from 'rxjs'\n\nimport {\n  EntityIdentifier,\n  iEntity,\n  iEntityCollection,\n} from '../../interfaces'\n\n\nexport class EntityCollection implements iEntityCollection {\n  public length: number\n\n  constructor(\n    public entities: iEntity[] = []\n  ) {\n    this.length = entities.length\n  }\n\n  none() {\n    return this.buildCollection([])\n  }\n\n  sort(attributes: string[] | string): iEntityCollection {\n    attributes = _.flatten([attributes])\n\n    let entities = _.sortBy(this.entities, attributes)\n    return this.buildCollection(entities)\n  }\n\n  filter(...args): iEntityCollection {\n    // @ts-ignore:\n    let entities = this.entities.filter(...args)\n    return this.buildCollection(entities)\n  }\n\n  invokeFilter(methodName: string, attribute): iEntityCollection {\n    let filterByMethod = (entity) => {\n      if(entity[methodName]) {\n        return entity[methodName](attribute)\n      }\n      else {\n        return false\n      }\n    }\n    //let filterPartial = _.partialRight(filterByMethod, ...args)\n    let entities = _.filter(this.entities, filterByMethod)\n    return this.buildCollection(entities)\n  }\n\n  // TODO: deprecate this method\n  filterByInvoke(methodName: string, attribute): iEntityCollection {\n    return this.invokeFilter(methodName, attribute)\n  }\n\n  filterByAttrs(filters: any): iEntityCollection {\n    let runFilter = (entityCollection, filter, attr) => {\n      return entityCollection.filterByAttr(attr, filter)\n    }\n    let value = _.reduce(filters, runFilter, this)\n    return value\n  }\n\n  find(id: EntityIdentifier): iEntity {\n    let findEntity = (entity) => {\n      var defaults = [\"id\"]\n      var idAttributes =\n        _.get(entity.constructor, 'config.primaryKeys', defaults)\n      let hasId = (attr) => {\n        return entity[attr] == id\n      }\n      return ! _.isNil(_.find(idAttributes, hasId))\n    }\n\n    return _.find(this.entities, findEntity)\n  }\n\n  findByAttr(attr: string, value: any): iEntity {\n    function findEntity(entity) {\n      return entity[attr] == value\n    }\n\n    return _.find(this.entities, findEntity)\n  }\n\n  map(mapFn): any[] {\n    return _.map(this.entities, mapFn)\n  }\n\n  slice(...args): iEntityCollection {\n    let entities = this.entities.slice(...args)\n    return this.buildCollection(entities)\n  }\n\n  where(conditions: any): iEntityCollection {\n    var filterByCondition = (entity, value, key) => {\n      // When the entity does not have the attribute at all\n      if(!_.has(entity, key)) {\n        return false\n      }\n\n      let entityValue = entity[key]\n\n      // Case 1: the attribute in the entity is an array\n      if(entityValue instanceof Array) {\n        return _.includes(\n          _.map(entityValue, _.toString),\n          _.toString(value)\n        )\n      }\n\n      // Case 2: the condition is an array\n      if(value instanceof Array) {\n        return _.includes(\n          _.map(value, _.toString),\n          _.toString(entityValue)\n        )\n      }\n\n      return _.toString(entityValue) == _.toString(value)\n    }\n\n    var filterEntity = (entity) => {\n      return _.every(conditions, _.partial(filterByCondition, entity))\n    }\n\n    let entities = _.filter(this.entities, filterEntity)\n    return this.buildCollection(entities)\n  }\n\n  stringSearch(conditions: any): iEntityCollection {\n    let runFilter = (entityCollection, searchTerm, attr) => {\n      return entityCollection.stringSearchByAttr(attr, searchTerm)\n    }\n    return _.reduce(conditions, runFilter, this)\n  }\n\n  search(conditions: any): iEntityCollection {\n    var filterByCondition = (entity, value, key) => {\n      let entityValue = entity.attributes[key]\n\n      if(value instanceof Array) {\n        return _.includes(value, entityValue)\n      }\n      else {\n        return _.includes(entityValue, value)\n      }\n    }\n\n    var filterEntity = (entity) => {\n      return _.every(conditions, _.partial(filterByCondition, entity))\n    }\n\n    let entities = _.filter(this.entities, filterEntity)\n    return this.buildCollection(entities)\n  }\n\n  stringSearchByAttr(attr: string, searchTerm: any): iEntityCollection {\n    let attrFilter = (entity) => {\n      if(! searchTerm) {\n        return true\n      }\n\n      let entityValue = entity[attr]\n      let entityWildcardValue = _.lowerCase(entityValue)\n      let searchTermWildcardValue = _.lowerCase(searchTerm)\n      return _.includes(entityWildcardValue, searchTermWildcardValue)\n    }\n    return this.filter(attrFilter)\n  }\n\n  isEmpty(): boolean {\n    return _.isEmpty(this.entities)\n  }\n\n  isNotEmpty(): boolean {\n    return !this.isEmpty()\n  }\n\n  hasEntities(): boolean {\n    return this.isNotEmpty()\n  }\n\n  private filterByAttr(attr: string, filter: any): any {\n    let attrFilter = (entity) => {\n      let value = entity.attributes[attr]\n      return filter(value)\n    }\n    return this.filter(attrFilter)\n  }\n\n  private buildCollection(entities) {\n    let collectionType: any = this.constructor\n    return new collectionType(entities)\n  }\n\n  // Create an iterator for EntityTypeCollection\n  // Allows us to use the collections in angular directives\n  // (i.e. ngFor, etc)\n  [Symbol.iterator]() {\n    let current = 0\n    let entities = this.entities\n    return  {\n      next: function () {\n        let noEntities = _.isEmpty(entities)\n        let value = noEntities ? null : entities[current++]\n        let done = noEntities ? true : current > entities.length\n        return {\n          value: value,\n          done: done\n        }\n      }\n    }\n  }\n}\n","import * as _ from 'lodash'\n\nimport { createEntityAdapter as ngrxCreateEntityAdapter } from '@ngrx/entity'\n\nimport {\n  iEntityState,\n  iEntity,\n  iEntityAdapter,\n} from '../../interfaces/index'\n\nimport { \n  buildEntityTypeSelectors,\n} from '../../util/builders/selectors/build-entity-type-selectors'\n\nimport { entityReducer }         from './reducer/index'\nimport { EntityCollection }      from './entity.collection'\n\n\nexport class EntityAdapter implements iEntityAdapter {\n  featureName: any\n  entityType: any\n  entityConfig: any\n  entityName: any\n  sliceName: any\n\n  private _initialState: any\n  private _ngrxEntityAdapter: any\n  private _selectors: any\n  private _stateInterface: any\n  private _reducer: any\n  private _entityCollectionType: any\n\n  constructor(entityOpts: any) {\n    this.featureName = entityOpts.featureName\n    this.entityType = entityOpts.entityType\n    this.entityConfig = this.entityType.config\n\n    this.entityName = this.entityType.sliceName\n    this.sliceName = this.entityName\n  }\n\n\n  get entityCollectionType() {\n    return EntityCollection\n  }\n\n  get reducer() {\n    return this.getterWithBuilder('_reducer', 'buildReducer')\n  }\n\n  get selectors() {\n    return this.getterWithBuilder('_selectors', 'buildSelectors')\n  }\n\n  get initialState() {\n    return this.getterWithBuilder('_initialState', 'buildInitialState')\n  }\n\n  get ngrxEntityAdapter() {\n    if(! this._ngrxEntityAdapter) {\n      this._ngrxEntityAdapter = this.buildNgrxEntityAdapter()\n    }\n\n    return this._ngrxEntityAdapter\n  }\n\n  get scopes() {\n    let defaultScopes = {}\n    return _.get(this.entityConfig, 'initialState.scopes', defaultScopes)\n  }\n\n  private buildReducer() {\n    var adapter = this.ngrxEntityAdapter\n    var featureName = this.featureEntitySliceName(this.featureName)\n    var sliceName = this.sliceName\n    var initialState = this.initialState\n    var customReducer = this.entityConfig.reducer\n\n    let baseReducer = (state: iEntityState<iEntity> = initialState, action: any) => {\n\n      if(customReducer) {\n        state = customReducer(state, action)\n      }\n\n      state = entityReducer(\n        action, \n        featureName,\n        sliceName,\n        adapter,\n        state,\n      )\n\n      return state\n    }\n\n    return baseReducer\n  }\n  \n  private featureEntitySliceName(featureName) {\n    return _.join([featureName, 'entities'], '.')\n  }\n\n  private buildSelectors() {\n    return buildEntityTypeSelectors(this)\n  } \n\n  private buildInitialState() {\n    let entityTypeInitialState = {\n      selectedEntityId: null,\n    }\n\n    let initialState = _.merge(\n      entityTypeInitialState,\n      this.entityType.initialState\n    )\n\n    return this.ngrxEntityAdapter.getInitialState(initialState)\n  }\n\n  private buildNgrxEntityAdapter() {\n    return ngrxCreateEntityAdapter<any>() \n  }\n\n  private getterWithBuilder(propName, builder) {\n    if(!this[propName]) {\n      this[propName] = this[builder]()\n    }\n\n    return this[propName]\n  }\n\n}\n","import * as _ from 'lodash'\n\nimport { EntityAdapter }      from './entity.adapter'\n\nexport class EntityAdapterFactory {\n  _adapters: any[]\n\n  constructor(\n    private _featureConfig,\n  ) {}\n\n  get featureConfig(): any {\n    return this._featureConfig\n  }\n\n  get adapters(): any[] {\n    if(!this._adapters) {\n      this._adapters = this.buildAdapters()\n    }\n    return this._adapters\n  }\n\n  private buildAdapters() {\n    return _.map(\n      this.featureConfig.entityTypes,\n      _.bind(this.buildAdapter, this)\n    )\n  }\n\n  private buildAdapter(entityType) {\n    let opts = {\n      featureName: this.featureConfig.name,\n      entityType: entityType,\n    }\n    return new EntityAdapter(opts)\n  }\n}\n","import * as _ from 'lodash'\n\nimport { classify } from '@ceo/core'\n\nimport {\n  iFeatureConfig,\n  iEntityConstructor,\n  iEntityTypeMap,\n  iEntity,\n  iEntityConfig,\n  EntityTypeIdentifier,\n} from '../../interfaces/index'\n\nexport class EntityTypeFactory {\n  baseEntityType: iEntityConstructor\n\n  constructor(\n    baseEntityType: iEntityConstructor\n  ) {\n    this.baseEntityType = baseEntityType\n  }\n\n  build(\n    entityConfig: iEntityConfig,\n  ): iEntityTypeMap {\n\n    let entityTypeName = classify(entityConfig.name)\n    let entityType = this.buildEntityType(entityConfig)\n\n    let map = {}\n    let identifier = <EntityTypeIdentifier>entityTypeName\n    map[identifier] = entityType\n    return <iEntityTypeMap>map\n  }\n\n  private buildEntityType(\n    entityConfig: iEntityConfig,\n  ) {\n\n    var entityType\n    if(entityConfig.entityType) {\n      entityType = entityConfig.entityType\n    }\n    else {\n      entityType = this.baseEntityType\n    }\n\n    class Entity extends entityType {\n      static _sliceName: string = entityConfig.name\n      static config: any = entityConfig\n    }\n\n    return Entity\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  iEntityConfig,\n  EntityConfigUrl,\n  EntityConfigUrlFragment,\n  iEntity,\n  iEntityConstructor,\n  iResourceIdentifier,\n} from '../../interfaces/index'\n\nexport class EntityConfig implements iEntityConfig {\n  private _name: string\n  private _entityType: iEntityConstructor\n\n  public type: string\n  public url?: EntityConfigUrlFragment\n  public primaryKeys?: any[] = ['id']\n  public seed: iResourceIdentifier[] = []\n  public apiConfig: any\n  public reducer: any\n  public initialState: any = {}\n\n  public isSeed?: boolean\n\n  public constructor(init?: Partial<EntityConfig>) {\n    Object.assign(this, init)\n  }\n\n  get name(): string {\n    if(! this._name) {\n      this._name = this.type\n    }\n\n    return this._name\n  }\n\n  set name(value: string) {\n    this._name = value\n  }\n\n  getName(): string {\n    return this.type\n  }\n\n  hasResourceType(resourceIdentifier: any = {}): boolean {\n    return this.type == resourceIdentifier.type\n  }\n\n  ofType(entityData: iEntity): boolean {\n    return this.type == entityData.type\n  }\n\n  isCustom() {\n    return _.has(this, \"primaryKeys\")\n  }\n\n  urlFragment(opts = {}): EntityConfigUrlFragment {\n    if(_.isFunction(this.url)) {\n      return this.url(opts)\n    }\n    else {\n      return this.url ? this.url : this.type\n    }\n  }\n\n  get entityType(): iEntityConstructor {\n    return this._entityType\n  }\n\n  set entityType(entityType: iEntityConstructor) {\n    this._entityType = entityType\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  iEntity,\n  iEntityEffectsConfigArgs,\n  iEntityEffectsConfig,\n  iEntityEffectTypes,\n} from '../../interfaces/index'\n\nexport class EntityEffectsConfig implements iEntityEffectsConfig {\n  private sliceName: string\n  private initialEntity: iEntity\n  private effectTypes: iEntityEffectTypes\n  private defaultEffectTypes: iEntityEffectTypes = {\n    init: false,\n    load: true,\n    add: true,\n    patch: true,\n    asyncSuccess: true\n  }\n\n  constructor(\n    public config: iEntityEffectsConfigArgs\n  ) {\n    this.sliceName = config.sliceName\n    this.initialEntity = config.initialEntity\n    this.effectTypes = _.merge(this.defaultEffectTypes, config.effectTypes)\n  }\n\n  public hasEffectType(effectTypeName: string) {\n    return(\n      _.has(this.effectTypes, effectTypeName)  &&\n        this.effectTypes[effectTypeName]\n    )\n  }\n\n  public getConfig(configItem: string) {\n    return this.config[configItem]\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  slugify,\n  camelCase,\n} from '@ceo/core'\n\nimport {\n  Mixin,\n  AttributeGetterSetter,\n  AttributeUpdater,\n  Memoizer,\n} from '@ceo/shared'\n\n\nimport {\n  iDataService,\n  iDataServiceOpts,\n  iEntity,\n  iEntityAttributes,\n  iEntityConfig,\n  iEntityRelationships,\n  EntityData,\n  EntityIdentifier,\n  EntityRelationshipIdentifier,\n  EntityTypeIdentifier,\n  iResourceIdentifier,\n} from '../../../interfaces/index'\n\n// @dynamic\n@Mixin([AttributeGetterSetter, AttributeUpdater, Memoizer])\nexport class JsonApiEntity implements iEntity,\n  AttributeGetterSetter, AttributeUpdater {\n\n  static _sliceName: string = ''\n  static config: any = {}\n  static defaultAttributes: any = {}\n\n  static get sliceName(): string {\n    if(this._sliceName) {\n      return this._sliceName\n    }\n\n    if(this.config) {\n      return this.config.name\n    }\n\n    return this.constructor.name\n  }\n\n  id: EntityIdentifier\n  type: EntityTypeIdentifier\n  attributes: iEntityAttributes = {}\n  relationships: iEntityRelationships\n  defaultAttributes: any = {}\n\n  private _dataService: iDataService\n\n  public constructor(\n    init?: Partial<iEntity>,\n    dataService?: iDataService,\n  ) {\n    Object.assign(this, init)\n    this._dataService = dataService\n    this.setAttributes()\n  }\n\n  setAttributes() {\n    this.attributes =\n      _.defaults(this.attributes, (<any>this.constructor).defaultAttributes)\n    this.updateAttributes(this.attributes)\n  }\n\n  getAttr(attrName: string) {\n    return this.attributes[attrName]\n  }\n\n  setAttr(attrName: string, value: any) {\n    attrName = slugify(attrName)\n    let prop = {}\n    prop[attrName] = value\n    this.updateAttributes(prop)\n  }\n\n  get dataService(): iDataService {\n    return this._dataService\n  }\n\n  set dataService(service: iDataService) {\n    this._dataService = service\n  }\n\n  get isNew(): boolean {\n    return !_.has(this, 'id')\n  }\n\n  nameStartsWith(name: string) {\n    let nameIndex = this.getAttr('name')\n      .toLowerCase()\n      .indexOf(name.toLowerCase())\n    return nameIndex === 0\n  }\n\n  getSliceName() {\n    return this.type\n  }\n\n  relationship(type) {\n    return this[type]\n  }\n\n  relationshipSize(\n    relationshipName: EntityRelationshipIdentifier,\n  ): number {\n    if(!this.hasRelationship(relationshipName)) {\n      return 0\n    }\n\n    let relationshipData = this.relationships[relationshipName].data\n    if(_.isArray(relationshipData)) {\n      return relationshipData.length\n    }\n\n    return 1\n  }\n\n  relationship$(\n    relationshipName: EntityRelationshipIdentifier,\n    opts: iDataServiceOpts = {},\n  ): Observable<EntityData> {\n    return this.dataService.relationship$(this, relationshipName, opts)\n  }\n\n  save$(\n    opts: iDataServiceOpts = {}\n  ): Observable<iEntity> {\n    let saveAction = this.isNew ? 'create$' : 'update$'\n    return this.dataService[saveAction](this.toResourceIdentifier(), opts)\n  }\n\n  private toResourceIdentifier(): any {\n    let ri = _.clone(_.pick(this, 'feature', 'type')) as any\n    ri.data = this.attributes\n    if(!this.isNew) {\n      ri.id = this.id\n    }\n    return ri\n  }\n\n  private hasRelationship(\n    relationshipName: EntityRelationshipIdentifier,\n  ): boolean {\n    return (\n      this.relationships &&\n      this.relationships[relationshipName] && \n      this.relationships[relationshipName].data\n    )\n  }\n\n\n  // Mixin methods\n  updatedKeys: string[] = []\n  updateAttributes(attributes: any): void {}\n  createAttributeSettersAndGetters(): void {}\n  createSettersAndGetters(props: any): void {}\n  createGetSet(obj, props, key: string, name: string): void {}\n  generateGetSet(props, key, name): any {}\n  setProp(props, key, value): void {}\n  getProp(props, key): any {}\n  memoized(property: string, value: any): any {}\n}\n","import { JsonApiEntity } from './json-api.entity'\n\nexport class ResourceAssociationEntity extends JsonApiEntity {\n  isForAttribute(attrName: string) {\n    return (this as any).name == attrName\n  }\n}\n","import { JsonApiEntity } from './json-api.entity'\n\nexport class ResourceAttributeEntity extends JsonApiEntity {\n  isForAttribute(attrName: string) {\n    return (this as any).name == attrName\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  camelCase,\n} from '@ceo/core'\n\nimport {\n  EntityData,\n} from '../../../interfaces/index'\n\nexport function buildEntityRelationshipProperty(\n  relationshipName,\n): (() => Observable<EntityData>) {\n\n  function relationship(): Observable<EntityData> {\n    return this.dataService.relationship$(this, relationshipName, {})\n  }\n\n  return relationship\n}\n\nexport function defineEntityRelationshipGetSet(\n  entityType,\n  relationshipName,\n): void {\n\n  let propName = `${camelCase(relationshipName)}$`\n  let privatePropName = `_${propName}`\n\n  let getter = buildEntityRelationshipProperty(relationshipName)\n\n  console.log(\"building get set for \" + entityType.name + \" : \" + relationshipName)\n\n  let props = {\n    get: function() {\n      return this.memoized(privatePropName, getter)\n    },\n    set: function(value: any) {}\n  }\n\n  Object.defineProperty(entityType.prototype, propName, props)\n}\n\n\nexport function buildEntityRelationshipProperties(\n  entityType,\n): void {\n\n  let defineGetSet = _.partial(defineEntityRelationshipGetSet, entityType)\n  _.map(entityType.relationshipNames, defineGetSet)\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  slugify,\n} from '@ceo/core'\n\nimport {\n  iEntityCollection,\n  iResourceConfigurationEntity,\n} from '../../../interfaces/index'\n\nimport {\n  buildEntityRelationshipProperties,\n  defineEntityRelationshipGetSet,\n} from '../../../util/builders/entity/build-entity-relationship-properties'\n\nimport { JsonApiEntity } from './json-api.entity'\n\nexport class ResourceConfigurationEntity extends JsonApiEntity\n  implements iResourceConfigurationEntity {\n\n  static defaultAttributes: {} = {\n    isRoutable: true\n  }\n\n  static relationshipNames: string[] = [\n    'resource-associations',\n    'resource-attributes',\n    'resource-validators',\n  ]\n\n  resourceAssociations$: any\n}\n\nlet buildEntityRelationship = (name) => {\n  defineEntityRelationshipGetSet(ResourceConfigurationEntity, name)\n}\n_.map(ResourceConfigurationEntity.relationshipNames, buildEntityRelationship)\n\n/*\nResourceConfigurationEntity.prototype.resourceAssociations$ = function() {\n  return this.dataService.relationship$(this, 'resource-associations', {})\n}\n*/\n","import * as _ from 'lodash'\n\nimport { JsonApiEntity } from './json-api.entity'\n\nexport class ResourceValidatorEntity extends JsonApiEntity {\n  isForAttribute(attrName: string) {\n    return _.includes((this as any).attributeNames, attrName)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  iFeatureConfig,\n  iEntityConstructor,\n  iEntityConstructorParams,\n  iEntityTypeMap,\n  iEntity,\n  iEntityConfig,\n  iResourceIdentifier,\n} from '../../interfaces/index'\n\nimport { EntityTypeFactory } from '../entity/entity-type.factory'\n\nexport class FeatureConfig implements iFeatureConfig {\n  name: string\n  entityConfigs: iEntityConfig[]\n  baseEntityType: iEntityConstructor\n  selectors: any\n\n  private _entityTypes: iEntityTypeMap\n  private _sliceNames: string[]\n  private _seedEntities: iEntityConstructor[]\n\n  public constructor(init?: Partial<iFeatureConfig>) {\n    Object.assign(this, init)\n  }\n\n  get sliceNames(): string[] {\n    if(this._sliceNames) {\n      return this._sliceNames\n    }\n\n    this._sliceNames = this.buildSliceNames()\n    return this._sliceNames\n  }\n\n  get seedEntities() {\n   if(! this._seedEntities) {\n     this._seedEntities = this.buildSeeds()\n   }\n\n   return this._seedEntities\n  }\n\n  get entityTypes(): iEntityTypeMap {\n    if(!this._entityTypes) {\n      this._entityTypes = this.buildEntityTypes()\n    }\n\n    return this._entityTypes\n  }\n\n  entityTypeFromEntityData(\n    entityData: iEntityConstructorParams\n  ): iEntityConstructor {\n    let ofType = (entityType) => {\n      return entityType.config.ofType(entityData)\n    }\n\n    return _.find(this.entityTypes, ofType)\n  }\n\n  entityType(theType: string): iEntityConstructor {\n    let hasType = (entityType) => {\n      return entityType.config.type == theType\n    }\n\n    return _.find(this.entityTypes, hasType)\n  }\n\n  ////////////////////////////\n  // Private methods\n  ////////////////////////////\n\n\n  private get entitySliceNames(): string[] {\n    let getName = (entityType) => {\n      return entityType.sliceName\n    }\n    return _.map(this.entityTypes, getName)\n  }\n\n  private buildSliceNames(): string[] {\n    let prefixedSliceName = (sliceName) => {\n      return _.join([this.name, 'entities', sliceName], '.')\n    }\n\n    return _.map(this.entitySliceNames, prefixedSliceName)\n  }\n\n  private buildSeeds() {\n    return _.flatten(\n      _.map(\n        this.entityTypes,\n        _.bind(this.buildEntityTypeSeeds, this)\n      )\n    )\n  }\n\n  private buildEntityTypeSeeds(entityType) {\n    let buildResourceIdentiifer = (\n      ri: iResourceIdentifier\n    ) => {\n      let map = {\n        feature: this.name,\n        type: entityType.config.type\n      }\n      return _.merge(map, ri)\n    }\n\n    return _.map(entityType.config.seed, buildResourceIdentiifer)\n  }\n\n  private buildEntityTypes() {\n    var factory = new EntityTypeFactory(this.baseEntityType)\n    let build = _.bind(factory.build, factory)\n    let entityTypeMaps = _.map(this.entityConfigs, build)\n    return _.assign.apply(_, entityTypeMaps)\n  }\n}\n","import {\n  Observable,\n} from 'rxjs'\n\nimport * as types from '../types'\n\nimport { FeatureIdentifier } from '../feature/feature-identifier'\n\nimport { EntityIdentifier } from './entity-identifier'\n\nexport type EntityAttributeDataType = any;\n\nexport type EntityRelationshipIdentifier = string\n\nexport type EntityRelationshipType = string\nexport const EntityHasOneRelationshipType = \"HasOne\"\nexport const EntityHasManyRelationshipType = \"HasMany\"\nexport type EntityRelationship = EntityHasOneRelationship | EntityHasManyRelationship\n\nexport type EntityHasOneRelationship = iEntityRelationshipMapping\nexport type EntityHasManyRelationship = iEntityRelationshipMapping[]\n\nexport type EntityTypeIdentifier = string;\n\n\nexport type EntityData = iEntity | iEntityCollection\n\nexport interface iEntityAttributes {\n  [key: string]: EntityAttributeDataType;\n}\n\nexport interface iEntityRelationships {\n  [key: string]: any\n}\n\nexport interface iEntityConstructorParams {\n  id?: EntityIdentifier\n  feature?: FeatureIdentifier\n  type: EntityTypeIdentifier\n  attributes: iEntityAttributes\n  relationships?: iEntityRelationships\n  [key: string]: any\n}\n\nexport interface iEntity extends iEntityConstructorParams {\n  sliceName?: string\n  dataService?: any\n\n  save$(opts?: any): Observable<iEntity>\n}\n\nexport interface Entity extends iEntity {}\n\nexport interface iEntityConstructor {\n  new(...args): iEntity\n\n  _sliceName: string\n\n  config: any\n  defaultAttributes: any\n}\n\nexport interface iEntityCollection {\n  length: number;\n  entities: iEntity[];\n\n  slice(any): iEntityCollection;\n  filter(any): iEntityCollection;\n  find(any): iEntity;\n  findByAttr(attr: any, value: any): iEntity;\n  filterByAttrs(any): iEntityCollection;\n  invokeFilter(methodName: string, ...args): iEntityCollection\n  filterByInvoke(methodName: string, ...args): iEntityCollection\n  where(any): iEntityCollection;\n  stringSearch(any): iEntityCollection;\n  search(any): iEntityCollection;\n  stringSearchByAttr(attr: any, term: any): iEntityCollection;\n  map(any): any[]\n  sort(attributes: string[]): iEntityCollection\n  isEmpty(): boolean\n  isNotEmpty(): boolean\n  hasEntities(): boolean\n}\n\n\nexport interface iEntityRelationshipMapping {\n  id: EntityIdentifier,\n  type: EntityTypeIdentifier;\n  [key: string]: any\n}\n\nexport interface iWrappedEntityRelationship {\n  data: EntityRelationship\n}\n\n\nexport interface iEntityMap {\n  EntityTypeIdentifier: iEntity[],\n}\n\nexport interface iEntityTypeMap {\n  EntityTypeIdentifier: iEntityConstructor\n}\n","export const EntitySelectorTypes: any = {\n  All: 'All' as 'All',\n  Ids: 'Ids' as 'Ids',\n  Entities: 'Entities' as 'Entities',\n  Total: 'Total' as 'Total',\n  SelectedEntity: 'SelectedEntity' as 'SelectedEntity',\n  Config: 'Config' as 'Config',\n  Scope: 'Scope' as 'Scope',\n}\n\nexport interface iEntitySelectorTypes {\n  All: string\n  Ids: string\n  Entities: string\n  Total: string\n  SelectedEntity: string\n  Config: string\n  Scope: string\n}\n\nexport type EntitySelectorTypeKeys = keyof iEntitySelectorTypes\n","import * as _ from 'lodash'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iDataService,\n  iEntity,\n  iEntityConstructorParams,\n} from '../interfaces/index'\n\n@Injectable()\nexport class EntityCloner {\n  clone(\n    entity: iEntity,\n    dataService: iDataService = null,\n  ): iEntity {\n    let entityCtor : any = entity.constructor\n    return new entityCtor(this.constructorParams(entity), dataService)\n  }\n\n  private constructorParams(\n    entity: iEntity,\n  ): iEntityConstructorParams {\n\n    let paramNames = [\n      'id',\n      'feature',\n      'type',\n      'attributes',\n      'relationships',\n    ]\n    return <iEntityConstructorParams>_.pick(entity, paramNames)\n\n  }\n}\n","import * as _ from 'lodash'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  InflectionService,\n}   from '@ceo/core'\n\nimport {\n  iEntitySelectorIdentifier,\n} from '../../interfaces/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SelectorNameService {\n  constructor(\n    private inflectionService: InflectionService,\n  ) {}\n\n  getFeatureSelectorName(featureConfig) {\n    return featureConfig.name\n  }\n\n  getEntitySelectorName(entityAdapter) {\n    return entityAdapter.sliceName\n  }\n\n  getNestedSelectorName(parentName, selectorName) {\n    let parentSegments = this.buildSegments(parentName)\n    let selectorNameSegments = this.buildSegments(selectorName, 'select')\n    let segments = _.flatten([parentSegments, selectorNameSegments])\n\n    return _.join(segments, '.')\n  }\n\n  getResourceSelectorName(si: iEntitySelectorIdentifier) {\n    return this.selectorIdentifierToSelectorName(si)\n  }\n\n  // Alias for getResourceSelectorName\n  getSelectorName(si: iEntitySelectorIdentifier) {\n    return this.getResourceSelectorName(si)\n  }\n\n  private buildSegments(value: string, prefix: string = ''): string[] {\n    let camelCase = _.bind(this.inflectionService.camelCase, this)\n\n    let inflections = \n      [\n        ['removePrefix', prefix],\n        ['replace', / /g, ''],\n        ['trim', '.'],\n        ['split', '.'],\n      ]\n\n    let result = (<any>this.inflectionService).inflect(value, inflections)\n\n    return _.map(result, camelCase)\n  }\n\n  private sanitizedSelectorName(selectorName: string): string[] {\n    let prefix = 'select'\n\n    selectorName = this.inflectionService.removePrefix(selectorName, prefix)\n\n    let camelCase = (value) => {\n      return this.inflectionService.camelCase(value)\n    }\n\n    let segments = _.map(_.split(selectorName, '.'), camelCase)\n    return segments\n  }\n\n  private selectorIdentifierToSelectorName(si: iEntitySelectorIdentifier) {\n    let featureName =\n      this.inflectionService.camelCase(si.feature)\n\n    let featureEntities = 'entities'\n\n    let sliceName =\n      this.inflectionService.camelCase(si.entityType)\n\n    let selectorType =\n      this.inflectionService.camelCase(si.selectorType)\n\n    let segments = [\n      featureName,\n      featureEntities,\n      sliceName,\n      selectorType,\n    ]\n\n    if(_.has(si, 'scope')) {\n      let scopeName =\n        this.inflectionService.camelCase(si.scope)\n\n      segments.push(scopeName)\n    }\n\n    return _.join(segments, '.')\n  }\n}\n","// Get all the Selectors internal to an entity type\n\nimport * as _ from 'lodash'\n\nimport {\n  createSelector,\n} from '@ngrx/store'\n\nexport const buildEntitySelectors = (\n  entityAdapter,\n  entityTypeSelector,\n  selectorNameService,\n) => {\n\n  let buildEntityScopedSelector = (selector, selectorName) => {\n    let entitySelectorName =\n      selectorNameService.getEntitySelectorName(entityAdapter) \n\n    let entityScopedSelectorName =\n      selectorNameService.getNestedSelectorName(entitySelectorName, selectorName)\n\n    let featureLevelSelector = createSelector(entityTypeSelector, selector)\n\n    let selectors = {}\n    selectors[entityScopedSelectorName] = featureLevelSelector\n\n    return selectors\n  }\n\n  return _.reduce(\n    _.map(entityAdapter.selectors, buildEntityScopedSelector),\n    _.merge,\n    {},\n  )\n}\n","import {\n  iEntityState,\n} from '../../../interfaces/index'\n\nexport const buildSliceSelector = (sliceName) => {\n  return (state: iEntityState<any>) => {\n    return state[sliceName]\n  }\n}\n","import {\n  iEntityState,\n} from '../../../interfaces/index'\n\nimport { buildSliceSelector } from './build-slice-selector'\n\n// Get all the Entity Type data for an entity type.\nexport const buildEntityTypeSliceSelector = (entityAdapter) => {\n  return buildSliceSelector(entityAdapter.sliceName)\n}\n","import * as _ from 'lodash'\n\nimport {\n  compose,\n} from '@ngrx/store'\n\nexport const buildRootSelector = (\n  featureSelector,\n  entitySelector\n) => {\n\n  let rootSelectorName = _.join([featureSelector.name, entitySelector.name], '.')\n  let rootSelector = compose(entitySelector.selector, featureSelector.selector)\n\n  return {\n    name: rootSelectorName,\n    selector: rootSelector,\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  createFeatureSelector,\n  compose,\n} from '@ngrx/store'\n\nimport { buildEntitySelectors }    from './build-entity-selectors'\nimport { buildEntityTypeSliceSelector } from './build-entity-type-slice-selector'\nimport { buildRootSelector }       from './build-root-selector'\nimport { buildSliceSelector }      from './build-slice-selector'\n\nexport const buildFeatureSelector = (\n  featureConfig,\n  entityAdapters,\n  selectorService,\n  selectorNameService,\n  buildCustomSelectors,\n) => {\n\n  // Feature Selector\n  var featureSelectorName = selectorNameService.getFeatureSelectorName(featureConfig)\n  let featureSelectorFunction = createFeatureSelector<any>(featureSelectorName)\n  let featureSelector = {\n    name: featureSelectorName,\n    selector: featureSelectorFunction\n  }\n  selectorService.addSelector(featureSelector)\n\n  // Feature Entities Selector\n  var featureEntitiesSelectorName =\n    selectorNameService.getNestedSelectorName(featureSelectorName, 'entities')\n  let entitiesSelectorFunction = buildSliceSelector('entities')\n  let featureEntitiesSelectorFunction =\n    compose(entitiesSelectorFunction, featureSelector.selector)\n  let featureEntitiesSelector = {\n    name: featureEntitiesSelectorName,\n    selector: featureEntitiesSelectorFunction\n  }\n  selectorService.addSelector(featureEntitiesSelector)\n\n\n  // Feature Config Selector\n  var featureConfigSelectorName =\n    selectorNameService.getNestedSelectorName(featureSelectorName, 'config')\n  let configSelectorFunction = buildSliceSelector('config')\n  let featureConfigSelectorFunction =\n    compose(configSelectorFunction, featureSelector.selector)\n  let featureConfigSelector = {\n    name: featureConfigSelectorName,\n    selector: featureConfigSelectorFunction\n  }\n  selectorService.addSelector(featureConfigSelector)\n\n\n  let addEntity = (entityAdapter) => {\n    var adapter = entityAdapter\n\n    var entityTypeSelector = buildEntityTypeSliceSelector(entityAdapter)\n\n    let entitySelectors =\n      buildEntitySelectors(\n        entityAdapter,\n        entityTypeSelector,\n        selectorNameService\n      )\n\n    let buildRootSelectorForEntity = (selector, selectorName) => {\n      let entitySelector = {\n        name: selectorName,\n        selector: selector\n      }\n\n      return buildRootSelector(\n        featureEntitiesSelector,\n        entitySelector\n      )\n    }\n\n    let rootSelectors = _.map(entitySelectors, buildRootSelectorForEntity)\n\n    let addSelectors = (selector) => {\n      selectorService.addSelector(selector)\n    }\n\n    _.map(rootSelectors, addSelectors)\n  }\n\n  _.map(entityAdapters, addEntity)\n\n  buildCustomSelectors(selectorService)\n}\n\n","import * as _ from 'lodash'\n\nimport { Store, createSelector, MemoizedSelector } from '@ngrx/store'\n\nimport {\n  iEntityState,\n  iEntity,\n} from '../../../interfaces/index'\n\n\nexport const buildFilterSelector = (selector, filter) => {\n\n  let filterState = (state: any) => {\n    if(state && state.where) {\n      return state.where(filter)\n    }\n    else {\n      return state\n    }\n  }\n\n  return createSelector(\n    selector,\n    filterState,\n  )\n}\n","import * as _ from 'lodash'\n\nimport { Store, createSelector, MemoizedSelector } from '@ngrx/store'\n\nimport {\n  iEntityState,\n  iEntity,\n  iResourceIdentifier,\n} from '../../../interfaces/index'\n\nexport const buildFindSelector = (\n  selector,\n  ri: iResourceIdentifier,\n  findPropPath: string = 'id'\n) => {\n\n  let find = (state: any) => {\n    return state.find(_.get(ri, findPropPath))\n  }\n\n  return createSelector(\n    selector,\n    find,\n  )\n}\n","import * as _ from 'lodash'\n\nimport { pipe }   from 'rxjs'\nimport { filter } from 'rxjs/operators'\n\nimport { \n  select,\n  createFeatureSelector,\n  createSelector, MemoizedSelector\n} from '@ngrx/store'\n\nimport {\n  iFeatureMap,\n} from '../../interfaces/index'\n\nimport { iFeatureState } from './state'\n\nexport const selectEntityFeature = createFeatureSelector<any> ('entity')\n\nlet selectFeatures = (state: iFeatureState): iFeatureMap => {\n  return state.features\n}\n\nlet selectPrimaryEntityIdentifier = (state: iFeatureState) => {\n  return _.get(state, 'primaryEntity.resourceIdentifier')\n}\n\nlet selectPrimaryEntity = (state: iFeatureState) => {\n  return _.get(state, 'primaryEntity.entity')\n}\n\nlet selectors = {\n  features: selectFeatures,\n  primaryEntity: selectPrimaryEntity,\n  primaryEntityIdentifier: selectPrimaryEntityIdentifier,\n}\n\nlet buildFeatureSelector = (selector, name) => {\n  return createSelector(\n    selectEntityFeature,\n    selector,\n  )\n}\n\n\nexport const entityFeatureSelectors =\n  _.mapValues(selectors, buildFeatureSelector)\n","import * as _ from 'lodash'\n\nimport { Observable }   from 'rxjs'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store } from '@ngrx/store'\n\nimport { InflectionService }             from '@ceo/core'\n\nimport {\n  iSelectorsMap,\n  iEntitySelectorIdentifier,\n} from '../../interfaces/index'\n\nimport { SelectorNameService } from './selector-name.service'\n\n@Injectable()\nexport class SelectorService {\n  selectors: iSelectorsMap = {}\n\n  constructor(\n    private inflectionService: InflectionService,\n    private store: Store<any>,\n    private selectorNameService: SelectorNameService\n  ) {}\n\n  select$(selectorName): Observable<any> {\n    let selector = this.getSelector(selectorName)\n    return this.store.select(selector)\n  }\n\n  select(selectorName) {\n    return this.select$(selectorName)\n  }\n\n  selectorFromSelectorIdentifier(si: iEntitySelectorIdentifier) {\n    let selectorName =\n      this.selectorNameService.getResourceSelectorName(si)\n\n    return this.getSelector(selectorName)\n  } \n\n  getSelector(selectorName) {\n    let path = this.selectorPath(selectorName)\n    return  _.get(this.selectors, path)\n  }\n\n  addSelector(selector) {\n    let path = this.selectorPath(selector.name)\n    this.log(selector, path, false)\n    return _.set(this.selectors, path, selector.selector)\n  }\n\n  private selectorPath(selectorName: string): string {\n    let pathElements = _.split(selectorName, '.')\n    /*\n    if(pathElements.length > 1) {\n      pathElements.splice(1, 0, 'entities')\n    }\n    */\n    pathElements.push('selector')\n    return _.join(pathElements, '.')\n  }\n\n  private log(selector, path, loggingEnabled = false) {\n    if(loggingEnabled) {\n      console.log(\"Registering the selector \" + path)\n    }\n  }\n}\n","import * as _ from 'lodash'\n\nimport { Observable }   from 'rxjs'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store, createSelector } from '@ngrx/store'\n\nimport { InflectionService } from '@ceo/core'\n\nimport {\n  iCustomSelector,\n  iEntitySelectorIdentifier,\n  iEntitySelectorTypes,\n  iFeature,\n  iFeatureMap,\n  iResourceIdentifier,\n  iDataServiceOpts,\n  EntitySelectorTypes,\n} from '../../interfaces/index'\n\nimport {\n  JsonApiEntity,\n} from '../../classes/index'\n\nimport {\n  buildFilterSelector,\n  buildFindSelector,\n} from '../../util/builders/selectors/index'\n\nimport {\n  entityFeatureSelectors,\n} from '../../state/feature/selectors'\n\n\nimport { SelectorService } from './selector.service'\n\n\n@Injectable()\nexport class SelectorProvider {\n  features$: Observable<iFeatureMap>\n  features: iFeatureMap\n\n  private defaultOpts: any = {\n    selectorType: <keyof iEntitySelectorTypes>EntitySelectorTypes.All\n  }\n\n  constructor(\n    private selectorService: SelectorService,\n    private store: Store<any>,\n  ) {\n    this.subscribeToFeatures()\n  }\n\n  provide(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n    opts = _.defaults(opts, this.defaultOpts)\n\n    let selector = this.customSelector(ri, opts) ||\n      this.defaultSelector(ri, opts)\n\n    return selector\n  }\n\n  private customSelector(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n\n    let feature = this.features[ri.feature]\n\n    if(feature) {\n      let selectorIsValid = (selector): boolean => {\n        return selector.isValid(ri)\n      }\n      let selector = _.find(feature.selectors, selectorIsValid)\n\n      if(selector) {\n        return <any>selector.selector(this.selectorService, ri)\n      }\n      else {\n        return null\n      }\n    }\n\n    return null\n  }\n\n  private defaultSelector(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n\n    if(this.isRelationshipResourceRequest(ri)) {\n      ri = {\n        feature: ri.feature,\n        type: ri.relationship.type\n      }\n    }\n\n    let si = this.selectorIdentifier(ri, opts)\n    let selector = this.getBaseSelector(si)\n\n    if(this.isFindRequest(ri)) {\n      selector = this.findSelector(selector, ri)\n    }\n\n    if(this.isFilteredResourceRequest(ri)) {\n      selector = this.filterSelector(selector, ri)\n    }\n\n    return selector\n  }\n\n  private isRelationshipResourceRequest(\n    ri: iResourceIdentifier,\n  ) {\n    return _.has(ri, 'relationship')\n  }\n\n  private selectorIdentifier(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): iEntitySelectorIdentifier {\n\n    let isScoped = this.isScopedResourceIdentifier(ri)\n    var selectorType = isScoped ? 'scope' : opts.selectorType\n    \n    let si = {\n      feature: ri.feature,\n      entityType: ri.type,\n      selectorType: <keyof iEntitySelectorTypes> selectorType\n    }\n\n    if(isScoped) {\n      si = _.merge(si, {scope: ri.filter.scope})\n    }\n\n    return si\n  }\n\n  private getBaseSelector(\n    selectorIdentifier: iEntitySelectorIdentifier,\n  ) {\n    return this.selectorService\n      .selectorFromSelectorIdentifier(selectorIdentifier)\n  }\n\n  private isFindRequest(\n    ri: iResourceIdentifier,\n  ) {\n    return !_.isEmpty(this.findPropPath(ri))\n  }\n\n  private findPropPath(\n    ri: iResourceIdentifier,\n  ) {\n\n    let primaryKeys = this.getPrimaryKeys(ri)\n\n    // Simple case when primary key is 'id'\n    if(_.has(ri, 'id') && _.includes(primaryKeys, 'id')) {\n      return 'id'\n    }\n\n\n    // Alternate scenario: when the primary key is\n    // mixed in with the filter params\n    let filterKeys = _.keys(this.getFilterParams(ri))\n    let primaryKey = _.head(_.intersection(primaryKeys, filterKeys))\n    if(primaryKey) {\n      return `filter.${primaryKey}`\n    }\n    else {\n      return null\n    }\n  }\n\n  private findSelector(\n    selector: any,\n    ri: iResourceIdentifier,\n  ): any {\n    return buildFindSelector(selector, ri, this.findPropPath(ri))\n  }\n\n  private isFilteredResourceRequest(\n    ri: iResourceIdentifier,\n  ) {\n    return _.has(ri, 'filter')\n  }\n\n  private filterSelector(\n    selector: any,\n    ri: iResourceIdentifier,\n  ) {\n\n    let filter = this.getFilterParams(ri)\n    return buildFilterSelector(selector, filter)\n  }\n\n  private isScopedResourceIdentifier(ri: iResourceIdentifier,) {\n    return _.has(ri, 'filter.scope')\n  }\n\n  private subscribeToFeatures() {\n    this.features$ = \n      <Observable<iFeatureMap>>this.store.select(entityFeatureSelectors.features)\n    this.features$\n      .subscribe(features => this.features = features)\n  }\n\n  private getFeature(ri: iResourceIdentifier) {\n    return this.features[ri.feature]\n  }\n\n  private getFilterParams(ri: iResourceIdentifier) {\n    return _.omit(ri.filter, 'scope')\n  }\n\n  private getPrimaryKeys(ri: iResourceIdentifier): string[] {\n    var primaryKeys = ['id']\n    let feature = this.getFeature(ri)\n    let entityType = feature.entityType(ri.type)\n\n    if(entityType) {\n      primaryKeys = entityType.config.primaryKeys || primaryKeys\n    }\n\n    return primaryKeys\n  }\n}\n","import { SelectorNameService as EntitySelectorNameService }  from './selector-name.service'\nimport { SelectorProvider as EntitySelectorProvider }        from './selector-provider.service'\nimport { SelectorService as EntitySelectorService }          from './selector.service'\n\nexport const services: any[] = [\n  EntitySelectorNameService,\n  EntitySelectorProvider,\n  EntitySelectorService,\n]\n\nexport {\n  EntitySelectorNameService,\n  EntitySelectorProvider,\n  EntitySelectorService,\n}\n","//  Loads and constructs relations for an entity, using the entity's\n//  relationship data.\n\nimport * as _ from 'lodash'\n\nimport { Observable, empty, of } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport { camelCase }        from '@ceo/core'\n\nimport {\n  EntityRelationshipIdentifier,\n  EntityData,\n  EntityIdentifier,\n  EntityRelationship,\n  EntityRelationshipType,\n  EntityHasOneRelationship,\n  EntityHasManyRelationship,\n  EntityHasOneRelationshipType,\n  EntityHasManyRelationshipType,\n  EntityTypeIdentifier,\n  iDataService,\n  iDataServiceOpts,\n  iEntityRelationshipProvider,\n  iEntity,\n  iEntityRelationshipMapping,\n  iEntityCollection,\n} from '../interfaces/index'\n\nimport {\n  EntityCollection,\n} from '../classes/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EntityRelationshipProvider\n  implements iEntityRelationshipProvider {\n\n  private defaultDataServiceOpts: iDataServiceOpts = {\n    syncWithApi: false,\n  }\n\n  provide$(\n    dataService: iDataService,\n    entity: iEntity,\n    relationshipIdentifier: EntityRelationshipIdentifier,\n    opts: iDataServiceOpts = {},\n  ): Observable<EntityData> {\n\n    let relationship = this.relationshipData(entity, relationshipIdentifier)\n\n    if(!relationship) {\n      return of(<EntityData>null)\n    }\n\n    let relationshipType = this.relationshipType(relationship)\n\n    if(!relationshipType) {\n      return of(<EntityData>null)\n    }\n\n    return this.loadRelationshipData$(\n      dataService, entity, relationship, relationshipType, opts\n    )\n  }\n\n  private loadRelationshipData$(\n    dataService: iDataService,\n    entity: iEntity,\n    relationship: EntityRelationship,\n    relationshipType: EntityRelationshipType,\n    opts: iDataServiceOpts = {},\n  ): Observable<EntityData> {\n\n    var resourceType = ''\n    var prepareRelationship\n\n    if(relationshipType == EntityHasOneRelationshipType) {\n      resourceType = (<EntityHasOneRelationship> relationship).type\n      prepareRelationship = this.prepareHasOne\n    }\n\n    if(relationshipType == EntityHasManyRelationshipType) {\n      if(_.isEmpty(relationship)) {\n        resourceType = this.defaultRelationResourceType(entity)\n      }\n      else {\n        let firstRelationship = relationship[0]\n        resourceType = (firstRelationship).type || 'entity'\n      }\n\n      prepareRelationship = this.prepareHasMany\n    }\n\n    return this.loadResourceTypeData$(dataService, entity, resourceType, opts).pipe(\n      map(entities => prepareRelationship(relationship, entities))\n    )\n  }\n\n  private prepareHasMany(\n    relationship: EntityRelationship,\n    entities: iEntityCollection\n  ): iEntityCollection {\n\n    let ids = _.map(relationship, 'id')\n    return entities.where({id: ids})\n  }\n\n  private prepareHasOne(\n    relationship: EntityRelationship,\n    entities: iEntityCollection\n  ): iEntity {\n    return entities.find((<EntityHasOneRelationship> relationship).id)\n  }\n\n  private loadResourceTypeData$(\n    dataService: iDataService,\n    entity: iEntity,\n    resourceType: EntityTypeIdentifier,\n    opts: iDataServiceOpts = {},\n  ): Observable<iEntityCollection> {\n\n    let resourceOpts = {\n      feature: entity.feature,\n      type: resourceType,\n    }\n    return dataService.get$(resourceOpts, this.buildDataServiceOpts(opts))\n  }\n\n  private buildDataServiceOpts(\n    opts: iDataServiceOpts = {},\n  ) {\n    return _.defaults(opts, this.defaultDataServiceOpts)\n  }\n\n  private relationshipData(\n    entity: iEntity,\n    relationshipIdentifier: EntityRelationshipIdentifier\n  ): EntityRelationship {\n    if(entity && entity.relationships){\n      let wrappedData = entity.relationships[relationshipIdentifier]\n      if(wrappedData) {\n        return wrappedData.data\n      }\n      else {\n        return null\n      }\n    }\n    return null\n  }\n\n  private relationshipType(\n    relationship: EntityRelationship\n  ): EntityRelationshipType  | null {\n    if(_.has(relationship, 'id')) {\n      return EntityHasOneRelationshipType\n    }\n    if(relationship instanceof Array) {\n      return EntityHasManyRelationshipType\n    }\n    return null\n  }\n\n  private defaultRelationResourceType(entity: iEntity) {\n    switch(entity.feature) { \n      case 'app': {\n        return 'sunray-entities'\n      }\n      case 'cms': {\n        return 'wordpress-entities'\n      }\n      default: { \n        return 'sunray-entities'\n      }\n    }\n  }\n} \n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  pipe,\n} from 'rxjs'\n\nimport { map } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store }           from '@ngrx/store'\n\nimport {\n  FeatureIdentifier,\n  iEntityConfig,\n  iEntityTypeMap,\n  iEntity,\n  iEntityConstructor,\n  iEntityConstructorParams,\n  iFeatureConfig,\n  iFeatureMap,\n} from '../interfaces/index'\n\nimport {\n  entityFeatureSelectors,\n} from '../state/feature/selectors'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EntityTypeProviderService {\n  private _features$: Observable<iFeatureMap>\n\n  constructor(\n    protected store: Store<any>,\n  ) {}\n\n  provide$(\n    entityData: iEntityConstructorParams,\n  ): Observable<iEntityConstructor> {\n\n    return this.getFeature$(entityData.feature).pipe(\n      map(feature => this.getEntityType(feature, entityData)),\n    )\n  }\n\n  private getEntityType(\n    feature: iFeatureConfig,\n    entityData: iEntityConstructorParams\n  ): iEntityConstructor {\n\n    return this.getCustomEntityType(feature, entityData) ||\n      feature.baseEntityType\n  }\n\n  private getCustomEntityType(\n    feature: iFeatureConfig,\n    entityData: iEntityConstructorParams\n  ): iEntityConstructor {\n\n    return feature.entityTypeFromEntityData(entityData)\n  }\n\n  private getFeature$(\n    featureName: FeatureIdentifier\n  ): Observable<iFeatureConfig> {\n    return this.features$.pipe(\n      map(features => features[featureName] ),\n    )\n  }\n\n\n  // new stuff\n  private get features$(): Observable<iFeatureMap> {\n    if(!this._features$) {\n      this._features$ = this.buildFeatures$()\n    }\n\n    return this._features$\n  }\n\n  private buildFeatures$(): Observable<iFeatureMap> {\n    let features = this.store.select(entityFeatureSelectors.features)\n    return <Observable<iFeatureMap>>features\n  }\n}\n","// Builds Entity instances from raw (usually server-side) data.\n\nimport * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  map,\n} from 'rxjs/operators'\n\nimport { Injectable, Inject } from '@angular/core'\n\nimport {\n  FeatureIdentifier,\n  iEntity,\n  iResourceIdentifier,\n  iEntityConstructorParams,\n  iEntityConstructor,\n} from '../interfaces/index'\n\nimport { EntityTypeProviderService }  from './entity-type-provider.service'\nimport { EntityRelationshipProvider } from './entity-relationship-provider.service'\n\n\n@Injectable()\nexport class EntityFactory {\n  constructor(\n    private entityTypeProvider: EntityTypeProviderService,\n    private relationshipProvider: EntityRelationshipProvider,\n  ) {}\n\n  build$(\n    entityData: iEntityConstructorParams,\n  ): Observable<iEntity> {\n    return this.getEntityType$(entityData).pipe(\n      map(entityType => new entityType(entityData)),\n    )\n  }\n\n  private getEntityType$(\n    entityData: iEntityConstructorParams,\n  ): Observable<iEntityConstructor> {\n    return this.entityTypeProvider.provide$(entityData)\n  }\n}\n","import * as _ from 'lodash'\n\nimport { Observable, of } from 'rxjs'\n\nimport {\n  map,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store, createSelector } from '@ngrx/store'\n\nimport {\n  EntityActions,\n  JsonApiEntity,\n  EntityCollection,\n} from '../classes/index'\n\nimport {\n  EntityRelationshipIdentifier,\n  EntityData,\n  iEntity,\n  iResourceIdentifier,\n  iDataService,\n  iDataServiceOpts,\n  iEntityConstructorParams,\n  iEntitySelectorIdentifier,\n  EntitySelectorTypes,\n  iEntitySelectorTypes,\n} from '../interfaces/index'\n\nimport { EntityCloner }               from './entity-cloner.service'\nimport { EntitySelectorProvider }     from './selectors/index'\nimport { EntityRelationshipProvider } from './entity-relationship-provider.service'\nimport { EntityFactory              } from './entity-factory.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService implements iDataService {\n  private defaultOpts: iDataServiceOpts = {\n    syncWithApi: true,\n    selectorOpts: {\n      selectorType: <keyof iEntitySelectorTypes>EntitySelectorTypes.All\n    }\n  }\n\n  constructor(\n    private store: Store<any>,\n    private selectorProvider: EntitySelectorProvider,\n    private entityRelationshipProvider: EntityRelationshipProvider,\n    private entityCloner: EntityCloner,\n    private entityFactory: EntityFactory,\n  ) { }\n\n  build$(\n    entityData: iEntityConstructorParams,\n  ): Observable<iEntity> {\n    return this.entityFactory.build$(entityData).pipe(\n      map(entity => this.decoratedData(entity) as iEntity)\n    )\n  }\n\n  create$(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n\n    let actionType = EntityActions.Add\n    return this.executeRequest$(ri, opts, actionType)\n  }\n\n  delete$(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n    let actionType = EntityActions.Delete\n    return this.executeRequest$(ri, opts, actionType)\n  }\n\n  get$(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n    let actionType = EntityActions.Load\n    return this.executeRequest$(ri, opts, actionType)\n  }\n\n  update$(ri: any, opts: iDataServiceOpts = {}) {\n    let actionType = EntityActions.Update\n    return this.executeRequest$(ri, opts, actionType)\n  }\n\n  relationship$(\n    entity: iEntity,\n    relationshipIdentifier: EntityRelationshipIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<EntityData> {\n    return this.entityRelationshipProvider.provide$(\n      this,\n      entity,\n      relationshipIdentifier,\n      opts,\n    )\n  }\n\n  // TODO: deprecate this method\n  get(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n    return this.get$(ri, opts)\n  }\n\n  private executeRequest$(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {},\n    actionType: any\n  ): Observable<any> {\n\n    opts = _.defaults(opts, this.defaultOpts)\n\n    if(this.shouldDispatch(ri, opts)) {\n      let sliceName = this.getSliceName(ri)\n      let action = new actionType(sliceName, ri)\n      this.store.dispatch(action)\n    }\n\n    let selector = this.getSelector(ri, opts)\n\n    if(selector) {\n      return this.storeData$(selector, opts).pipe(\n        map(data => this.decoratedData(data)),\n      )\n    }\n    else {\n      return this.noData$()\n    }\n  }\n\n  private storeData$(\n    selector: any,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n\n    return this.store.select(selector)\n  }\n\n  private decoratedData(\n    data: EntityData\n  ): EntityData {\n\n    var buildDecoratedEntity = (entity: iEntity) => {\n      return this.entityCloner.clone(entity, this)\n    }\n\n    if(data) {\n      if(EntityCollection.prototype.isPrototypeOf(data)) {\n        let clonedEntities = data.map(buildDecoratedEntity)\n        let clonedCollection = new EntityCollection(clonedEntities)\n        return <EntityData>clonedCollection\n      }\n      if(JsonApiEntity.prototype.isPrototypeOf(data)) {\n        let clone = buildDecoratedEntity(<iEntity>data)\n        return <EntityData>clone\n      }\n    }\n\n    return data\n  }\n\n  private getSelector(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): Observable<any> {\n\n    return this.selectorProvider.provide(ri, opts.selectorOpts)\n  }\n\n  private shouldDispatch(\n    ri: iResourceIdentifier,\n    opts: iDataServiceOpts = {}\n  ): boolean {\n    return opts.syncWithApi\n  }\n\n  private getSliceName(\n    ri: iResourceIdentifier,\n  ) {\n    return _.join([ri.feature, 'entities', ri.type], '.')\n  }\n\n  private noData$(): Observable<any> {\n    return of([])\n  }\n}\n","import * as _ from 'lodash'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iEntityAttributeBuilder,\n  iEntityConstructorParams,\n} from '../../interfaces/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AttributeBuilder implements iEntityAttributeBuilder {\n  build(params: any): iEntityConstructorParams {\n    return {\n      feature: params.feature,\n      type: params.type,\n      id: params.id,\n      attributes: _.omit(params, ['id', 'feature'])\n    }\n  }\n}\n","import * as _ from 'lodash'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iEntityConstructorParams,\n  iEntityAttributeBuilder,\n} from '../../interfaces/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JsonApiAttributeBuilder implements iEntityAttributeBuilder {\n  build(params: any): iEntityConstructorParams {\n    let propNames = ['feature', 'type', 'id', 'attributes', 'relationships']\n    return <iEntityConstructorParams>_.pick(params, propNames)\n  }\n}\n","import { AttributeBuilder as EntityAttributeBuilder }               from './attribute-builder.service'\nimport { JsonApiAttributeBuilder as JsonApiEntityAttributeBuilder } from './json-api-attribute-builder.service'\n\nexport const services: any[] = [\n  EntityAttributeBuilder,\n  JsonApiEntityAttributeBuilder,\n]\n\nexport {\n  EntityAttributeBuilder,\n  JsonApiEntityAttributeBuilder,\n}\n","import * as _         from 'lodash'\n\nimport {\n  Observable,\n  of as observableOf,\n  pipe,\n  combineLatest,\n} from 'rxjs'\n\nimport { map, mergeMap } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  ApiService,\n} from '@ceo/shared'\n\n\nimport {\n  FeatureIdentifier,\n  iApiResponse,\n  iEntity,\n  iEntityConstructorParams,\n  iEntityService,\n  iResourceIdentifier,\n} from '../interfaces/index'\n\nimport { EntityFactory } from './entity-factory.service'\nimport { EntityAttributeBuilder } from './attribute-builders/index'\n\n@Injectable()\nexport class EntityService implements iEntityService {\n  constructor(\n    public entityFactory: EntityFactory,\n    public apiService: ApiService,\n    public attributeBuilder: EntityAttributeBuilder,\n  ) {}\n\n  create$(...args) {\n    return this.apiEntityRequest$('create$', ...args)\n  }\n\n  post$(...args) {\n    return this.apiEntityRequest$('post$', ...args)\n  }\n\n  delete$(...args) {\n    return this.apiEntityRequest$('delete$', ...args)\n  }\n\n  get$(...args) {\n    return this.apiEntityRequest$('get$', ...args)\n  }\n\n  update$(...args) {\n    return this.apiEntityRequest$('update$', ...args)\n  }\n\n  private apiEntityRequest$(action: string, ...args) {\n    return this.entityData$((<any>this.apiService)[action](...args))\n  }\n\n  private entityData$(apiData$: Observable<iApiResponse>) {\n    return apiData$.pipe(\n      mergeMap(apiResponse => this.buildEntityData$(apiResponse)),\n    )\n  }\n\n  private buildEntityData$(\n    apiResponse: iApiResponse\n  ): Observable<any> {\n    return this.buildEntities$(apiResponse).pipe(\n      map(entities => {\n        return {\n          data: entities,\n          resourceIdentifier: apiResponse.resourceIdentifier,\n        }\n      })\n    )\n  }\n\n  private buildEntities$(apiResponse: iApiResponse): Observable<any[]> {\n    var resourceIdentifier = apiResponse.resourceIdentifier\n    var apiData = apiResponse.data\n    var featureName = resourceIdentifier.feature\n\n    let buildEntity$ = _.bind(_.partial(this.buildEntity$, featureName), this)\n    let observables = _.map(apiData, buildEntity$)\n    return combineLatest(observables)\n  }\n\n  private buildEntity$(\n    featureName: FeatureIdentifier,\n    entityData: iEntityConstructorParams,\n  ): Observable<iEntity> {\n    let featureData = {\n      feature: featureName\n    }\n    _.defaults(entityData, featureData)\n    let data = this.attributeBuilder.build(entityData)\n    return this.entityFactory.build$(data)\n  }\n}\n","import { Action } from '@ngrx/store'\n\nimport { PayloadAction } from '@ceo/state'\n\nexport enum EntityConfigActionTypes {\n  SET_PRIMARY_ENTITY = 'SET_PRIMARY_ENTITY',\n}\n\nexport class SetPrimaryEntity extends PayloadAction {\n  readonly type = EntityConfigActionTypes.SET_PRIMARY_ENTITY\n  constructor(public slice: string, public payload: any) {\n    super(slice)\n  }\n}\n\nexport type EntityConfigActionsUnion =\n  SetPrimaryEntity\n","import { Observable, of, defer } from 'rxjs'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store, Action }    from '@ngrx/store'\nimport { Actions, Effect, ofType } from '@ngrx/effects'\n\n\n@Injectable()\nexport class EntityConfigEffects {\n  constructor(\n    private store: Store<any>,\n    private actions$: Actions<any>,\n  ) {}\n\n\n  @Effect()\n  init$: Observable<Action> =\n    defer(() => {})\n}\n","import * as _ from 'lodash'\n\nimport {\n  EntityConfigActionTypes,\n  EntityConfigActionsUnion,\n} from './actions'\n\nimport {\n  iEntityConfigState\n} from './state'\n\nexport function entityConfigReducer(\n  state: iEntityConfigState,\n  action: EntityConfigActionsUnion\n): iEntityConfigState {\n  var deltaState = {}\n\n  switch (action.type) {\n    case EntityConfigActionTypes.SET_PRIMARY_ENTITY:\n      deltaState = {\n       primaryEntity: _.omit(action.payload, 'feature'),\n      }\n      return _.assign({}, state, deltaState)\n    default:\n      return state\n  }\n}\n","import * as _ from 'lodash'\n\nimport { \n  createFeatureSelector, createSelector,\n  MemoizedSelector\n} from '@ngrx/store'\n\nimport { iEntityConfigState } from './state'\n\nexport const selectAppFeature  = createFeatureSelector<any>('app')\n\n/*\nlet selectPrimaryEntity = (state: iEntityConfigState) => {\n  return state.entity.primaryEntity\n}\nexport const selectEntityPrimaryEntity = createSelector(\n  selectAppFeature,\n  selectPrimaryEntity,\n  (appFeature: any, primaryEntity: any) => {\n    if(_.isEmpty(primaryEntity)) { \n      return null\n    }\n    else {\n      let type = primaryEntity.type\n      let id = primaryEntity.id\n      return appFeature.entities[type].entities[id]\n    }\n  }\n)\n\nexport const entityConfigSelectors = {\n  primaryEntity: selectEntityPrimaryEntity,\n}\n*/\n","export enum ActionTypes {\n  ADD_FEATURE = '[EntityFeature] ADD_FEATURE',\n  LOAD_PRIMARY_ENTITY = '[EntityFeature] LOAD_PRIMARY_ENTITY',\n  REGISTER_FEATURE = '[EntityFeature] REGISTER_FEATURE',\n  SELECT_PRIMARY_ENTITY = '[EntityFeature] SELECT_PRIMARY_ENTITY',\n  SET_PRIMARY_ENTITY = '[EntityFeature] SET_PRIMARY_ENTITY',\n  SET_PRIMARY_ENTITY_IDENTIFIER = '[EntityFeature] SET_PRIMARY_ENTITY_IDENTIFIER',\n}\n","import { Action } from '@ngrx/store'\n\nimport {\n  PayloadAction,\n} from '@ceo/state'\n\nimport { ActionTypes } from './action-types'\n\nexport class AddFeature extends PayloadAction {\n  readonly type = ActionTypes.ADD_FEATURE\n}\n\nexport class LoadPrimaryEntity extends PayloadAction {\n  readonly type = ActionTypes.LOAD_PRIMARY_ENTITY\n}\n\nexport class RegisterFeature extends PayloadAction {\n  readonly type = ActionTypes.REGISTER_FEATURE\n}\n\nexport class SelectPrimaryEntity implements Action {\n  readonly type = ActionTypes.SELECT_PRIMARY_ENTITY\n}\n\nexport class SetPrimaryEntity extends PayloadAction {\n  readonly type = ActionTypes.SET_PRIMARY_ENTITY\n}\n\nexport class SetPrimaryEntityIdentifier extends PayloadAction {\n  readonly type = ActionTypes.SET_PRIMARY_ENTITY_IDENTIFIER\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  of as observableOf,\n  combineLatest,\n} from 'rxjs'\n\nimport {\n  mergeMap,\n  map,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport { Store } from '@ngrx/store'\n\nimport {\n  InflectionService,\n} from '@ceo/core'\n\nimport {\n  iRouterStateUrl,\n} from '@ceo/state'\n\nimport {\n  UrlSlug,\n} from '@ceo/shared'\n\nimport {\n  JsonApiEntity,\n  EntityCollection,\n} from '../classes/index'\n\nimport {\n  entityFeatureSelectors,\n} from '../state/feature/selectors'\n\n\nimport {\n  iEntityCollection,\n  iFeature,\n  iFeatureMap,\n  iResourceIdentifier,\n} from '../interfaces/index'\n\nimport { DataService } from './data.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RouteEntityTypeProvider {\n  private _features$: Observable<iFeatureMap>\n\n  constructor(\n    protected store: Store<any>,\n    protected dataService: DataService,\n    protected inflectionService: InflectionService,\n  ) {}\n\n  handleRouterNavigation$(\n    routerState: iRouterStateUrl\n  ): Observable<iResourceIdentifier> {\n\n    return this.features$.pipe(\n      mergeMap(features => this.featureRoutableEntities$(features)),\n      map(collection => {\n        return this.resourceIdentifierFromRouterState(collection, routerState)\n      }),\n    )\n  }\n\n  private resourceIdentifierFromRouterState(\n    collection: any,\n    routerState: iRouterStateUrl\n  ): iResourceIdentifier {\n\n    let entityTypeSlug = this.entityTypeSlugFromRouterState(routerState)\n    if(entityTypeSlug) {\n\n      let entity = collection.findByAttr('urlSlug', entityTypeSlug)\n      if(entity) {\n\n        let routerStateOpts =\n          this.resourceIdentifierOptsFromRouterState(entity, routerState)\n\n        return _.merge({}, entity.resourceIdentifier, routerStateOpts)\n      }\n      else {\n        return null\n      }\n    }\n    else {\n      return null\n    }\n  }\n\n  private resourceIdentifierOptsFromRouterState(entity, routerState) {\n    let params = routerState.params\n    let ri = <iResourceIdentifier>{}\n\n    let isPrimaryKey = (value, prop) => {\n      return _.includes(entity.primaryKeys, prop)\n    }\n\n    let idKey = _.pickBy(params, isPrimaryKey) \n    if(idKey) {\n      ri.id = _.head(_.values(idKey))\n    }\n\n    let filter = _.omit(params, _.keys(idKey))\n    if(!_.isEmpty(filter)) {\n      ri.filter = filter\n    }\n\n    return ri\n  }\n\n  private entityTypeSlugFromRouterState(\n    routerState: iRouterStateUrl\n  ): UrlSlug {\n    let segments = _.map(routerState.segments, 'path')\n\n    if(_.head(segments) == 'app') {\n      segments = _.drop(segments)\n    }\n\n    let params = _.values(routerState.params)\n\n\n    let segmentsWithoutParam = (segments, param) => {\n      if(_.last(segments) == param) {\n        return _.dropRight(segments)\n      }\n      else {\n        return segments\n      }\n\n    }\n    let finalSegments = _.reduce(params, segmentsWithoutParam, segments)\n\n    return finalSegments[0]\n  }\n\n  private featureRoutableEntities$(features) {\n    let getRoutableEntities = _.bind(this.getRoutableEntities, this)\n    let routableEntities = _.map(features, getRoutableEntities)\n\n    return combineLatest(routableEntities).pipe(\n      map(routableEntityCollections => {\n        let entities = _.flatten(_.map(routableEntityCollections, 'entities'))\n        return new EntityCollection(entities)\n      }),\n    )\n  }\n\n  private getRoutableEntities(feature, featureName) {\n    return this.resourceConfigurations$(feature).pipe(\n      map(collection => this.routableResourceConfigurations(collection)),\n      map(collection => this.buildResourceIdentifiers(feature, collection)),\n    )\n  }\n\n  private routableResourceConfigurations(\n    collection: iEntityCollection\n  ): iEntityCollection {\n    return collection.where({isRoutable: true})\n  }\n\n  private resourceConfigurations$(feature) {\n    let ri = {\n      feature: feature.name,\n      type: 'resource-configurations',\n    }\n    let dataOpts = {\n      syncWithApi: false,\n    }\n\n    return this.dataService.get$(ri, dataOpts)\n  }\n\n  private buildResourceIdentifiers(feature, collection) {\n    let buildResourceIdentifier = (entity) => {\n      let ri = {\n        feature: feature.name,\n        type: entity.resourceType,\n      }\n\n      let attributes = {\n        resourceIdentifier: ri,\n        urlSlug: entity.displaySlug,\n        primaryKeys: entity.primaryKeys\n      }\n\n      let data = {\n        id: entity.id,\n        type: 'resource-identifiers',\n        attributes: attributes,\n      }\n      return new JsonApiEntity(data)\n    }\n    let entities = _.map(collection.entities, buildResourceIdentifier)\n    return new EntityCollection(entities)\n  }\n\n  private get features$(): Observable<iFeatureMap> {\n    if(!this._features$) {\n      this._features$ = this.getFeatures$()\n    }\n\n    return this._features$\n  }\n\n  private getFeatures$(): Observable<iFeatureMap> {\n    return <Observable<iFeatureMap>>this.store.select(entityFeatureSelectors.features)\n  }\n\n\n}\n","import * as _ from 'lodash'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  InflectionService,\n}   from '@ceo/core'\n\nimport {\n  iResourceIdentifier,\n} from '../interfaces/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ResourceIdentifierService {\n  constructor(\n    private inflectionService: InflectionService,\n  ) {}\n\n  isValid(ri: iResourceIdentifier): boolean {\n    return _.has(ri, 'feature') && _.has(ri, 'type')\n  }\n\n  isScope(ri: iResourceIdentifier): boolean {\n    return _.has(ri, 'filter.scope')\n  }\n\n  isSameResource(\n    riOne: iResourceIdentifier,\n    riTwo: iResourceIdentifier,\n  ): boolean {\n    return _.isEqual(riOne, riTwo)\n  }\n\n  scopeName(ri: iResourceIdentifier): string {\n    let scopeKey = _.get(ri, 'filter.scope')\n    return this.inflectionService.camelCase(scopeKey)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  defer,\n  of as observableOf,\n} from 'rxjs'\n\nimport {\n  map,\n  tap,\n  mergeMap,\n  switchMap,\n  distinctUntilChanged,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  Store, Action,\n  createSelector,\n} from '@ngrx/store'\n\nimport { Actions, Effect, ofType, }  from '@ngrx/effects'\n\nimport { ROUTER_NAVIGATION } from '@ngrx/router-store'\n\nimport {\n  FeatureActions,\n} from './actions/index'\n\nimport {\n  EntityActions,\n} from '../../classes/index'\n\nimport {\n  DataService,\n} from '../../services/data.service'\n\nimport {\n  RouteEntityTypeProvider,\n} from '../../services/route-entity-type-provider.service'\n\nimport {\n  ResourceIdentifierService,\n} from '../../services/resource-identifier.service'\n\nimport {\n  SelectorProvider,\n} from '../../services/selectors/selector-provider.service'\n\nimport {\n  entityFeatureSelectors,\n} from './selectors'\n\n@Injectable()\nexport class FeatureEffects {\n  constructor(\n    private store: Store<any>,\n    private actions$: Actions<any>,\n    protected dataService: DataService,\n    protected routeEntityTypeProvider: RouteEntityTypeProvider,\n    protected resourceIdentifierService: ResourceIdentifierService,\n    protected selectorProvider: SelectorProvider,\n  ) {}\n\n  @Effect()\n  handleRouterNavigation$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(ROUTER_NAVIGATION),\n        mergeMap((action: any) => {\n          return this.routeEntityTypeProvider\n            .handleRouterNavigation$(action.payload.routerState)\n        }),\n        distinctUntilChanged(this.resourceIdentifierService.isSameResource),\n        tap((payload: any) => {\n          if(this.resourceIdentifierService.isValid(payload)) {\n            this.dataService.get$(payload)\n          }\n        }),\n        map((payload: any) => {\n          return new FeatureActions.SetPrimaryEntityIdentifier(payload)\n        }),\n      )\n\n  @Effect()\n  registerFeature$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType('[EntityFeature] REGISTER_FEATURE'),\n        map((action: any) => {\n          let feature = action.payload\n          let addFeatureAction = new FeatureActions.AddFeature(feature)\n          return addFeatureAction\n        })\n      )\n\n  @Effect()\n  loadPrimaryEntity$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType('[EntityFeature] LOAD_PRIMARY_ENTITY'),\n        mergeMap((action: any) => {\n          return this.dataService.get$(action.payload)\n        }),\n      )\n\n  @Effect()\n  selectPrimaryEntity$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType('[EntityFeature] SELECT_PRIMARY_ENTITY'),\n        mergeMap((action: any) => {\n          return this.store.select(entityFeatureSelectors.primaryEntityIdentifier)\n        }),\n        distinctUntilChanged(this.resourceIdentifierService.isSameResource),\n        mergeMap((payload: any) => {\n          if(_.isNil(payload)) {\n            return observableOf(null)\n          }\n          else {\n            let selector = this.selectorProvider.provide(payload)\n            return this.store.select(<any>selector)\n          }\n        }),\n        map((payload: any) => {\n          return new FeatureActions.SetPrimaryEntity(payload)\n        })\n      )\n\n  @Effect()\n  init$: Observable<Action> =\n    defer(() => {\n      return observableOf(new FeatureActions.SelectPrimaryEntity())\n    })\n}\n","import { iFeatureState } from './state'\n\nexport const featureInitialState: iFeatureState = {\n  features: {},\n  primaryEntity: {\n    resourceIdentifier: null,\n    entity: null\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  FeatureActionsUnion,\n} from './actions/index'\n\nimport {\n  iFeatureState\n} from './state'\n\nexport function featureReducer(\n  state: iFeatureState,\n  action: FeatureActionsUnion\n): iFeatureState {\n\n  var stateDelta = <any> {}\n\n  switch (action.type) {\n    case '[EntityFeature] ADD_FEATURE':\n\n      let existingFeatures = state.features\n      let newFeature = action.payload\n\n      let featuresDelta = {}\n      featuresDelta[newFeature.name] = newFeature\n      let newFeatures = Object.assign({}, existingFeatures, featuresDelta)\n\n      stateDelta = <any> {\n        features: newFeatures\n      }\n\n      break\n\n    case '[EntityFeature] SET_PRIMARY_ENTITY':\n      stateDelta = {\n        primaryEntity: _.cloneDeep(state.primaryEntity)\n      }\n\n      stateDelta.primaryEntity.entity = action.payload\n\n      break\n\n    case '[EntityFeature] SET_PRIMARY_ENTITY_IDENTIFIER':\n      stateDelta = {\n        primaryEntity: _.cloneDeep(state.primaryEntity)\n      }\n\n      stateDelta.primaryEntity.resourceIdentifier = action.payload\n     \n      break\n\n    default:\n      break\n  }\n\n  return Object.assign({}, state, stateDelta)\n}\n","import {\n  FeatureEffects,\n  featureInitialState as initialState,\n  featureReducer as reducer,\n} from './feature/index'\n\nexport {\n  featureInitialState as initialState,\n  featureReducer as reducer,\n} from './feature/index'\n\nexport const effects: any[] = [\n  FeatureEffects,\n]\n","import { InjectionToken } from '@angular/core'\n\nexport const FEATURE_CONFIG = new InjectionToken<any>(\"Entity Feature Config\")\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  of as observableOf,\n  defer,\n  combineLatest,\n} from 'rxjs'\n\nimport {\n  switchMap,\n  catchError, map, mergeMap,\n  flatMap, filter, tap,\n  exhaustMap,\n} from 'rxjs/operators'\n\nimport { Injectable, Inject } from '@angular/core'\n\n// @ngrx imports\nimport { Store, Action }           from '@ngrx/store'\nimport {\n  Actions, Effect,\n  ofType, OnIdentifyEffects,\n  OnInitEffects, OnRunEffects,\n  EffectNotification,\n} from '@ngrx/effects'\n\nimport {\n  typeFor, PayloadAction,\n  applicationConfigSelectors, ApplicationConfigActions,\n  systemComponentsSelectors, SystemComponentsActions,\n} from '@ceo/state'\n\nimport { EntityService }                       from './entity.service'\n\nimport {\n  FeatureActions,\n} from '../state/index'\n\nimport {\n  EntityActions,\n  EntityActionsMap,\n} from '../classes/index'\n\nimport {\n  EntityConfigActions,\n} from '../state/index'\n\nimport {\n  iEntityConstructor,\n  iApiResponse,\n  iEntitySliceNamePayload,\n  iResourceIdentifier,\n  iEntityCollection,\n  iEntityMap,\n} from '../interfaces/index'\n\nimport {\n  FEATURE_CONFIG,\n} from '../util/tokens'\n\nimport { ResourceIdentifierService } from './resource-identifier.service'\n\n@Injectable()\nexport class EntityEffects\n  implements OnIdentifyEffects, OnInitEffects {\n\n  featureName: string = 'Feature'\n\n  constructor(\n    protected store: Store<any>,\n    protected actions$: Actions<any>,\n    protected entityService: EntityService,\n    @Inject(FEATURE_CONFIG) protected featureConfig,\n    protected resourceIdentifierService: ResourceIdentifierService\n  ) {\n    this.featureName = featureConfig.name\n  }\n\n  @Effect()\n  init$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(this.featureAction(\"INIT\")),\n        switchMap((action: PayloadAction) => {\n          let registerFeatureAction = new FeatureActions.RegisterFeature(this.featureConfig)\n          let loadSeedAction = new EntityActions.LoadSeedData(this.featureName, this.featureConfig)\n          return [registerFeatureAction, loadSeedAction]\n        }),\n      )\n\n  @Effect()\n  seed$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(this.featureAction(\"LOAD_SEED_DATA\")),\n        switchMap((action: PayloadAction) => {\n          var feature = action.payload\n          let seeds = action.payload.seedEntities\n\n          let buildLoadAction = (ri: iResourceIdentifier) => {\n            let sliceName = this.getFeatureEntitySlice(feature.name, ri.type)\n            return new EntityActions.Load(sliceName, ri)\n          }\n\n          return _.map(seeds, buildLoadAction)\n        }),\n      )\n\n  @Effect()\n  load$: Observable<Action> =\n    this.actions$\n     .pipe(\n       ofType(...this.sliceActions(\"LOAD\")),\n       mergeMap((action: PayloadAction) => {\n         let resourceOpts = this.buildResourceOpts(action)\n         return this.entityService.get$(resourceOpts)\n       }),\n       map((payload: iApiResponse) => {\n         return new EntityActions.AsyncSuccess(this.featureName, payload)\n       })\n     )\n\n  @Effect()\n  add$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(...this.sliceActions(\"ADD\")),\n        mergeMap((action: PayloadAction) => {\n          let resourceOpts = this.buildResourceOpts(action)\n          return this.entityService.create$(resourceOpts)\n        }),\n        map((payload: iApiResponse) => {\n          return new EntityActions.AsyncSuccess(this.featureName, payload)\n        })\n      )\n\n  @Effect()\n  update$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(...this.sliceActions(\"UPDATE\")),\n        mergeMap((action: PayloadAction) => {\n          let resourceOpts = this.buildResourceOpts(action)\n          return this.entityService.update$(resourceOpts)\n        }),\n        map((payload: iApiResponse) => {\n          return new EntityActions.AsyncSuccess(this.featureName, payload)\n        }),\n      )\n\n  @Effect()\n  asyncSuccess$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(this.featureAction(\"ASYNC_SUCCESS\")),\n        map((action: PayloadAction) => {\n          return {\n            resourceIdentifier: action.payload.resourceIdentifier,\n            data: this.groupedEntities(action.payload),\n          }\n        }),\n        switchMap((payload: any) => {\n          return this.buildAddToStoreActions(payload)\n        })\n      )\n\n  @Effect()\n  delete$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType(...this.sliceActions(\"DELETE\")),\n        mergeMap((action: PayloadAction) => {\n          let resourceOpts = this.buildResourceOpts(action)\n          return this.entityService.delete$(resourceOpts)\n        }),\n        map((payload: iApiResponse) => {\n          return new EntityActions.DeleteSuccess(\n            this.getEntitySlice(payload.resourceIdentifier.type),\n            payload.data\n          )\n        })\n      )\n\n  @Effect()\n  loadApplicationResource$: Observable<Action> =\n    this.actions$\n      .pipe(\n        ofType('[ApplicationConfig] LOAD_RESOURCE_BY_ID'),\n        mergeMap(() => {\n          return this.store.select(applicationConfigSelectors.resourceById)\n        }),\n        filter((payload) => this.isValidPayload(payload)),\n        mergeMap((payload) => {\n          return this.entityService.get$(payload)\n        }),\n        filter((payload) => this.isValidResource(payload)),\n        map((payload: any) => {\n          return new ApplicationConfigActions.SetPrimaryEntity(payload)\n        })\n      )\n\n\n  ngrxOnIdentifyEffects() {\n    return this.featureName\n  }\n\n  ngrxOnInitEffects(): Action {\n    let initFeatureAction = new EntityActions.Init(this.featureName, this.featureConfig)\n    return initFeatureAction\n  }\n\n  // Private methods\n\n  private buildAddToStoreActions(payload) {\n    let actions = []\n    let addActions = _.map(payload.data, _.bind(this.buildAddEntitiesAction, this))\n    actions = actions.concat(addActions)\n\n    if(this.resourceIdentifierService.isScope(payload.resourceIdentifier)) {\n      let scopeAction = this.buildAddScopeEntitiesAction(payload)\n      actions = actions.concat([scopeAction])\n    }\n\n    return _.flatten(actions)\n  }\n\n  private buildAddEntitiesAction(payload: iEntitySliceNamePayload) {\n    return new EntityActions.AddStoreEntities(\n      this.getEntitySlice(payload.sliceName),\n      payload.entities,\n    )\n  }\n\n  private buildAddScopeEntitiesAction(payload: any) {\n    let ri = payload.resourceIdentifier\n    let scopeName = this.resourceIdentifierService.scopeName(ri)\n\n    var sliceName = ri.type\n    let hasEntityType = (payload: iEntitySliceNamePayload): boolean => {\n      return payload.sliceName == sliceName\n    }\n\n    let sliceNamePayload = _.find(payload.data, hasEntityType)\n    let entities = sliceNamePayload.entities\n\n    let actionPayload = {\n      scope: scopeName,\n      entities: entities\n    }\n\n    return new EntityActions.SetScopeEntities(\n      this.getEntitySlice(sliceName),\n      actionPayload,\n    )\n  }\n\n  private groupedEntities(payload: iApiResponse): iEntitySliceNamePayload[] {\n    let entities = payload.data\n\n    let groupedBySlice = (entityTypeMap, entity) => {\n      let sliceName = entity.constructor.sliceName\n      var entities = []\n      if(entityTypeMap[sliceName]) {\n        entities = entityTypeMap[sliceName].entities\n      }\n      entities.push(entity)\n      entityTypeMap[sliceName] = {\n        sliceName: sliceName,\n        entities: entities\n      }\n\n      return entityTypeMap\n    }\n\n    return  _.values(_.reduce(entities, groupedBySlice, {}))\n  }\n\n\n  private isValidPayload(payload) {\n    //TODO: @Deepak  - it should ensure the payload is for THIS feature\n    return _.has(payload, 'feature') &&\n    _.has(payload, 'type') &&\n    _.has(payload, 'id')\n  }\n\n  private isValidResource(payload) {\n    return payload\n  }\n\n  private buildResourceOpts(action) {\n    let ri = {\n      type: _.last(_.split(action.slice, \".\"))\n    }\n    ri = _.merge({}, ri, action.payload)\n\n    return {\n      payload: action.payload,\n      type: _.last(_.split(action.slice, \".\")),\n      data: action.payload.data,\n      resourceIdentifier: ri,\n    }\n  }\n\n  private featureAction(actionName) {\n    let featureName = this.featureConfig.name\n    return typeFor(featureName, EntityActionsMap[actionName])\n  }\n\n  private sliceActions(actionName) {\n    let buildActionType = (sliceName) => {\n      return typeFor(sliceName, EntityActionsMap[actionName])\n    }\n    let sliceActions = _.map(this.featureConfig.sliceNames, buildActionType)\n    return sliceActions\n  }\n\n  private getSliceName(resourceOpts) {\n    return _.join([resourceOpts.feature, 'entities', resourceOpts.type], '.')\n  }\n\n  private getEntitySlice(sliceName) {\n    return this.getFeatureEntitySlice(this.featureName, sliceName)\n  }\n\n  private getFeatureEntitySlice(featureName, sliceName) {\n    return _.join([featureName,'entities', sliceName], '.')\n  }\n}\n","import { DataService }                  from './data.service'\nimport { EntityCloner }                 from './entity-cloner.service'\nimport { EntityEffects }                from './entity.effects'\nimport { EntityFactory }                from './entity-factory.service'\nimport { EntityService }                from './entity.service'\nimport { EntityRelationshipProvider }   from './entity-relationship-provider.service'\nimport { EntityTypeProviderService }    from './entity-type-provider.service'\nimport { ResourceIdentifierService }    from './resource-identifier.service'\nimport { RouteEntityTypeProvider }      from './route-entity-type-provider.service'\nimport { DataService as EntityDataService }              from './data.service'\n\nimport * as attributeBuilders from './attribute-builders/index'\nimport * as selectors         from './selectors/index'\n\nexport const entityServices: any[] = [\n  DataService,\n  EntityCloner,\n  EntityEffects,\n  EntityFactory,\n  EntityRelationshipProvider,\n  EntityService,\n  EntityTypeProviderService,\n  ResourceIdentifierService,\n  RouteEntityTypeProvider,\n  EntityDataService,\n  ...attributeBuilders.services,\n  ...selectors.services,\n]\n\nexport { DataService }\nexport { EntityCloner }\nexport { EntityDataService }\nexport { EntityEffects }\nexport { EntityFactory }\nexport { EntityService }\nexport { EntityRelationshipProvider }\nexport { EntityTypeProviderService }\nexport { ResourceIdentifierService }\nexport { RouteEntityTypeProvider }\n\nexport {\n  EntityAttributeBuilder,\n  JsonApiEntityAttributeBuilder,\n} from './attribute-builders/index'\n\nexport {\n  EntitySelectorNameService,\n  EntitySelectorService,\n  EntitySelectorProvider,\n} from './selectors/index'\n","import * as _ from 'lodash'\n\nimport { iEntityConfig } from '../../../interfaces'\n\nlet buildEntityConfig  = (\n  apiConfig,\n  defaultEntityConfigClass,\n  params,\n): iEntityConfig  => {\n\n  let configClass =\n    _.get(params, 'entityConfigClass', defaultEntityConfigClass)\n\n  let configParams = _.merge(\n    _.omit(params, ['entityConfigClass']),\n    {apiConfig: apiConfig}\n  )\n\n  return new configClass(configParams)\n}\n\nexport const buildEntityConfigs = (\n  entityConfigParams,\n  apiConfig,\n  defaultEntityConfigClass,\n) => {\n  let build =\n    _.partial(buildEntityConfig, apiConfig, defaultEntityConfigClass)\n\n  return _.map(\n    _.sortBy(entityConfigParams, 'type'),\n    build\n  )\n}\n","import { createEntityAdapter }  from '@ngrx/entity';\n\nimport {\n  iEntity,\n} from '../../../interfaces/index'\n\nexport function buildEntityInitialState(entityType): any {\n  let createInitialStateForEntityType = (name) => {\n    let prop = {};\n    let initialState = createEntityAdapter<iEntity>().getInitialState();\n    let customInitialState = {\n      selectedEntityId: null,\n      config: {\n        entityType: entityType\n      },\n      scopes: {\n      },\n    }\n    initialState =\n      Object.assign(\n        {},\n        initialState,\n        customInitialState,\n        entityType.config.initialState\n      )\n    prop[name] = initialState\n    return prop;\n  }\n\n  let sliceName = entityType.sliceName;\n  return createInitialStateForEntityType(sliceName);\n}\n","import * as _ from 'lodash'\n\nimport { pipe } from 'rxjs'\nimport { filter } from 'rxjs/operators'\n\nimport {\n  select,\n  createSelector,\n  compose,\n  ActionReducer,\n  createFeatureSelector,\n  combineReducers,\n} from '@ngrx/store'\n\nimport {\n  iEntityState,\n  iEntity,\n  iEntityCollection,\n  iEntityConfig\n} from '../../../interfaces'\n\nimport {\n  EntityAdapterFactory,\n} from '../../../classes'\n\nimport {\n  entityConfigReducer,\n} from '../../../state'\n\nimport {\n  buildEntitySelectors,\n  buildRootSelector,\n  buildSliceSelector,\n  buildFeatureSelector,\n} from '../selectors/index'\n\nexport function buildFeatureReducer(\n  featureConfig,\n  selectorService,\n  selectorNameService,\n  buildCustomSelectors,\n): ActionReducer<any> {\n\n  let factory = new EntityAdapterFactory(featureConfig)\n  let entityAdapters = factory.adapters\n\n  buildFeatureSelector(\n    featureConfig,\n    entityAdapters,\n    selectorService,\n    selectorNameService,\n    buildCustomSelectors,\n  )\n\n  var featureEntitiesReducerPrefix = _.join([featureConfig.name, 'entities'], '.')\n\n  var entityReducers = _.reduce(_.map(entityAdapters, buildEntityReducer), _.merge, {})\n\n  // @Luis: action should not be any\n  let featureEntitiesReducer = (state: iEntityState<iEntity>, action: any) => {\n    let sliceName = action.slice\n\n    if(_.startsWith(sliceName, featureEntitiesReducerPrefix)) {\n      let entitySliceName = _.last(_.split(sliceName, '.'))\n      let stateDelta = {}\n      if(entitySliceName) {\n        stateDelta[entitySliceName] = \n          entityReducers[entitySliceName](state[entitySliceName], action)\n      }\n      return Object.assign({}, state, stateDelta)\n    }\n    else {\n      return state\n    }\n  }\n\n  let reducers = {\n    config: entityConfigReducer,\n    entities: featureEntitiesReducer,\n  }\n\n  return combineReducers(reducers)\n}\n\nlet buildEntityReducer = (entityTypeAdapter) => {\n  let reducer = {}\n  let key = entityTypeAdapter.sliceName\n  reducer[key] = entityTypeAdapter.reducer\n  return reducer\n}\n","import {\n  JsonApiEntity,\n} from '../classes/index'\n\nimport {\n  FEATURE_CONFIG,\n} from './tokens'\n\nlet featureConfig = {\n  name: 'Default Feature',\n  entityConfigs: [],\n  baseEntityType: JsonApiEntity,\n}\n\nlet featureConfigProvider = {\n  provide: FEATURE_CONFIG,\n  useValue: featureConfig,\n  multi: true,\n}\n\nexport const providers: any[] = [\n  featureConfigProvider,\n]\n","import { NgModule } from '@angular/core'\n\nimport { StoreModule }                 from '@ngrx/store'\nimport { EffectsModule } from '@ngrx/effects'\n\nimport {\n  effects,\n  initialState,\n  reducer,\n} from './state/state'\n\nimport { entityServices } from './services/index'\nimport { providers }from './util/index'\n\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(\n      'entity',\n      reducer,\n      {\n        initialState: initialState,\n      }\n    ),\n    EffectsModule.forFeature([\n      ...effects,\n    ]),\n  ],\n  declarations: [],\n  providers: [\n    ...entityServices,\n    ...providers,\n  ]\n})\nexport class EntityModule { }\n","import {\n  Observable,\n  BehaviorSubject,\n} from 'rxjs'\n\nimport {\n  iFormWrapper,\n} from '@ceo/shared'\n\nimport {\n  iEntity,\n} from '../../entity/index'\n\nimport {\n  iEntityFormManager,\n} from '../interfaces/index'\n\nexport class EntityFormManager implements iEntityFormManager {\n  private _entity: iEntity\n  private _form: iFormWrapper\n\n  private _entity$: Observable<iEntity>\n  private _form$: BehaviorSubject<iFormWrapper>\n\n  constructor(\n    entity$: Observable<iEntity>,\n    form$: BehaviorSubject<iFormWrapper>,\n  ) {\n    this.entity$ = entity$\n    this.form$ = form$\n  }\n\n  set entity$(entity$: Observable<iEntity>) {\n    this._entity$ = entity$\n    entity$.subscribe(entity => this.entity = entity)\n  }\n\n  get entity$(): Observable<iEntity> {\n    return this._entity$\n  }\n\n  set form$(form$: BehaviorSubject<iFormWrapper>) {\n    this._form$ = form$\n    form$.subscribe(form => this.form = form)\n  }\n\n  get form$(): BehaviorSubject<iFormWrapper> {\n    return this._form$\n  }\n\n  get entity(): iEntity {\n    return this._entity\n  }\n\n  set entity(entity: iEntity)  {\n    this._entity = entity\n  }\n\n  get form(): iFormWrapper {\n    return this._form\n  }\n\n  set form(form: iFormWrapper) {\n    this._form = form\n  }\n\n  formToEntity() {\n    this.entity.updateAttributes(this.form.value)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  iEntityCollection,\n  JsonApiEntity,\n  buildEntityRelationshipProperties,\n  defineEntityRelationshipGetSet,\n} from '../../entity/index'\n\nimport {\n  iFormEntity,\n} from '../interfaces/index'\n\nexport class FormEntity extends JsonApiEntity implements iFormEntity {\n  private _formFields$: Observable<iEntityCollection>\n\n  static relationshipNames: string[] = [\n    'form-fields',\n  ]\n\n  formFields$: any\n}\n//buildEntityRelationshipProperties(FormEntity)\n\nlet buildEntityRelationship = (name) => {\n  defineEntityRelationshipGetSet(FormEntity, name)\n}\n_.map(FormEntity.relationshipNames, buildEntityRelationship)\n","import { JsonApiEntity } from '../../entity/index'\n\nexport class FormFieldEntity extends JsonApiEntity {}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  of as observableOf\n} from 'rxjs'\n\nimport { map }        from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iEntityCollection\n} from '../../../../../entity/index'\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DropdownOptionsFactory {\n  build(data$: Observable<iEntityCollection>, entityKey) {\n    var dropdownData$ = data$.pipe(map(entityCollection =>{\n      var getOptions = (entity) => {\n        return this.getOptions(entityKey, entity)\n      }\n      return _.map(entityCollection.entities, getOptions)\n    }))\n    return dropdownData$\n  }\n\n  getOptions(key, entity) {\n    return {\n      key: entity.id,\n      value: entity.attributes[key]\n    }\n  }\n}\n\n","export const resourceList = [\n  {\n    key: 'default_project_roles',\n    value: 'name',\n    name: 'project-roles'\n  }\n]\n","import {\n  Observable,\n  of as observableOf\n} from 'rxjs'\n\nimport { Injectable } from '@angular/core';\n\nimport {\n  kebabCase,\n  pluralize,\n  snakeCase,\n} from '@ceo/core'\n\nimport {\n  iEntity,\n  iEntityCollection,\n  DataService,\n} from '../../../../../entity/index'\n\n\nimport { DropdownOptionsFactory } from './dropdown-options-factory.service'\n\nimport { resourceList } from './resource-list'\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DropdownFactory {\n  private selectorData$: Observable<iEntityCollection>\n\n  constructor(\n    private dataService: DataService,\n    private optionsFactory: DropdownOptionsFactory,\n  ) { }\n\n  build(resolvable): any {\n    var entityKey = 'name';\n    var name = pluralize(resolvable.name.replace('_id', ''));\n    let resource = resourceList.filter(item => item.key === name)\n    if(resource.length > 0){\n      entityKey = resource[0].value\n      this.selectorData$ = this.getSelectors$(resource[0].name)\n    }\n    else{\n      this.selectorData$ = this.getSelectors$(name)\n    }\n    return this.optionsFactory.build(this.selectorData$, entityKey);\n  }\n\n  getSelectors$(type) {\n    let resourceOpts = {\n      feature: \"app\",\n      type: type\n    }\n    return this.dataService.get$(resourceOpts);\n  }\n}\n\n","import * as _ from 'lodash'\n\nimport { Observable } from 'rxjs'\n\nimport {\n  of as observableOf,\n} from 'rxjs'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  Validators as NgValidators,\n} from '@angular/forms'\n\n\nimport {\n  FormControlType,\n  FormMemberType,\n  InputTypeAttribute,\n  iFormMemberFactoryParams,\n} from '@ceo/shared'\n\nimport {\n  iEntity,\n} from '../../../../../entity/index'\n\nimport { DropdownFactory as SelectFactory } from './dropdown-factory.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormControlDataFactory {\n  static defaultControlType: FormControlType = 'input'\n  static formMemberType: FormMemberType = 'form-item'\n\n  constructor(\n    private selectFactory: SelectFactory,\n  ) { }\n\n  build(\n    entity: iEntity,\n  ): Partial<iFormMemberFactoryParams> {\n\n    return {\n      type: FormControlDataFactory.formMemberType,\n      data: {\n        label: this.labelParams(entity),\n        control: this.controlParams(entity)\n      }\n    }\n  }\n\n  private labelParams(entity: iEntity) {\n    return {\n      text: entity.displayName,\n    }\n  }\n\n  private controlParams(entity: iEntity) {\n    let params = {\n      controlType: this.controlType(entity),\n      placeholder: entity.displayName,\n      key: entity.name,\n      validators: this.buildEntityValidators(entity),\n      displayName: entity.displayName,\n    }\n\n    let controlTypeParams =\n      this.controlTypeData(entity, this.controlType(entity))\n\n    return _.defaults(params, controlTypeParams)\n  }\n\n  private controlType(entity): FormControlType {\n    if(entity.name.includes(\"_id\")) {\n      return 'select' as FormControlType\n    }\n\n    if(entity.dataType == 'boolean') {\n      return 'checkbox' as FormControlType\n    }\n\n    return FormControlDataFactory.defaultControlType\n  }\n\n  private controlTypeData(entity: iEntity, controlType: FormControlType) {\n    switch(controlType) {\n      case \"select\": {\n        return this.selectControlTypeData(entity)\n      }\n      case \"input\": {\n        return this.inputControlTypeData(entity)\n      }\n      default: {\n        return {}\n      }\n    }\n  }\n\n  private selectControlTypeData(entity) {\n    return {\n      options: this.selectFactory.build(entity)\n    }\n  }\n\n  private inputControlTypeData(entity) {\n    return {\n      required: true,\n      inputType: this.inputType(entity),\n    }\n  }\n\n  private inputType(entity: iEntity): InputTypeAttribute {\n    var inputType = 'text'\n    if(entity.name == 'email') {\n      inputType = 'email'\n    }\n    if(entity.name == 'password') {\n      inputType = 'password'\n    }\n\n    return inputType as InputTypeAttribute\n  }\n\n  private buildEntityValidators(entity: iEntity) {\n    let validators = [NgValidators.required]\n\n    if(entity.name == 'email') {\n      validators.push(NgValidators.email)\n    }\n    return validators\n  }\n}\n","import {\n  of as observableOf,\n  Observable\n} from 'rxjs'\n\nimport { Injectable } from '@angular/core'\nimport {\n  Validators as NgValidators,\n} from '@angular/forms'\n\nimport { kebabCase } from '@ceo/core'\n\nimport {\n  iEntity,\n  iEntityCollection,\n} from '../../../../../entity/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormControlValidatorFactory {\n  build(\n    resolvable: iEntity,\n  ): any {\n\n    return {\n      type: 'form-item',\n      data: {\n        control: {\n          validators: [ NgValidators.required ] ,\n        }\n      }\n    }\n  }\n}\n","import * as _                 from 'lodash'\nimport { Observable, empty  } from 'rxjs'\n\nimport { map } from 'rxjs/operators'\n\nimport { Injector, Injectable, InjectionToken } from '@angular/core'\n\nimport {\n  kebabCase,\n  pluralize,\n  snakeCase,\n} from '@ceo/core'\n\nimport {\n  iEntity,\n  EntityData,\n  JsonApiEntity,\n} from '../../../../../entity/index'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormGroupDataFactory {\n  build(\n    entity: iEntity\n  ): any {\n    let resourceType = this.pluralizeType(entity)\n\n    return {\n      memberType: 'form-group',\n      key: this.inputKey(entity),\n      resourceType: resourceType,\n      formName: this.buildFormName(resourceType)\n    }\n  }\n\n  private pluralizeType(entity): string {\n    return pluralize(snakeCase(entity.className))\n  }\n\n  private inputKey(entity) {\n    return `${entity.name}_attributes`\n  }\n\n  private buildFormName(resourceType: string, formType: string = 'edit') {\n    return `${resourceType}.${formType}`\n  }\n}\n","import { Injectable } from '@angular/core'\n\nimport {\n  iEntity,\n} from '../../../../../entity/index'\n\nimport { FormControlDataFactory } from './form-control-data-factory.service'\nimport { FormControlValidatorFactory } from './form-control-validator-factory.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormItemDataFactory {\n  constructor(\n    private formControlDataFactory: FormControlDataFactory,\n    private formControlValidatorFactory: FormControlValidatorFactory,\n  ) { }\n\n  build(\n    entity: iEntity\n  ): any {\n    let factory = this.resolveParamsFactory(entity)\n    return factory.build(entity)\n  }\n\n  private resolveParamsFactory(entity: iEntity) {\n    switch(entity.type) {\n      case \"resource-attributes\": {\n        return this.formControlDataFactory\n      }\n      case \"resource-validators\": {\n        return this.formControlValidatorFactory\n      }\n      default: {\n        return this.formControlDataFactory\n      }\n    }\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport { map } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iEntity,\n} from '../../../../../entity/index'\n\nimport {\n  FormGroupDataFactory,\n  FormItemDataFactory,\n} from '../data-factories/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataFactoryResolver {\n  constructor(\n    private formGroupDataFactory: FormGroupDataFactory,\n    private formItemDataFactory: FormItemDataFactory,\n  ) {}\n\n  resolve(\n    entity: iEntity,\n  ) {\n    switch(entity.type) {\n      case \"resource-associations\": {\n        return this.formGroupDataFactory\n      }\n      case \"resource-attributes\": {\n        return this.formItemDataFactory\n      }\n      case \"resource-validators\": {\n        return this.formItemDataFactory\n      }\n      default: {\n        return this.formItemDataFactory\n      }\n    }\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport { map } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iFormMemberFactoryParams,\n} from '@ceo/shared'\n\nimport {\n  iEntity,\n} from '../../../../../entity/index'\n\nimport { DataFactoryResolver } from './data-factory-resolver.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataFactory {\n  constructor(\n    private dataFactoryResolver: DataFactoryResolver,\n  ) {}\n\n  build(\n    entity: iEntity,\n  ): Partial<iFormMemberFactoryParams> {\n    let factory = this.resolveDataFactory(entity)\n    return factory.build(entity) as Partial<iFormMemberFactoryParams>\n  }\n\n  private resolveDataFactory(\n    entity: iEntity,\n  ) {\n    return this.dataFactoryResolver.resolve(entity)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport {\n  map, filter, tap,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  EntityData,\n  iEntityCollection,\n} from '../../../../../entity/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RelationshipProvider {\n  provide$(\n    resourceConfiguration,\n    formFieldEntity,\n    relationshipName,\n  ): Observable<EntityData> {\n\n    return resourceConfiguration.relationship$(relationshipName).pipe(\n      filter((collection: iEntityCollection) => {\n\n        return this.relationshipFullyLoaded(\n          resourceConfiguration,\n          relationshipName,\n          collection\n        )\n\n      }),\n      map((collection: iEntityCollection) => {\n        return collection.invokeFilter('isForAttribute', formFieldEntity.inputName)\n      }),\n    )\n  }\n\n  private relationshipFullyLoaded(\n    resourceConfiguration,\n    relationshipName,\n    collection\n  ) {\n\n    let relationshipSize =\n      resourceConfiguration.relationshipSize(relationshipName)\n\n    return collection.length == relationshipSize\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  zip as observableZip,\n  Observable,\n} from 'rxjs'\n\nimport { first, filter, map, startWith, tap } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iEntity,\n  EntityData,\n} from '../../../../../entity/index'\n\nimport { RelationshipProvider } from './relationship-provider.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RelationshipsProvider {\n  private relationshipTypes: string[] = [\n    'resource-attributes',\n    'resource-associations',\n    'resource-validators',\n  ]\n\n  constructor(\n    private relationshipProvider: RelationshipProvider,\n  ) {}\n\n  provide$(\n    resourceConfiguration,\n    formFieldEntity,\n  ): Observable<iEntity[]> {\n\n    let provideRelationships$ = _.bind(\n      _.partial(\n        this.provideRelationship$,\n        resourceConfiguration,\n        formFieldEntity\n      ),\n      this\n    )\n\n    let relationships = _.map(this.relationshipTypes, provideRelationships$)\n\n    return observableZip(...relationships).pipe(\n      map(relationshipCollections => {\n        return _.flatMap(relationshipCollections, 'entities')\n      }),\n    )\n  }\n\n  private flattenedRelationships(collections): iEntity[] {\n    return _.flatMap(<any>_.pick(collections, 'entities'))\n  }\n\n  private provideRelationship$(\n    resourceConfiguration,\n    formFieldEntity,\n    relationshipType,\n  ): Observable<EntityData> {\n\n    return this.relationshipProvider.provide$(\n      resourceConfiguration,\n      formFieldEntity,\n      relationshipType,\n    )\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n} from 'rxjs'\n\nimport { map } from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iFormMemberFactoryParams,\n} from '@ceo/shared'\n\nimport {\n  EntityData,\n  iEntity,\n} from '../../../../../entity/index'\n\nimport {\n  RelationshipsProvider,\n  RelationshipDataFactory,\n} from '../relationships/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormMemberFactoryParamsService {\n  constructor(\n    private relationshipsProvider: RelationshipsProvider,\n    private relationshipDataFactory: RelationshipDataFactory,\n  ) {}\n\n  provide$(\n    resourceConfiguration,\n    formFieldEntity,\n  ): Observable<iFormMemberFactoryParams> {\n\n    return this.relationships$(resourceConfiguration, formFieldEntity).pipe(\n      map(relationships => {\n        return this.buildParams(relationships, formFieldEntity)\n      }),\n    )\n  }\n\n  private relationships$(\n    resourceConfiguration,\n    formFieldEntity,\n  ) {\n    return this.relationshipsProvider.provide$(\n      resourceConfiguration,\n      formFieldEntity,\n    )\n  }\n\n  private buildParams(entities, formFieldEntity): iFormMemberFactoryParams {\n    let buildEntityFormMemberParams =\n      _.bind(this.buildEntityFormMemberParams, this)\n    let entitiesParams = _.map(entities, buildEntityFormMemberParams)\n    let params = _.merge({}, ...entitiesParams)\n    return params as iFormMemberFactoryParams\n  }\n\n  private buildEntityFormMemberParams(\n    entity: iEntity,\n  ): Partial<iFormMemberFactoryParams> {\n    return this.relationshipDataFactory.build(entity)\n  }\n}\n","import * as _ from 'lodash'\n\nimport {\n  Observable,\n  of as observableOf,\n  zip, combineLatest,\n  BehaviorSubject,\n} from 'rxjs'\n\nimport {\n  first, tap, take,\n  map, mergeMap, skipWhile,\n  startWith, filter,\n  share,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iFormGroup,\n  iFormMemberFactoryParams,\n  iFormMember,\n  iMap,\n  FormGroup,\n  FormMemberFactory,\n  FormFactory as BaseFormFactory,\n} from '@ceo/shared'\n\nimport {\n  iEntity,\n  iEntityCollection,\n} from '../../../../entity/index'\n\nimport {\n  iFormEntity,\n} from '../../../interfaces/index'\n\nimport {\n  FormMemberFactoryParamsService,\n} from './form-fields/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormFactory {\n  constructor(\n    private formMemberFactory: FormMemberFactory,\n    private formMemberFactoryParamsService: FormMemberFactoryParamsService,\n    private formFactory: BaseFormFactory,\n  ) {}\n\n  build$(\n    resourceConfiguration: iEntity,\n    form: iFormEntity,\n  ): BehaviorSubject<any> {\n    return this.buildFormGroup$(resourceConfiguration, form, null)\n  }\n\n  buildFormGroup$(\n    resourceConfiguration: iEntity,\n    form: iFormEntity,\n    resourceType,\n  ): BehaviorSubject<any> {\n\n    return <BehaviorSubject<any>>form.formFields$.pipe(\n      mergeMap(formFields => {\n        return this.buildFormMembersParams$(\n          resourceConfiguration,\n          formFields,\n        )\n      }),\n      map((params: iMap<iFormMemberFactoryParams>) => {\n        return this.buildFormMembers(params)\n      }),\n      map((formMembers: iMap<iFormMember>) => {\n        return this.buildForm(formMembers, resourceType)\n      }),\n    )\n  }\n\n  private buildFormMembersParams$(\n    resourceConfiguration: iEntity,\n    formFields: iEntityCollection,\n  ): Observable<iMap<iFormMemberFactoryParams>> {\n\n    let buildFormMemberParams$ = _.partial(\n      _.bind(this.buildFormMemberParams$, this),\n      resourceConfiguration\n    )\n\n    let formMemberParams$ =\n      _.map(formFields.entities, buildFormMemberParams$)\n\n    return combineLatest(...formMemberParams$).pipe(\n      map(formMembersParams => {\n        let mergedParams = _.merge({}, ...formMembersParams)\n        return mergedParams as iMap<iFormMemberFactoryParams>\n      })\n    )\n  }\n\n  private buildFormMemberParams$(\n    resourceConfiguration,\n    formFieldEntity,\n  ): Observable<iMap<iFormMemberFactoryParams>> {\n    return this.formMemberFactoryParamsService.provide$(\n      resourceConfiguration,\n      formFieldEntity,\n    ).pipe(\n      map((params: iFormMemberFactoryParams) => {\n        let pair = [formFieldEntity.inputName, params]\n        return _.fromPairs([pair]) as iMap<iFormMemberFactoryParams>\n      }),\n    )\n  }\n\n  private buildFormMembers(\n    paramsSet: iMap<iFormMemberFactoryParams>,\n  ): iMap<iFormMember> {\n\n    let buildFormMember = (params: iFormMemberFactoryParams) => {\n      return this.formMemberFactory.build(params)\n    }\n    let formMembers = _.mapValues(paramsSet, buildFormMember)\n    return formMembers\n  }\n\n  private buildForm(\n    formMembers: iMap<iFormMember>,\n    resourceType: string,\n  ) {\n\n    var formParams\n    if(resourceType) {\n      let pair = [resourceType, formMembers]\n      formParams = _.fromPairs([pair])\n    }\n    else {\n      formParams = formMembers\n    }\n\n    return this.formFactory.build(formParams)\n  }\n}\n","// Accepts:\n// resourceType 'string'\n// formName 'string'\n//\n// Returns a FormGroup\n\nimport * as _ from 'lodash'\n\nimport {\n  Observable,\n  BehaviorSubject,\n  combineLatest,\n} from 'rxjs'\n\nimport {\n  map, mergeMap,\n  filter,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  TextboxFormControl,\n  iFormControl,\n  iFormWrapper,\n} from '@ceo/shared'\n\nimport {\n  EntityData,\n  iEntity,\n  DataService,\n} from '../../entity/index'\n\nimport {\n  iFormEntity,\n  iEntityFormFactoryOpts,\n} from '../interfaces/index'\n\nimport {\n  ResourceConfigurationFormFactory,\n} from './resource-configurations/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EntityFormFactory {\n  constructor(\n    private resourceConfigurationFormFactory: ResourceConfigurationFormFactory,\n    private dataService: DataService,\n  ) {}\n\n  build$(entity: iEntity, opts: iEntityFormFactoryOpts): BehaviorSubject<iFormWrapper> {\n    let data$ = combineLatest(\n      this.resourceConfiguration$(entity),\n      this.form$(entity, opts.formName),\n    )\n\n    return <BehaviorSubject<iFormWrapper>>data$.pipe(\n      mergeMap(([rc, form]) => {\n        return this.resourceConfigurationFormFactory.build$(<iEntity>rc, <iFormEntity>form)\n      }),\n    )\n  }\n\n  private form$(entity: iEntity, formName: string): Observable<iEntity> {\n    let opts = {\n      feature: entity.feature,\n      type: 'forms',\n      id: formName,\n    }\n\n    return <Observable<iEntity>>this.loadData$(opts)\n  }\n\n  private resourceConfiguration$(entity: iEntity): Observable<EntityData> {\n    let opts = {\n      feature: entity.feature,\n      type: 'resource-configurations',\n      id: entity.type,\n    }\n\n    return <Observable<iEntity>>this.loadData$(opts)\n  }\n\n  private loadData$(opts: any): Observable<iEntity> {\n    return this.dataService.get$(opts).pipe(\n      filter(entityType => !_.isNil(entityType))\n    )\n  }\n}\n","import {\n  Observable,\n  BehaviorSubject,\n} from 'rxjs'\n\nimport {\n  mergeMap,\n  shareReplay,\n} from 'rxjs/operators'\n\nimport { Injectable } from '@angular/core'\n\nimport {\n  iFormWrapper,\n} from '@ceo/shared'\n\nimport {\n  iEntity,\n} from '../../entity/index'\n\nimport {\n  EntityFormManager,\n} from '../classes/index'\n\nimport { EntityFormFactory } from './entity-form-factory.service'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EntityFormManagerFactory {\n  constructor(\n    private formFactory: EntityFormFactory,\n  ) { }\n\n  build(entity$: Observable<iEntity>, formName: string): EntityFormManager {\n    let form$ = this.buildForm$(entity$, formName).pipe(\n      shareReplay(1),\n    ) as BehaviorSubject<iFormWrapper>\n\n    return new EntityFormManager(entity$, form$)\n  }\n\n  private buildForm$(\n    entity$: Observable<iEntity>,\n    formName: string,\n  ): BehaviorSubject<iFormWrapper> {\n\n    return entity$.pipe(\n      shareReplay(1),\n      mergeMap(entity => this.buildForm(entity, formName))\n    ) as BehaviorSubject<iFormWrapper>\n  }\n\n  private buildForm(\n    entity: iEntity,\n    formName: string\n  ): BehaviorSubject<iFormWrapper> {\n    let opts = {\n      formName: formName\n    }\n    return this.formFactory.build$(entity, opts)\n  }\n}\n","import {\n  FormControlDataFactory,\n  FormControlValidatorFactory,\n  FormGroupDataFactory,\n  FormItemDataFactory,\n  DropdownFactory,\n  DropdownOptionsFactory,\n} from './index'\n\nexport const services: any[] = [\n  FormControlDataFactory,\n  FormControlValidatorFactory,\n  FormGroupDataFactory,\n  FormItemDataFactory,\n  DropdownFactory,\n  DropdownOptionsFactory,\n]\n","import {\n  FormMemberFactoryParamsService,\n} from './index'\n\n\nexport const services: any[] = [\n  FormMemberFactoryParamsService,\n]\n","import {\n  RelationshipDataFactory,\n  RelationshipDataFactoryResolver,\n  RelationshipProvider,\n  RelationshipsProvider,\n} from './index'\n\nexport const services: any[] = [\n  RelationshipDataFactory,\n  RelationshipDataFactoryResolver,\n  RelationshipProvider,\n  RelationshipsProvider,\n]\n","import {\n  ResourceConfigurationFormFactory,\n} from './index'\n\nimport { services as dataFactoriesServices } from './data-factories/services'\nimport { services as formFieldsServices }    from './form-fields/services'\nimport { services as relationshipsServices } from './relationships/services'\n\nexport const services: any[] = [\n  ResourceConfigurationFormFactory,\n  ...dataFactoriesServices,\n  ...formFieldsServices,\n  ...relationshipsServices,\n]\n","import { services as formsServices } from './forms/services'\n\nexport const services: any[] = [\n  ...formsServices,\n]\n","import {\n  EntityFormFactory,\n  EntityFormManagerFactory,\n} from './public-api'\n\nimport { services as resourceConfigurationServices } from './resource-configurations/services'\n\nexport const services: any[] = [\n  EntityFormFactory,\n  EntityFormManagerFactory,\n  ...resourceConfigurationServices,\n]\n","import { NgModule } from '@angular/core'\n\nimport { CeoFormsModule } from '@ceo/shared'\n\nimport { services }     from './services/services'\n\n@NgModule({\n  imports: [\n    CeoFormsModule,\n  ],\n  declarations: [],\n  providers: [\n    ...services,\n  ]\n})\nexport class CeoEntityFormsModule { }\n","import {\n  iEntityConfigState,\n  iPrimaryEntityState,\n} from './state'\n\nexport var configInitialState: iPrimaryEntityState = {\n  primaryEntity: {\n    feature: \"\",\n    type: \"\",\n    id: \"\",\n  }\n}\n","import {\n  EntityEffects,\n  RouteEntityTypeProvider,\n  ResourceIdentifierService,\n} from '../../../services/index'\n\nexport const buildEntityEffects = (\n  store,\n  actions,\n  entityService,\n  featureConfig,\n  resourceIdentifierService,\n) => {\n\n  return new EntityEffects(\n    store,\n    actions,\n    entityService,\n    featureConfig,\n    resourceIdentifierService,\n  )\n}\n","import {\n  EntityService,\n} from '../../../services/index'\n\nexport function buildEntityService(\n  entityFactory,\n  apiService,\n  attributeBuilder,\n): any {\n\n  return new EntityService(entityFactory, apiService, attributeBuilder)\n}\n","import { EntityTypeProviderService } from '../../../services';\n\nexport const buildEntityTypeProvider = (featureConfig) => {\n  return new EntityTypeProviderService(featureConfig)\n}\n","import * as _ from 'lodash';\n\nimport { classify } from '@ceo/core';\n\nlet buildEntityTypeClass = (entityConfig, baseEntity) => {\n  class Entity extends baseEntity {\n    static _sliceName: string = entityConfig.name;\n    static config: any = entityConfig;\n  }\n\n  return Entity;\n}\n\nexport function buildEntityTypes(\n  entityConfigs,\n  baseEntity\n) {\n\n  let addEntityType = (entityTypes, entityConfig) => {\n    let className = classify(entityConfig.name)\n    let entityTypeClass = buildEntityTypeClass(entityConfig, baseEntity)\n    entityTypes[className] = entityTypeClass\n    return entityTypes\n  }\n\n  return _.reduce(entityConfigs, addEntityType, {});\n}\n","import {\n  FeatureConfig,\n} from '../../../classes/index'\n\nexport function buildFeatureConfig(config): any {\n  return new FeatureConfig(config)\n}\n","import * as _ from 'lodash'\n\nimport {\n  FeatureConfig,\n} from '../../../classes/index'\n\nimport { buildEntityInitialState } from '../entity/index'\n\nexport function buildFeatureInitialState(config): any {\n  let featureConfig = new FeatureConfig(config)\n\n  let entityTypes = featureConfig.entityTypes;\n  let entityStates = _.reduce(\n    _.map(entityTypes, buildEntityInitialState),\n    _.merge,\n    {}\n  );\n\n  return {\n    entities: entityStates\n  }\n}\n"]}